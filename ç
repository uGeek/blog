#!/bin/bash
#
# <org-bash-blog v5.9.3. Build a blog from a single orgmode file with pandoc and all the bash power>
#
# Copyright (C) 05/10/2020 Angel. uGeek
# ugeekpodcast@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#  Install:
#
#
#   sudo apt install eog
#   
#    !/bin/bash
#    cp samuraidesigner /usr/bin
#
VERSION="v5.9.7.2 6/03/21"
#
#  NOVEDADES
#  ---------
#
#  - añadir la busqueda
#  - ir al final del archivo al abrir cualquier org
#  - cambiar el tamaño de la imagen. Añadir el paquete necesario en la documentación
#  - editar el cambio de tamaño en opción "-ii"
#  - añadir opción nimp



source /home/marc/docker/git/blog/config

TEMP_FILE="$PATH_BLOG.temp"


if [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "" ] || [ "$1" = "h" ]  
then
echo "

Modo de empleo:     org-bash-blog [ARCHIVO ORG-MODE] 

       Comando                    Significado
       org-bash-blog -n           Nuevo post en draft.org
       org-bash-blog -nim         Nuevo post importado de markdown a draft.org
       org-bash-blog -nimp        Nuevo post copiado en el editor desde markdown a draft.org
       org-bash-blog -d           Pasar todos los Artículos en estado PROGRAM, a program.org 
       org-bash-blog -w           Previsualizar Post programados
       org-bash-blog -p           Programar Post por fecha y hora, de program.org
       org-bash-blog -ii          Descargar Imagen desde internet o un servidor
       org-bash-blog -cal         Previsualizar Post programados en calcurse

       org-bash-blog  blog        Abrir blog.org con emacs
       org-bash-blog  draft       Abrir draft.org con emacs
       org-bash-blog  program     Abrir program.org con emacs
       org-bash-blog  blogt       Abrir blog.org con emacs versión terminal
       org-bash-blog  draftt      Abrir draft.org con emacs versión terminal
       org-bash-blog  programt    Abrir program.org con emacs versión terminal    
       org-bash-blog  -s          Buscar en tu títulos o subtítulos por palabras en tu orgmode, para modificar un artículo.
       org-bash-blog  -st         Buscar en tu títulos o subtítulos por palabras en tu orgmode, para modificar un artículo. Versión terminal

       org-bash-blog  -g          Publicar en git  

       org-bash-blog -i           Instalar org-bash-blog en tu pc. Situate donde esta el script y ejecuta: org-bash-blog -i              
       org-bash-blog -b           Construir carpetas
       org-bash-blog -f           Crear Nuevo Org-Mode
       org-bash-blog -ia          Añadir a tu sistema los alias blog y program
       org-bash-blog -h           Ayuda y ver Posts programados



Ejemplos:

- Asistente para crear nuevo artículo en draft.org:
   org-bash-blog -n 

- Asistente para crear artículo, importado de un archivo markdown:
    org-bash-blog -nim archivo.md

- Importar de draft.org a program.org, todos los artículos en estado PROGRAM:
    org-bash-blog -d

- Previsualizar e importar del archivo orgmode, las línas de descripción del artículo
  para el feed.
   org-bash-blog -w program.org

- Programar todos los articulos de program.org
    org-bash-blog -p

Otros: 
 Crea un  nuevo archivo orgmode para el blog
  org-bash-blog -f [ARCHIVO ORG-MODE] 


Post Programados:

$(crontab -l | grep "org-bash-blog" | grep "^# " | sed -e 's/^.//' | cut -d '#' -f1 | sort -k2 )


org-bash-blog 
"$VERSION"
"
exit
fi



if [ $1 = "-s" ]
then

if [ "$2" ]
then
grep -n "^*" $BLOG_ORG | sed 's|*||g' | sort -k2 | grep -i $2 | sort
echo ""
echo -n "   Introduce la línea: " ; read LINEA ; echo $LINEA    
emacs +$LINEA $BLOG_ORG  --eval="(org-tree-to-indirect-buffer)" #(org-narrow-to-subtree)"
exit
fi

    
echo ""
echo -n "   Escribe la palabra a buscar: " ; read WORD ; echo $WORD
echo ""
grep -n "^*" $BLOG_ORG | sed 's|*||g' | sort -k2 | grep -i $WORD | sort
echo ""
echo -n "   Introduce la línea: " ; read LINEA ; echo $LINEA
emacs +$LINEA $BLOG_ORG  --eval="(org-tree-to-indirect-buffer)" #(org-narrow-to-subtree)"
exit
fi



if [ $1 = "-st" ]
then
    
if [ "$2" ]
then
grep -n "^*" $BLOG_ORG | sed 's|*||g' | sort -k2 | grep -i $2 | sort
echo ""
echo -n "   Introduce la línea: " ; read LINEA ; echo $LINEA    
emacs -q -nw +$LINEA $BLOG_ORG  --eval="(org-tree-to-indirect-buffer)" #(org-narrow-to-subtree)"
exit
fi
    
echo ""
echo -n "   Escribe la palabra a buscar: " ; read WORD ; echo $WORD
echo ""
    
grep -n "^*" $BLOG_ORG | sed 's|*||g' | sort -k2 | grep -i $WORD | sort
echo ""
echo -n "   Introduce la línea: " ; read LINEA ; echo $LINEA

emacs -q -nw +$LINEA $BLOG_ORG  --eval="(org-tree-to-indirect-buffer)" #(org-narrow-to-subtree)"

    
exit
fi





if [ "$1" = "-t" ]
then
    pandoc program.org   -t plain 
    exit
    fi


if [ "$1" = "-ii" ]
then
echo "Nombre de la imágen"
read NOMBRE
echo "Escribe la url"
read URL
wget -O $PATH_BLOG/images-blog/$NOMBRE $URL
echo "#+HTML: <center>"  >> $PATH_BLOG/program/draft.org
echo "[[./images-blog/$NOMBRE]]" >> $PATH_BLOG/program/draft.org
echo "#+HTML: </center>" >> $PATH_BLOG/program/draft.org



echo "¿Quieres determina la anchura de la imágen? [ si /no ] "
read RESPUESTA



if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
echo "¿Que anchura quieres utilizar? (Ejem: 350)" ; read ANCHO
convert $PATH_BLOG/images-blog/$NOMBRE -resize $ANCHO  $PATH_BLOG/images-blog/$NOMBRE
fi



exit
fi

if [ $1 = "-dt" ]
then
    grep ":TITLE:" $2 | cut -d " " -f2-	> $TEMP_FILE/title
    grep ":EXPORT_DATE:" $2 | cut -d " " -f2- > $TEMP_FILE/date
paste -d, $TEMP_FILE/title $TEMP_FILE/date > $TEMP_FILE/moddate
exit
fi    

if [ $1 = "-d" ]
then
#PROGRAMS_ORG=$2   # add manual program.org
PROGRAM=$(grep -c "^* PROGRAM" $PATH_BLOG/program/draft.org)
echo "
Enviando $PROGRAM Artículos a program.org...

 "
grep -n "^* " $PATH_BLOG/program/draft.org | cut -d ":" -f1 > $TEMP_FILE/firstlines

#cat $PATH_BLOG/program/draft.org  | wc -l >> $TEMP_FILE/firstlines


# creo lastlines a partir de firstline, pero restando 1 a cada número
while read LINEA; do
    echo "$LINEA - 1" | bc >> $TEMP_FILE/lastlines
done < $TEMP_FILE/firstlines
# Elimino la primera línea de lastlines
sed -i '1d' $TEMP_FILE/lastlines
# Número total de lineas en draft
echo $(cat $PATH_BLOG/program/draft.org  | wc -l) >> $TEMP_FILE/lastlines


# borro draft.csv
echo "" > $TEMP_FILE/draft.csv

# Leo el archivo firstlines y lastlines. Lo envio a un nuevo archivo llamado draft.csv, separado por comillas
while read a && read b <&3; do
    echo "$a,$b" >> $TEMP_FILE/draft.csv
done < $TEMP_FILE/firstlines 3< $TEMP_FILE/lastlines

# Envio a draft2program el número de línea donde aparece "* PROGRAM"
grep -n "^* PROGRAM" $PATH_BLOG/program/draft.org | cut -d ":" -f1 > $TEMP_FILE/draft2program

# Mostrar con grep que lineas coinciden con "* PROGRAM", si es así poner en dos valores diferente los resultados del csv


while read LINEA; do
   
    FIRSTL=$(grep "$LINEA" $TEMP_FILE/draft.csv | cut -d, -f1)
    LASTL=$(grep "$LINEA" $TEMP_FILE/draft.csv | cut -d, -f2)
    #echo "$FIRSTL $LASTL"
    # mostrar el rango de líneas
    sed -n ''$FIRSTL','$LASTL' p' $PATH_BLOG/program/draft.org >> $PATH_BLOG/program/program.org
# Elimina el rango de líneas
    #sed -i ''$FIRSTL','$LASTL'd ' $PATH_BLOG/program/draft.org
done < $TEMP_FILE/draft2program
rm  $TEMP_FILE/firstlines  $TEMP_FILE/lastlines $TEMP_FILE/draft2program $TEMP_FILE/draft.csv $TEMP_FILE/programfirstlines > /dev/null 2>&1

########################################################################################



PROGRAM=$(grep -c "^* BLOG" $PATH_BLOG/program/draft.org)
echo "
Enviando $PROGRAM Artículos a blog.org...

 "
grep -n "^* " $PATH_BLOG/program/draft.org | cut -d ":" -f1 > $TEMP_FILE/firstlines

#cat $PATH_BLOG/program/draft.org  | wc -l >> $TEMP_FILE/firstlines


# creo lastlines a partir de firstline, pero restando 1 a cada número
while read LINEA; do
    echo "$LINEA - 1" | bc >> $TEMP_FILE/lastlines
done < $TEMP_FILE/firstlines
# Elimino la primera línea de lastlines
sed -i '1d' $TEMP_FILE/lastlines
# Número total de lineas en draft
echo $(cat $PATH_BLOG/program/draft.org  | wc -l) >> $TEMP_FILE/lastlines


# borro draft.csv
echo "" > $TEMP_FILE/draft.csv

# Leo el archivo firstlines y lastlines. Lo envio a un nuevo archivo llamado draft.csv, separado por comillas
while read a && read b <&3; do
    echo "$a,$b" >> $TEMP_FILE/draft.csv
done < $TEMP_FILE/firstlines 3< $TEMP_FILE/lastlines

# Envio a draft2program el número de línea donde aparece "* PROGRAM"
grep -n "^* BLOG" $PATH_BLOG/program/draft.org | cut -d ":" -f1 > $TEMP_FILE/draft2program

# Mostrar con grep que lineas coinciden con "* PROGRAM", si es así poner en dos valores diferente los resultados del csv


while read LINEA; do
   
    FIRSTL=$(grep "$LINEA" $TEMP_FILE/draft.csv | cut -d, -f1)
    LASTL=$(grep "$LINEA" $TEMP_FILE/draft.csv | cut -d, -f2)
    #echo "$FIRSTL $LASTL"
    # mostrar el rango de líneas
    sed -n ''$FIRSTL','$LASTL' p' $PATH_BLOG/program/draft.org >> $PATH_BLOG/blog.org
# Elimina el rango de líneas
    #sed -i ''$FIRSTL','$LASTL'd ' $PATH_BLOG/program/draft.org
done < $TEMP_FILE/draft2program
rm  $TEMP_FILE/firstlines  $TEMP_FILE/lastlines $TEMP_FILE/draft2program $TEMP_FILE/draft.csv $TEMP_FILE/programfirstlines > /dev/null 2>&1








########################################################################################



sed -i 's|^* PROGRAM|* DONE|g' $PATH_BLOG/program/draft.org
sed -i 's|^* BLOG|* DONE|g' $PATH_BLOG/program/draft.org




# Convierte todos los estados PROGRAM a TODO
sed -i 's|^* PROGRAM|* TODO|g' $PATH_BLOG/program/program.org
sed -i 's|^* BLOG|* TODO|g' $PATH_BLOG/blog.org


rm  $TEMP_FILE/firstlines  $TEMP_FILE/lastlines $TEMP_FILE/draft2program $TEMP_FILE/draft.csv $TEMP_FILE/programfirstlines > /dev/null 2>&1






exit
fi  

########################3
    


if [ $1 = "program" ] 
then
emacs $PATH_BLOG/program/program.org --eval "(goto-char (point-max))"
  exit
fi

if [ $1 = "draft" ] 
then
emacs $PATH_BLOG/program/draft.org  --eval "(goto-char (point-max))"

exit
fi
if [ $1 = "blog" ] 
then
emacs $PATH_BLOG/blog.org  --eval "(goto-char (point-max))"

exit
fi


if [ $1 = "programt" ] 
then
emacs -q -nw $PATH_BLOG/program/program.org  --eval "(goto-char (point-max))"
exit
fi

if [ $1 = "draftt" ] 
then
emacs -q -nw $PATH_BLOG/program/draft.org  --eval "(goto-char (point-max))"
exit
fi

if [ $1 = "blogt" ] 
then
emacs -q -nw $PATH_BLOG/blog.org  --eval "(goto-char (point-max))"
exit
fi




if [ $1 = "-g" ] 
then
    git --git-dir=$PATH_BLOG/.git  --work-tree=$PATH_BLOG add .
    git --git-dir=$PATH_BLOG/.git  --work-tree=$PATH_BLOG commit -m "update"
    git --git-dir=$PATH_BLOG/.git  --work-tree=$PATH_BLOG push
   
    exit
fi
    

    


    
if [ $1 = "-i" ] 
then
clear
sed -i "s|/home/angel/blog/|$PWD/|g" config
sed -i "s|source config|source $PWD/config|g" org-bash-blog 
cp org-bash-blog /usr/bin/
chmod +x /usr/bin/org-bash-blog
echo "Instalado Org-Bash-Blog"
echo "Instalando complementos para derivadas de Debian"
echo ""
sudo apt update
sudo apt install bash pandoc xml2 wget bc calcurse whiptail
echo " "
echo "Si no utilizas una derivada de Debian, instala los paquetes"
echo "   bash pandoc xml2 wget bc calcurse whiptail"
echo ""
exit
fi


if [ $1 = "-ia" ] 
then 
echo "Vamos a enviar alias para acceder a tus carpetas de un modo rápido"
echo "¿Cual es tu archivo de configuración?"
echo "¿ .bashrc, .zshrc,... ?" 
read CONFIG_FILE
echo "alias blog='$PATH_BLOG'" >> $HOME/$CONFIG_FILE
echo "alias program='"$PATH_BLOG"program'" >> $HOME/$CONFIG_FILE
clear
echo "Reinicia tu terminal para que funcionen los nuevos alias."
echo "blog:    Te lleva directamente a la raíz del directorio del blog"
echo "program: Te lleva directamente al directorio program"
exit
fi
    
if [ $1 = "-cal" ] 
then
calcurse
exit
fi

if [ $1 = "-w" ] 
then
if [ -d ../program ];
then
clear    
echo "Iniciando Previsualización del Post"
else
clear
echo ""
echo ""
echo ""
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo ""
echo "    NO ESTAS EN EL DIRECTORIO PROGRAM!!     "
echo ""
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo ""
echo ""
echo "Para situarte en el directorio program, escribe:"
echo " org-bash-blog -rp"
exit 1
fi


echo "Previsualizando... "
PROGRAMS_ORG=$2   # add manual program.org
TODO=$(grep -c "^* TODO" $PROGRAMS_ORG)
echo "
Programando $TODO Artículos...
 "
grep ":TITLE:"  $PROGRAMS_ORG | cut -d " " -f2- | tail -$TODO > $TEMP_FILE/title
grep ":EXPORT_DATE:"  $PROGRAMS_ORG | cut -d " " -f2- | tail -$TODO > $TEMP_FILE/date
grep -n "^* TODO" $PROGRAMS_ORG | cut -d ":" -f1 > $TEMP_FILE/firstlines
cat $PROGRAMS_ORG  | wc -l >> $TEMP_FILE/firstlines
#rm *.html
while read LINEA; do
    echo "$LINEA - 1" | bc >> $TEMP_FILE/lastlines
done < $TEMP_FILE/firstlines
cat $TEMP_FILE/lastlines | sed '$d' > $TEMP_FILE/temp
echo $(cat $PROGRAMS_ORG  | wc -l) >> $TEMP_FILE/temp
cat $TEMP_FILE/firstlines | sed '$d' > $TEMP_FILE/primeralinea
cat $TEMP_FILE/temp | sed '1d' > $TEMP_FILE/ultimalinea
paste -d, $TEMP_FILE/primeralinea $TEMP_FILE/ultimalinea $TEMP_FILE/date $TEMP_FILE/title > $TEMP_FILE/program.csv
VOL=0
while read LINEA; do
    NUM=$(echo "$VOL + 1" | bc )
    VOL=$NUM
    LINEAP=$(echo $LINEA | cut -d, -f1)
    LINEAU=$(echo $LINEA | cut -d, -f2)
    DIA=$(echo $LINEA | cut -d, -f3)
    TITLEPROGRAM=$(echo $LINEA | cut -d, -f4- | sed -e 's/^[ \t]*//; s/[ \t]*$//; /^$/d')
    TITLE_FILE=$(echo $TITLEPROGRAM | sed -e 's/ /-/g'  ) 
    sed -n "$LINEAP,$LINEAU"p   $PROGRAMS_ORG | sed 's|^* TODO|*|g' > $TITLE_FILE.org
# Añadir Descripción    
    sed -n "$LINEAP,$LINEAU"p   $PROGRAMS_ORG | sed 's|^* TODO|*|g' > post.org
    sed -i "s|^* |* TODO |g" post.org
    DESCRIPTION=$(cat post.org | tail -n +11 |  sed '/^ *$/d' | head -n +1 | cut -d " " -f1-30 | sed 's/[ \t]*$//')
    sed -i "s|:DESCRIPTION:.*|:DESCRIPTION:|g" post.org    
    sed -i "s|:DESCRIPTION:|:DESCRIPTION: $DESCRIPTION|g" post.org
    cat post.org >> out.org
# Añadir Descripción
    echo $HEAD > $TITLE_FILE.html
    echo $HEAD_PAGE_POST >>  $TITLE_FILE.html
    cat $TITLE_FILE.org | pandoc --from org --to html5 >> $TITLE_FILE.html
    sed -i 's|src="./images-blog/|src="../images-blog/|g' $TITLE_FILE.html
############################################################################################
    sed -i 's|<sub>|_|g' $TITLE_FILE.html
    sed -i 's|</sub>||g' $TITLE_FILE.html
    rm $TITLE_FILE.org
    echo $PIE_WEB >> $TITLE_FILE.html
#

    #wkhtmltoimage --quality 20 "$TITLE_FILE.html" "$TITLE_FILE.png"
#
done < $TEMP_FILE/program.csv
echo '<head>
<title></title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
<html lang="es"><head><meta charset="utf-8"><meta name="robots" content="noindex">
<title>org-bash-blog. Index</title>
</head>
<body>
<h1>Org-bash-blog v 5.2.4</h1>
<h3>Indice de todas las páginas creadas en tu repositorio</h3>
<h5>'$(find . -type f | grep .html | wc -l)' archivos .html</h5>
<h5>' > org-bash-blog.html
find . -type f | grep .html | sed -r 's/(.*)/\<a href="\1" target="_blank" rel="noopener">\1\<\/a\><br>/' | sort -r >> org-bash-blog.html
$BROWSER org-bash-blog.html 
#$BROWSER  "$TITLE_FILE.html"  "$TITLE_FILE.jpg"
$BROWSER
########################
#mv "$TITLE_FILE.jpg" ~/docker/02_Org/web
#################
# Comprimir imágen
#jpegoptim --size=100k "$TITLE_FILE.jpg"
################
#fim -a "$PATH_BLOG/program/"
#eog   "$TITLE_FILE.jpg"
#rm *.html *.png *.jpg
#rm $TEMP_FILE/program.csv
rm  $TEMP_FILE/date  $TEMP_FILE/firstlines  $TEMP_FILE/lastlines  $TEMP_FILE/primeralinea  $TEMP_FILE/temp  $TEMP_FILE/ultimalinea $TEMP_FILE/program.csv  $TEMP_FILE/title 2>/dev/null


cp out.org $PROGRAMS_ORG
rm out.org post.org
exit
fi


if [ $1 = "-b" ]
then
mkdir -p icon css org post images-blog categories .temp $HOME/.config/org-bash-blog/ program/
exit
fi

if [ $1 = "-p" ]
then
mkdir -p /home/$USER/.config/org-bash-blog/    /home/$USER/.calcurse/
##############################################
ART="0"

while read LINEA
do
    INC=$(echo "$LINEA" | cut -d " " -f1,2)
    
    if [ "$INC" = "* TODO" ]
    then
	ART=$((1+$ART))     
    fi
    echo "$LINEA" >> $PATH_BLOG.temp/$ART.torg
    #echo $PWD
done < $PROGRAMS_ORG #program.org

ls $PATH_BLOG.temp/*.torg -1 > $PATH_BLOG.temp/list.txt

while read LINEA
do
    DATE_POST=$(grep ":EXPORT_DATE:" $LINEA | cut -d " " -f2)
    mv $LINEA  $DATE_POST-$LINEA
        
done < $PATH_BLOG.temp/list.txt


cat $(ls -r $PATH_BLOG.temp/*.torg)  > program.org

rm $PATH_BLOG.temp/list.txt $PATH_BLOG.temp/*.torg


##############################################
    #PROGRAMS_ORG=$2   # add manual program.org
TODO=$(grep -c "^* TODO" $PROGRAMS_ORG)
echo "
Programando $TODO Artículos...
 "
grep ":TITLE:"  $PROGRAMS_ORG | cut -d " " -f2- | tail -$TODO > $TEMP_FILE/title
grep ":EXPORT_DATE:"  $PROGRAMS_ORG | cut -d " " -f2- | tail -$TODO > $TEMP_FILE/date
grep -n "^* TODO" $PROGRAMS_ORG | cut -d ":" -f1 > $TEMP_FILE/firstlines
cat $PROGRAMS_ORG  | wc -l >> $TEMP_FILE/firstlines
while read LINEA; do
    echo "$LINEA - 1" | bc >> $TEMP_FILE/lastlines
done < $TEMP_FILE/firstlines
cat $TEMP_FILE/lastlines | sed '$d' > $TEMP_FILE/temp
echo $(cat $PROGRAMS_ORG  | wc -l) >> $TEMP_FILE/temp
cat $TEMP_FILE/firstlines | sed '$d' > $TEMP_FILE/primeralinea
cat $TEMP_FILE/temp | sed '1d' > $TEMP_FILE/ultimalinea
paste -d, $TEMP_FILE/primeralinea $TEMP_FILE/ultimalinea $TEMP_FILE/date $TEMP_FILE/title > $TEMP_FILE/program.csv
echo "######### org-bash-blog #########" > $TEMP_FILE/cron_program
echo " " >> $TEMP_FILE/cron_program
rm   "$PATH_SCRIPTS_PROGRAMS"org-bash-blog_program*
VOL=0

grep -v "## org-bash-blog"  ~/.calcurse/apts > ~/.calcurse/apt
mv ~/.calcurse/apt ~/.calcurse/apts
while read LINEA; do
    NUM=$(echo "$VOL + 1" | bc )
    VOL=$NUM
    LINEAP=$(echo $LINEA | cut -d, -f1)
    LINEAU=$(echo $LINEA | cut -d, -f2)
    DIA=$(echo $LINEA | cut -d, -f3)
    TITLEPROGRAM=$(echo $LINEA | cut -d, -f4- | sed -e 's/^[ \t]*//; s/[ \t]*$//; /^$/d')
    echo "$(date -d "$DIA" +'%m/%d/%Y @ %H:%M -> %m/%d/%Y @ %H:%M')|$TITLEPROGRAM ## org-bash-blog" >> ~/.calcurse/apts
    #echo "$(date -d "$DIA" +'%Y/%d/%m') [0] $TITLEPROGRAM ## org-bash-blog" >> ~/.calcurse/apts
    echo "# $(date -d "$DIA" +'%A %d de %B del %Y a las %H:%Mh') -> $TITLEPROGRAM ## org-bash-blog " >> $TEMP_FILE/cron_program
    date -d "$DIA" +'%M %H %d %m * bash '$PATH_SCRIPTS_PROGRAMS''org-bash-blog_program$NUM'.sh'  >> $TEMP_FILE/cron_program
    echo " " >> $TEMP_FILE/cron_program
    echo "cat "$PROGRAMS_ORG" | sed -n '"$LINEAP","$LINEAU"p;"$LINEAU"q' >> "$BLOG_ORG" "  > $PATH_SCRIPTS_PROGRAMS'org-bash-blog_program'$NUM.sh
    echo  "sed -i '"$LINEAP","$LINEAU"d' "$PROGRAMS_ORG"" >> $PATH_SCRIPTS_PROGRAMS'org-bash-blog_program'$NUM.sh
    echo  "cd $PATH_BLOG  ; $ORG_BASH_BLOG $BLOG_ORG" >> $PATH_SCRIPTS_PROGRAMS'org-bash-blog_program'$NUM.sh
    echo  $PUBLISH >>  $PATH_SCRIPTS_PROGRAMS'org-bash-blog_program'$NUM.sh
    echo  $SECOND_PUBLISH >>  $PATH_SCRIPTS_PROGRAMS'org-bash-blog_program'$NUM.sh
    echo  "rm   $PATH_SCRIPTS_PROGRAMS'org-bash-blog_program'$NUM.sh" >>  $PATH_SCRIPTS_PROGRAMS'org-bash-blog_program'$NUM.sh
    echo "Artículo: Nº$NUM  
Título:   $TITLEPROGRAM   
Fecha:    $(date -d "$DIA" +'%A %d de %B del %Y a las %H:%Mh')
 "
done < $TEMP_FILE/program.csv





echo "######### org-bash-blog #########" >> $TEMP_FILE/cron_program
rm  $TEMP_FILE/date  $TEMP_FILE/firstlines  $TEMP_FILE/lastlines  $TEMP_FILE/primeralinea  $TEMP_FILE/temp  $TEMP_FILE/ultimalinea $TEMP_FILE/program.csv  $TEMP_FILE/title
crontab -l > $TEMP_FILE/my_cron
sed -i '/org-bash-blog/d' $TEMP_FILE/my_cron
sed -i '/^ *$/d' $TEMP_FILE/my_cron
cat $TEMP_FILE/cron_program >> $TEMP_FILE/my_cron
crontab $TEMP_FILE/my_cron
rm $TEMP_FILE/my_cron $TEMP_FILE/cron_program
rm *.html > /dev/null 2>&1
exit
fi






if [ $1 = "-nimp" ]
then   
    clear
    
    echo "Copia el artículo en el editor"
    echo "abriendo el editor ..."
    sleep 3
    vim draft.md
    
DRAFT_POST=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Título del artículo" 7 40 $(cat draft.md | grep "^#") \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
			     echo "Nuevo Artículo"
			     echo "--------------"
			    
                             echo " Título:    $DRAFT_POST"
                         else
			     clear
			     echo " Artículo cancelado"
                             exit
			     
                         fi
DRAFT_CAT=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Categoria" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Categoría: $DRAFT_CAT"
                         else
			     clear
    			     echo " Artículo cancelado"
                        	exit
                         fi
DRAFT_TAGS=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Tags" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Etiquetas: $DRAFT_TAGS"
                         else
			     clear
			     echo " Artículo cancelado"
                         	exit
                         fi
DRAFT_IMAGE=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Nombre de la imagen. Ejemplo: imagen.png" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Imagen:    $DRAFT_IMAGE"
                         else
			       clear
                         	exit
                         fi
URL_IMAGE=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "url de la imagen. Si la importas de un servidor" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                        	wget -O $PATH_BLOG"images-blog"/$DRAFT_IMAGE  $URL_IMAGE 2>/dev/null
                         else
			     clear
			     echo " Artículo cancelado"
                        	exit
                         fi


# if (whiptail --title "EJEMPLO SI/NO" --yesno "Este es un ejemplo de un cuadro de dialogo de si/no" 8 78) then
#  echo "Has seleccionado Si, exit toma el valor de $?."
#   else
#  echo "Has seleccionado No, exit toma el valor de $?."
# fi
			 


echo "¿Quieres determina la anchura de la imágen? [ si /no ] "
read SI

if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
echo "¿Que anchura quieres utilizar? (Ejem: 350)" ; read ANCHO
convert $PATH_BLOG"images-blog"/$DRAFT_IMAGE -resize $ANCHO $PATH_BLOG"images-blog"/$DRAFT_IMAGE
fi


			 
			 


DIA=$(date +"%Y-%m-%d %H:%M")

echo '* TODO '$DRAFT_POST'
:PROPERTIES:
:TITLE: '$DRAFT_POST'
:EXPORT_FILE_NAME: '$(echo $DRAFT_POST | sed 'y/:,.;áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇ/----aAaAaAaAeEeEiIoOoOoOuUnNcC/' | sed 's| |-|g' | sed 's|--|-|g' | tr '[:upper:]' '[:lower:]' | cut -d " " -f1,2,3,4,5,6,7,8,9,10)'
:DESCRIPTION:
:EXPORT_DATE: '$DIA'
:CATEGORY: '$DRAFT_CAT'
:TAG: '$DRAFT_TAGS'
:IMAGE: ./images-blog/'$DRAFT_IMAGE'
:END:

#+HTML: <center>
[[./images-blog/'$DRAFT_IMAGE']]
#+HTML: </center>





' >> $DRAFT_ORG

# Renombrar espacios en blanco

pandoc -t org draft.md --columns 1000000000 | sed -E "/^[[:space:]]+:/ d" >> $DRAFT_ORG

sed -i s'|#+BEGIN_EXAMPLE|#+BEGIN_SRC sh|'g $DRAFT_ORG
sed -i s'|#+END_EXAMPLE|#+END_SRC|'g $DRAFT_ORG

$EMACS $DRAFT_ORG --eval "(goto-char (point-max))"
rm draft.md

exit
fi







if [ $1 = "-nim" ]
then   
    clear
    

DRAFT_POST=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Título del artículo" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
			     echo "Nuevo Artículo"
			     echo "--------------"
			    
                             echo " Título:    $DRAFT_POST"
                         else
			     clear
			     echo " Artículo cancelado"
                             exit
			     
                         fi
DRAFT_CAT=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Categoria" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Categoría: $DRAFT_CAT"
                         else
			     clear
    			     echo " Artículo cancelado"
                        	exit
                         fi
DRAFT_TAGS=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Tags" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Etiquetas: $DRAFT_TAGS"
                         else
			     clear
			     echo " Artículo cancelado"
                         	exit
                         fi
DRAFT_IMAGE=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Nombre de la imagen. Ejemplo: imagen.png" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Imagen:    $DRAFT_IMAGE"
                         else
			       clear
                         	exit
                         fi
URL_IMAGE=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "url de la imagen. Si la importas de un servidor" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                        	wget -O $PATH_BLOG"images-blog"/$DRAFT_IMAGE  $URL_IMAGE 2>/dev/null
                         else
			     clear
			     echo " Artículo cancelado"
                        	exit
                         fi


# if (whiptail --title "EJEMPLO SI/NO" --yesno "Este es un ejemplo de un cuadro de dialogo de si/no" 8 78) then
#  echo "Has seleccionado Si, exit toma el valor de $?."
#   else
#  echo "Has seleccionado No, exit toma el valor de $?."
# fi
			 


echo "¿Quieres determina la anchura de la imágen? [ si /no ] "
read SI

if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
echo "¿Que anchura quieres utilizar? (Ejem: 350)" ; read ANCHO
convert $PATH_BLOG"images-blog"/$DRAFT_IMAGE -resize $ANCHO $PATH_BLOG"images-blog"/$DRAFT_IMAGE
fi


			 
			 


DIA=$(date +"%Y-%m-%d %H:%M")

echo '* TODO '$DRAFT_POST'
:PROPERTIES:
:TITLE: '$DRAFT_POST'
:EXPORT_FILE_NAME: '$(echo $DRAFT_POST | sed 'y/:,.;áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇ/----aAaAaAaAeEeEiIoOoOoOuUnNcC/' | sed 's| |-|g' | sed 's|--|-|g' | tr '[:upper:]' '[:lower:]' | cut -d " " -f1,2,3,4,5,6,7,8,9,10)'
:DESCRIPTION:
:EXPORT_DATE: '$DIA'
:CATEGORY: '$DRAFT_CAT'
:TAG: '$DRAFT_TAGS'
:IMAGE: ./images-blog/'$DRAFT_IMAGE'
:END:

#+HTML: <center>
[[./images-blog/'$DRAFT_IMAGE']]
#+HTML: </center>





' >> $DRAFT_ORG

# Renombrar espacios en blanco
mv "$2" `echo $2 | tr ' ' '_'`

pandoc -t org `echo $2 | tr ' ' '_'` --columns 1000000000 | sed -E "/^[[:space:]]+:/ d" >> $DRAFT_ORG

sed -i s'|#+BEGIN_EXAMPLE|#+BEGIN_SRC sh|'g $DRAFT_ORG
sed -i s'|#+END_EXAMPLE|#+END_SRC|'g $DRAFT_ORG

$EMACS $DRAFT_ORG --eval "(goto-char (point-max))"


exit
fi




if [ $1 = "-n" ]
then
    clear



    
#  echo "-------------------"
#  echo "Crear Nueva Entrada"
#  echo "-------------------"
#  echo " "
#  echo "Introduce el Título del Post"
#  read DRAFT_POST
#  echo " "
#  echo "Introduce la Categoria"
#  read DRAFT_CAT
#  echo " "
#  echo "Introduce la Etiquetas"
#  read DRAFT_TAGS
#  echo " "
#  echo "Introduce el Nombre de la Imagen"
#  read DRAFT_IMAGE
#  echo " "
#  echo "Introduce la URL de la Imagen, si la tienes"
#  read URL_IMAGE
#  wget -O $PATH_BLOG"images-blog"/$DRAFT_IMAGE  $URL_IMAGE
    #


DRAFT_POST=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Título del artículo" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
			     echo "Nuevo Artículo"
			     echo "--------------"
			    
                             echo " Título:    $DRAFT_POST"
                         else
			     clear
			     echo " Artículo cancelado"
                             exit
			     
                         fi
DRAFT_CAT=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Categoria" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Categoría: $DRAFT_CAT"
                         else
			     clear
    			     echo " Artículo cancelado"
                        	exit
                         fi
DRAFT_TAGS=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Tags" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Etiquetas: $DRAFT_TAGS"
                         else
			     clear
			     echo " Artículo cancelado"
                         	exit
                         fi
DRAFT_IMAGE=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "Nombre de la imagen. Ejemplo: imagen.png" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                                echo " Imagen:    $DRAFT_IMAGE"
                         else
			       clear
                         	exit
                         fi
URL_IMAGE=$(whiptail --title "Org-Bash-Blog" \
			 --inputbox "url de la imagen. Si la importas de un servidor" 7 40 \
			 3>&1 1>&2 2>&3)
                         status=$?
                         if [ $status = 0 ]
                         then
                        	wget -O $PATH_BLOG"images-blog"/$DRAFT_IMAGE  $URL_IMAGE 2>/dev/null
                         else
			     clear
			     echo " Artículo cancelado"
                        	exit
                         fi
#URL_IMAGE=$(whiptail --title "org-bash-blog" \                                                                         14:04:22
#			 --yesno "¿Quiere continuar?" 7 40)
	 
# if (whiptail --title "EJEMPLO SI/NO" --yesno "Este es un ejemplo de un cuadro de dialogo de si/no" 8 78) then
#   echo "Has seleccionado Si, exit toma el valor de $?."
#   else
#   echo "Has seleccionado No, exit toma el valor de $?."
#   fi
			 




			 
DIA=$(date +"%Y-%m-%d %H:%M")

echo '* TODO '$DRAFT_POST'
:PROPERTIES:
:TITLE: '$DRAFT_POST'
:EXPORT_FILE_NAME: '$(echo $DRAFT_POST | sed 'y/:,.;áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇ/----aAaAaAaAeEeEiIoOoOoOuUnNcC/' | sed 's| |-|g' | sed 's|--|-|g' | tr '[:upper:]' '[:lower:]' | cut -d " " -f1,2,3,4,5,6,7,8,9,10)'
:DESCRIPTION:
:EXPORT_DATE: '$DIA'
:CATEGORY: '$DRAFT_CAT'
:TAG: '$DRAFT_TAGS'
:IMAGE: ./images-blog/'$DRAFT_IMAGE'
:END:

#+HTML: <center>
[[./images-blog/'$DRAFT_IMAGE']]
#+HTML: </center>

' >> $DRAFT_ORG


$EMACS $DRAFT_ORG --eval "(goto-char (point-max))"

exit
fi

if [ $1 = "-f" ]
then
echo "
#+TITLE:
#+LINK:
#+DESCRIPTION:
#+KEYWORDS:
#+AUTHOR:

 " > $2
exit
fi

# Si es un archivo, comienza a ejecutar el script    
if [ -f "$1" ]
then

TITLE=$(grep "#+TITLE:" $1 | cut -d " " -f2-)
LINK=$(grep "#+LINK:" $1 | cut -d " " -f2-)
DESCRIPTION=$(grep "#+DESCRIPTION:" $1 | cut -d " " -f2-)
AUTHOR=$(grep "#+AUTHOR:" $1 | cut -d " " -f2-)
grep ":TITLE:" $1 | cut -d " " -f2- | sed 's/,/|/g' | sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' > title
grep ":EXPORT_FILE_NAME:" $1 | cut -d " " -f2- | awk '{print tolower($0)}' | sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' | sed 's/ /-/g' > link
grep ":DESCRIPTION:" $1 | cut -d " " -f2- | sed 's/,/|/g'> description 
grep ":EXPORT_DATE:"  $1 | cut -d " " -f2 | sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' > date-
grep ":EXPORT_DATE:"  $1 | cut -d " " -f3 | sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' > hour
grep ":CATEGORY:"  $1 | cut -d " " -f2- | sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' > category
grep ":TAG:" $1 | cut -d " " -f2- | tr -d ' ' | sed "s|$|,,,,,,,,,|" | cut -d, -f -10 > tag
grep ":IMAGE:" $1 | cut -d " " -f2- | tr -d ' ' > image
cat date- |  tr -d '-' > date
paste -d, date title link description date- category tag hour image > postsID.csv
cat postsID.csv | sort -t "," -k1,1r -k17,17r | cut -d, -f2- > posts.csv
cat postsID.csv | sort | cut -d, -f2- > posts4feed.csv
cat posts.csv | cut -d "," -f5 | sed '/^ *$/d' | uniq | sort > category.csv
cat tag | cut -d "," -f1 > tags.csv
cat tag | cut -d "," -f2 >> tags.csv 
cat tag | cut -d "," -f3 >> tags.csv
cat tag | cut -d "," -f4 >> tags.csv
cat tag | cut -d "," -f5 >> tags.csv
cat tag | cut -d "," -f6 >> tags.csv
cat tag | cut -d "," -f7 >> tags.csv
cat tag | cut -d "," -f8 >> tags.csv
cat tag | cut -d "," -f9 >> tags.csv
cat tag | cut -d "," -f10 >> tags.csv
cat tags.csv | sed '/^ *$/d' | sort | uniq > tag.csv
echo " " >> $1
NUM_POSTS=$(cat posts.csv |  wc -l)
TODO=$(grep -irq "^* TODO" $1)
if [ $? -eq 0 ]; then
clear
echo ">>> org-bash-blog va a publicar el Post <<<"
grep -n "^* TODO" $1 |  cut -d ":" -f1 > TODO.txt
LINES_BLOG=$(cat $1  | wc -l)
cat $1  | wc -l >> TODO.txt
echo "Hay $NUM_POSTS Artículos y $LINES_BLOG líneas en $1"
echo "Se va a publicar $(grep -n "^* TODO" $1 | wc -l) Artículos"
rm org/*.org
ONE_LINE=$(cat TODO.txt | head -1)
sed -i '1d' TODO.txt
while read TWO_LINE; do
LAST_LINE=$(($TWO_LINE - 1))
CATEGORY=$(cat $1 | sed -n  "$ONE_LINE,$LAST_LINE"p | sed 's/* TODO/*/g' | grep ":CATEGORY:"  | cut -d " " -f2)
cat $1 | sed -n  "$ONE_LINE,$LAST_LINE"p | sed 's/* TODO/*/g' >> org/$CATEGORY.org
cat $1 | sed -n  "$ONE_LINE,$LAST_LINE"p | sed 's/* TODO/*/g' > temp_post.org
ONE_LINE=$(echo $TWO_LINE)
PUB=$(expr $PUB + 1)
echo "Publicando Artículo Nº $PUB     $(grep ":TITLE:" temp_post.org | cut -d " " -f2-)"
FILE_DATE=$(grep ":EXPORT_DATE:" temp_post.org | cut -d " " -f2)
DATE_MOD=$(grep ":EXPORT_DATE:" temp_post.org | cut -d " " -f4)
if [ -n "$DATE_MOD" ];
then
    echo "               ***** Artículo Modificado *****"
    UPDATE=$(echo " y *actualizado* el $(date -d"$DATE_MOD" +'%A %d %B del %Y')")
fi
echo "#+HTML: <br>" >> temp_post.org
echo "Publicado por $AUTHOR el $(date -d"$FILE_DATE" +'%A %d %B del %Y') $UPDATE" >> temp_post.org
UPDATE=$(echo " ")
echo "#+HTML: <br><br> " >> temp_post.org



echo "También te puede interesar:
 "  >> temp_post.org
CATEGORY=$(grep ":CATEGORY:" temp_post.org | cut -d " " -f2)
grep -i $CATEGORY posts.csv | sed '1d' > category_temp_post.csv
cat category_temp_post.csv | head -n10 > cat_temp.csv
cp cat_temp.csv category_temp_post.csv
while read LINEA; do  
OTHERSTITLE=$(echo $LINEA | cut -d, -f1 | sed 's/|/,/g')
OTHERSLINKS=$(echo $LINEA | cut -d, -f2)
OTHERSDATE=$(echo  $LINEA | cut -d, -f4)
echo "- [[$LINK/post/$OTHERSDATE-$OTHERSLINKS.html][$OTHERSTITLE]]" >> temp_post.org
done < category_temp_post.csv
FILE_TITLE=$(grep ":TITLE:" temp_post.org | cut -d " " -f2- | sed 's/|/,/g')
# ANCHOR
FILE_NAME=$(grep ":EXPORT_FILE_NAME:" temp_post.org | cut -d " " -f2- |awk '{print tolower($0)}' | sed 's/[ \t]*$//' |  sed 's/ /-/g')
FILE_DATE=$(grep ":EXPORT_DATE:" temp_post.org | cut -d " " -f2)
FILE_IMAGE=$(grep ":IMAGE:" temp_post.org  | cut -d " " -f2- | sed 's|./images-blog/||g' | sed 's/ //g' )
FILE=$(echo "$FILE_DATE-$FILE_NAME")
FILE_DESCRIPTION=$(grep ":DESCRIPTION:" temp_post.org | cut -d " " -f2-)
DESCRIPTION_P=$(echo $FILE_DESCRIPTION | sed 's/|/,/g')
sed -i "1i #+DESCRIPTION: $DESCRIPTION_P" temp_post.org
FILE_TAG=$(grep ":TAG:" temp_post.org | cut -d " " -f2-)
TAG=$(echo $FILE_TAG | sed 's/|/,/g')
sed -i "1i #+KEYWORDS: $TAG" temp_post.org
echo "#+TITLE: $FILE_TITLE" > $FILE.org
cat temp_post.org >> $FILE.org
echo '<head>
<title>'$FILE_TITLE'. '$TITLE'</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<div id="logo"><a href="https://ugeek.github.io"><img src="../icon/ugeek.png" border="0"  width="90" height="90" alt="uGeek"></a></div>
<link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
<link rel="alternate" type="application/rss+xml" href="'$LINK'/feed.xml" title="uGeek - Blog de Tecnología">

<link rel="shortcut icon" href="'$LINK$ICON'" type="image/x-icon" />
<link rel="icon" href="'$LINK$ICON'" sizes="32x32" />
<link rel="icon" href="'$LINK$ICON'" sizes="192x192" />
<link rel="apple-touch-icon-precomposed" href="'$LINK$ICON'" />
<meta property="og:locale" content="'$LANGUAGE'" />



<meta name="robots" content="index, follow">
<meta name="twitter:site" content="'$TWITTER'" />
<meta name="twitter:card" content="summary_large_image" />
<link rel="alternate" type="application/rss+xml" title="uGeek. Blog de Tecnología" href="'$LINK'/feed/" />


<meta name="author" content="'$AUTHOR'">
<meta name="description" content="'$FILE_DESCRIPTION'" />


<meta property="og:site_name" content="'$TITLE'"/>
<meta property="og:type" content="article" /> 
<meta property="og:title" content="'$FILE_TITLE'" />
<meta property="og:description" content="'$FILE_DESCRIPTION'" />
<meta property="og:image" content="'$LINK'/images-blog/'$FILE_IMAGE'" />
<meta property="og:url" content="'$LINK'/post/'$FILE'.html" />

<meta name="twitter:title" content="'$FILE_TITLE'" />
<meta name="twitter:description" content="'$FILE_DESCRIPTION'" />
<meta name="twitter:image" content="'$LINK'/images-blog/'$FILE_IMAGE'" />


<link rel="stylesheet" type="text/css" href="css/stylesheet.css" /><link rel="alternate" type="application/rss+xml" href="https://ugeek.github.io/feed.xml" title="uGeek - Blog de Tecnología">

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id='$GOOGLE_ANALITYCS'"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag("'js'", new Date())
gtag("'config'", "'$GOOGLE_ANALITYCS'");
</script>


<link type="text/css" rel="stylesheet" href="../css/search.css"></link>
<link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
<script type="text/javascript" src="../js/jquery.min.js"></script>
<script type="text/javascript" src="../js/tipuesearch_set.js"></script>
<script type="text/javascript" src="../content.js"></script>
<script type="text/javascript" src="../js/tipuesearch.min.js"></script>


</head>

<br><br><br><br><br><br><br><br><br>

'$HEAD_PAGE_POST'


<!-- THIS IS THE SEARCH BOX -->


<input type="text" name="q" placeholder="buscar..."  id="tipue_search_input"  required>
<!-- <input type="text" name="q" id="tipue_search_input" autocomplete="off" required> -->

<!-- THIS IS WHERE YOU DISPLAY THE SEARCH RESULTS -->
<div align="center" id="tipue_search_content"></div>
<!-- THIS JAVASCRIPT CODE DISPLAY THE SEARCH RESULTS -->
<script>

$(document).ready(function() {
$("#tipue_search_input").tipuesearch();
});

</script>

<!-- END BOX -->



' >   $FILE.html
# anchor




NUM_WORDS=$(cat $FILE.org | tail -n +11 |  sed '/^ *$/d' | sed 's|^#.*||g' | sed 's|^\[.*||g' | sed 's|^** ||g' | sed '/^$/d' | wc -w)
MIN=$(echo ""$NUM_WORDS"/110" | bc)
sed -i 's|:END:|:END:\n\n#+HTML: <h5>Tiempo estimado de lectura: '$MIN' minutos. '$NUM_WORDS' palabras.    <a href="https://ugeek.github.io/blog/categories/'$CATEGORY'">'$CATEGORY'</a></h5>\n \n|g' $FILE.org


PUBLISH_DATE=$(date -d "$FILE_DATE" +'%Y%m%d')
TODAY_DATE=$(date --date='+3 year' +"%Y%m%d")

if [ "$PUBLISH_DATE" -ge "$TODAY_DATE" ] ; then   
echo "#+HTML:<br><style>p.antiguo { font-family: "Arial" ; color: #FFFFFF ; background-color: #5e1cb3 }</style><center><p class="antiguo">Este artículo se publicó hace más de 3 años. Puede tener contenido desactualizado.</p></center>" >> $FILE.org
else
echo " " > /dev/null 2>&1
fi


# anchor
# mas de un año


cat $FILE.org | pandoc --from org --to html5 >> $FILE.html
sed -i 's|<sub>|_|g' $FILE.html
sed -i 's|</sub>||g' $FILE.html
ORG=$(echo '<br><br><br><p style="text-align: center;">Powered by <a href="https://github.com/ugeek/org-bash-blog" target="_blank" rel="noopener">org-bash-blog</a></p><p style="text-align: center;">Writing in orgmode whith emacs</p>')
echo $ORG $PIE_WEB  >> $FILE.html
rm $FILE.org
sed -i 's|src="./images-blog/|src="../images-blog/|g' $FILE.html
sed -i 's|__icon/|../icon/|g' $FILE.html
sed -i 's|href="__css/|href="..css/|g' $FILE.html
sed -i 's|href="index.html"|href="../index.html"|g' $FILE.html
sed -i 's|href="list.html"|./href="../list.html"|g' $FILE.html
sed -i 's|href="tag.html"|./href="../tag.html"|g' $FILE.html
mv $FILE.html post/$FILE.html
done < TODO.txt
rm TODO.txt
echo '<html>
<html lang="es"><head><meta charset="utf-8"><meta name="robots" content="noindex">
<title>org-bash-blog. Index</title>
<link rel="stylesheet" type="text/css" href="./css/stylesheet.css" />
</head>
<body>
<h1>Org-bash-blog v 5.0</h1>
<h3>Indice de todas las páginas creadas en tu repositorio</h3>
<h5>'$(find . -type f | grep .html | wc -l)' archivos .html</h5>
<h5>' > org-bash-blog.html
find . -type f | grep .html | sed -r 's/(.*)/\<a href="\1" target="_blank" rel="noopener">\1\<\/a\><br>/' | sort -r >> org-bash-blog.html
$BROWSER org-bash-blog.html 
$BROWSER "post/$FILE.html" 
clear
echo "Generando Feed"
TODAY=$(date +'%A %d de %B del %Y')
echo '<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>'$TITLE'</title>
    <link>'$LINK'</link>
    <description>'$DESCRIPTION'</description>
    <image>
       <url>'$LOGO_FEED'</url>
       <title>'$TITLE'</title>
       <link>'$LINK'</link>
    </image>
    <language>'$LANGUAGE_RSS'</language>
    <atom:link href="'$LINK'/feed.xml" rel="self" type="application/rss+xml" />
    <generator>org-bash-blog static site generator (https://github.com/ugeek/org-bash-blog)</generator>'> feed.xml
while read LINEA; do 
TITLE_F="$(echo $LINEA | cut -d, -f1 | sed 's/|/,/g')"
LINK_P="$(echo $LINEA | cut -d, -f2)"
DESC="$(echo $LINEA | cut -d, -f3 | sed 's/|/,/g')"
CATEGORY_POST="$(echo $LINEA | cut -d, -f5)"
CATEGORY_POST1="$(echo $LINEA | cut -d, -f6)"
CATEGORY_POST2="$(echo $LINEA | cut -d, -f7)"
CATEGORY_POST3="$(echo $LINEA | cut -d, -f8)"
IMAGE_POST="$(echo $LINEA | cut -d, -f17 | sed "s|^./|$LINK/|")"
DATE="$(echo $LINEA | cut -d, -f4)"
HORA="$(echo $LINEA | cut -d, -f16)"
DATEPU="$(LANG=en_us_88591 ; date -d"$DATE" +'%a, %d %b %Y')"
DATEPUB=$(echo "$DATEPU $HORA +0100")
LANG=locale
GUID="http://ugeek.github.io"
echo "   <item>" >> feed.xml
echo "    <title>$TITLE_F</title>" >> feed.xml
echo "    <link>$LINK/post/$DATE-$LINK_P.html</link>" >> feed.xml
echo "    <description>" >> feed.xml
echo '&lt;img src="'$IMAGE_POST'" alt="'$TITLE_F'"&gt;'   >> feed.xml
echo "&lt;br&gt;&lt;p&gt;$DESC... 
&lt;p&gt;Sigue leyendo el post completo de &lt;a href="$LINK/post/$DATE-$LINK_P.html"&gt;$TITLE_F&lt;/a&gt;

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="$LINK"&gt;Visita $TITLE&lt;/a&gt;

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="https://ugeek.github.io"&gt;Visita uGeek Podcast&lt;/a&gt;


&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="http://feeds.feedburner.com/ugeekblog"&gt;Suscribete al Blog de uGeek&lt;/a&gt;

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="http://feeds.feedburner.com/ugeek"&gt;Suscribete al Podcast de uGeek&lt;/a&gt;

</description>" >> feed.xml
echo "    <pubDate>$DATEPUB</pubDate>" >> feed.xml
echo '    <category>'$CATEGORY_POST'</category>'  >> feed.xml
echo '    <category>'$CATEGORY_POST1'</category>'  >> feed.xml
echo '    <category>'$CATEGORY_POST2'</category>'  >> feed.xml
echo '    <category>'$CATEGORY_POST3'</category>'  >> feed.xml
echo "    <guid>$LINK/post/$DATE-$LINK_P.html</guid>
   </item>" >> feed.xml
done < posts.csv
echo "  </channel>
</rss>" >> feed.xml
echo "Generando Feed por Categoría"
WORD="emacs"
awk '/,emacs,/ { print }' posts.csv > emacs.csv
echo '<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>'$TITLE'</title>
    <link>'$LINK'</link>
    <description>'$DESCRIPTION'</description>
    <image>
       <url>'$LOGO_FEED'</url>
       <title>'$TITLE'</title>
       <link>'$LINK'</link>
    </image>
    <language>'$LANGUAGE_RSS'</language>
    <atom:link href="'$LINK'/feed.xml" rel="self" type="application/rss+xml" />
    <generator>org-bash-blog static site generator (https://github.com/ugeek/org-bash-blog)</generator>'> $WORD.xml
while read LINEA; do 
TITLE_F="$(echo $LINEA | cut -d, -f1 | sed 's/|/,/g')"
LINK_P="$(echo $LINEA | cut -d, -f2)"
DESC="$(echo $LINEA | cut -d, -f3 | sed 's/|/,/g')"
CATEGORY_POST="$(echo $LINEA | cut -d, -f5)"
CATEGORY_POST1="$(echo $LINEA | cut -d, -f6)"
CATEGORY_POST2="$(echo $LINEA | cut -d, -f7)"
CATEGORY_POST3="$(echo $LINEA | cut -d, -f8)"
IMAGE_POST="$(echo $LINEA | cut -d, -f17 | sed "s|^./|$LINK/|")"
DATE="$(echo $LINEA | cut -d, -f4)"
HORA="$(echo $LINEA | cut -d, -f16)"
DATEPU="$(LANG=en_us_88591 ; date -d"$DATE" +'%a, %d %b %Y')"
DATEPUB=$(echo "$DATEPU $HORA +0100")
LANG=locale
GUID="http://ugeek.github.io"
echo "   <item>" >> $WORD.xml
echo "    <title>$TITLE_F</title>" >> $WORD.xml
echo "    <link>$LINK/post/$DATE-$LINK_P.html</link>" >> $WORD.xml
echo "    <description>" >> $WORD.xml
echo '&lt;img src="'$IMAGE_POST'" alt="'$TITLE_F'"&gt;'   >> $WORD.xml
echo "&lt;br&gt;&lt;p&gt;$DESC... 
&lt;p&gt;Sigue leyendo el post completo de &lt;a href="$LINK/post/$DATE-$LINK_P.html"&gt;$TITLE_F&lt;/a&gt;

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="$LINK"&gt;Visita $TITLE&lt;/a&gt;

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="https://ugeek.github.io"&gt;Visita uGeek Podcast&lt;/a&gt;


&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="http://feeds.feedburner.com/ugeekblog"&gt;Suscribete al Blog de uGeek&lt;/a&gt;

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;

&lt;a href="http://feeds.feedburner.com/ugeek"&gt;Suscribete al Podcast de uGeek&lt;/a&gt;

</description>" >> $WORD.xml
echo "    <pubDate>$DATEPUB</pubDate>" >> $WORD.xml
echo '    <category>'$CATEGORY_POST'</category>'  >> $WORD.xml
echo '    <category>'$CATEGORY_POST1'</category>'  >> $WORD.xml
echo '    <category>'$CATEGORY_POST2'</category>'  >> $WORD.xml
echo '    <category>'$CATEGORY_POST3'</category>'  >> $WORD.xml
echo "    <guid>$LINK/post/$DATE-$LINK_P.html</guid>
   </item>" >> $WORD.xml
done < emacs.csv
echo "  </channel>
</rss>" >> $WORD.xml
echo "Generando Página Home"
cat posts.csv | head -n5 > posts_home.csv
echo " " >> index.org
echo "$INDEX" >> index.org
echo " " >> index.org
echo "*** Últimos Artículos" >> index.org
echo " " >> index.org
while read LINEA; do 
TPOST=$(echo $LINEA | cut -d, -f1 | sed 's/|/,/g')
UPOST=$(echo $LINEA | cut -d, -f2)
DPOST=$(echo $LINEA | cut -d, -f4)
#echo "- /$DPOST/ - [[$LINK/post/$DPOST-$UPOST.html][$TPOST]] " >> index.org
echo "- [[$LINK/post/$DPOST-$UPOST.html][$TPOST]] " >> index.org
done < posts_home.csv
echo "$INDEX_NEXT" >> index.org
echo '<head>
<title>'$TITLE'</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<div id="logo"><a href="https://ugeek.github.io"><img src="./icon/ugeek.png" border="0"  width="90" height="90" alt="uGeek"></a></div>
<link rel="stylesheet" type="text/css" href="./css/stylesheet.css" /><link rel="alternate" type="application/rss+xml" href="https://ugeek.github.io/feed.xml" title="uGeek - Blog de Tecnología">

<meta name="twitter:site" content="'$TWITTER'" />
<meta name="twitter:card" content="summary_large_image" />
<link rel="alternate" type="application/rss+xml" title="uGeek. Blog de Tecnología" href="'$LINK'/feed/" />


<meta name="robots" content="index, follow">
<meta name="author" content="'$AUTHOR'">
<meta name="description" content="'$DESCRIPTION'" />

<link rel="shortcut icon" href="'$LINK$ICON'" type="image/x-icon" />
<link rel="icon" href="'$LINK$ICON'" sizes="32x32" />
<link rel="icon" href="'$LINK$ICON'" sizes="192x192" />
<link rel="apple-touch-icon-precomposed" href="'$LINK$ICON'" />
<meta property="og:locale" content="'$LANGUAGE'" />


<meta property="og:site_name" content="'$TITLE'"/> 
<meta property="og:title" content="'$TITLE'" />
<meta property="og:description" content="'$DESCRIPTION'" />
<meta property="og:image" content="'$IMAGE'" />
<meta property="og:url" content="'$LINK'index.html" />

<meta name="twitter:title" content="'$TITLE'" />
<meta name="twitter:description" content="'$DESCRIPTION'" />
<meta name="twitter:image" content="'$IMAGE'" />

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id='$GOOGLE_ANALITYCS'"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag("'js'", new Date())
gtag("'config'", "'$GOOGLE_ANALITYCS'");
</script>


<link type="text/css" rel="stylesheet" href="css/search.css"></link>
<link rel="stylesheet" type="text/css" href="./css/stylesheet.css" />
<script type="text/javascript" src="js/jquery.min.js"></script>
<script type="text/javascript" src="js/tipuesearch_set.js"></script>
<script type="text/javascript" src="content.js"></script>
<script type="text/javascript" src="js/tipuesearch.min.js"></script>


</head>

<br><br><br><br><br><br><br><br><br>
'$HEAD_PAGE'


<!-- THIS IS THE SEARCH BOX -->


<input type="text" name="q" placeholder="buscar..."  id="tipue_search_input"  required>
<!-- <input type="text" name="q" id="tipue_search_input" autocomplete="off" required> -->

<!-- THIS IS WHERE YOU DISPLAY THE SEARCH RESULTS -->
<div align="center" id="tipue_search_content"></div>
<!-- THIS JAVASCRIPT CODE DISPLAY THE SEARCH RESULTS -->
<script>

$(document).ready(function() {
 $("#tipue_search_input").tipuesearch();
});

</script>

<!-- END BOX -->



'> index.html

#############################

echo "Categorías" > $PATH_BLOG/categories.org 
ls -1 $PATH_BLOG/categories/ | cut -d"." -f1 | while read linea
do
    echo "- [["$LINK"/categories/"$linea".html]["$linea"]]"
done >> $PATH_BLOG/categories.org

#echo ${$(cat $PATH_BLOG/catego.org):1} > $PATH_BLOG/categories.org
#rm $PATH_BLOG/catego.org

###########################
cat index.org | pandoc --from org --to html5 >> index.html
echo $ORG $PIE_WEB  >> index.html
sed -i 's|__icon/|icon/|g' index.html
sed -i 's|__css/|css/|g' index.html
sed -i 's|<sub>|_|g' index.html
sed -i 's|</sub>||g' index.html
 
rm index.org posts_home.csv
echo "Generando Lista de Artículos"
echo "* $NUM_POSTS Artículos Publicados" >> list.org

while read LINEA; do 
TPOST=$(echo $LINEA | cut -d, -f1 | sed 's/|/,/g')
UPOST=$(echo $LINEA | cut -d, -f2)
DPOST=$(echo $LINEA | cut -d, -f4)
echo "- /$DPOST/ - [[$LINK/post/$DPOST-$UPOST.html][$TPOST]] " >> list.org
done < posts.csv 
echo '<head>
<title>Artículos. '$TITLE'</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<div id="logo"><a href="https://ugeek.github.io"><img src="./icon/ugeek.png" border="0"  width="90" height="90" alt="uGeek"></a></div>
<link rel="stylesheet" type="text/css" href="./css/stylesheet.css" /><link rel="alternate" type="application/rss+xml" href="https://ugeek.github.io/feed.xml" title="uGeek - Blog de Tecnología">


<meta name="twitter:site" content="'$TWITTER'" />
<meta name="twitter:card" content="summary_large_image" />
<link rel="alternate" type="application/rss+xml" title="uGeek. Blog de Tecnología" href="'$LINK'/feed/" />

<meta name="robots" content="index, follow">
<meta name="author" content="'$AUTHOR'">
<meta name="description" content="'$DESCRIPTION'" />

<link rel="shortcut icon" href="'$LINK$ICON'" type="image/x-icon" />
<link rel="icon" href="'$LINK$ICON'" sizes="32x32" />
<link rel="icon" href="'$LINK$ICON'" sizes="192x192" />
<link rel="apple-touch-icon-precomposed" href="'$LINK$ICON'" />
<meta property="og:locale" content="'$LANGUAGE'" />


<meta property="og:site_name" content="'$TITLE'"/> 
<meta property="og:title" content="'$TITLE'" />
<meta property="og:description" content="'$DESCRIPTION'" />
<meta property="og:image" content="'$IMAGE'" />
<meta property="og:url" content="'$LINK'index.html" />

<meta name="twitter:title" content="'$TITLE'" />
<meta name="twitter:description" content="'$DESCRIPTION'" />
<meta name="twitter:image" content="'$IMAGE'" />

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id='$GOOGLE_ANALITYCS'"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag("'js'", new Date())
gtag("'config'", "'$GOOGLE_ANALITYCS'");
</script>


<link type="text/css" rel="stylesheet" href="css/search.css"></link>
<link rel="stylesheet" type="text/css" href="./css/stylesheet.css" />
<script type="text/javascript" src="js/jquery.min.js"></script>
<script type="text/javascript" src="js/tipuesearch_set.js"></script>
<script type="text/javascript" src="content.js"></script>
<script type="text/javascript" src="js/tipuesearch.min.js"></script>



</head>

<br><br><br><br><br><br><br><br><br>

'$HEAD_PAGE'

<!-- THIS IS THE SEARCH BOX -->


<input type="text" name="q" placeholder="buscar..."  id="tipue_search_input"  required>
<!-- <input type="text" name="q" id="tipue_search_input" autocomplete="off" required> -->

<!-- THIS IS WHERE YOU DISPLAY THE SEARCH RESULTS -->
<div align="center" id="tipue_search_content"></div>
<!-- THIS JAVASCRIPT CODE DISPLAY THE SEARCH RESULTS -->
<script>

$(document).ready(function() {
 $("#tipue_search_input").tipuesearch();
});

</script>

<!-- END BOX -->


' > list.html










cat list.org | pandoc --from org --to html5 >> list.html
echo $ORG $PIE_WEB  >> list.html
sed -i 's|__icon/|icon/|g' list.html
sed -i 's|__css/|css/|g' list.html
sed -i 's|<sub>|_|g' list.html
sed -i 's|</sub>||g' list.html

rm list.org
echo "Generando Clasificación por Tags"
echo "** Etiquetas" >> tag.org
echo " " >> tag.org
while read TAG; do 
grep -i "$TAG" posts.csv > temp_tag.csv
# anchor BUENO |-> echo "*** $TAG" >> tag.org
echo "#+HTML: <H3><a name="""\#$TAG""">$TAG</a></H3>" >> tag.org

NUM_TAGS=$(cat tag.csv | wc -l)
while read LINEA; do 
TPOST=$(echo $LINEA | cut -d, -f1 | sed 's/|/,/g' )
UPOST=$(echo $LINEA | cut -d, -f2)
DPOST=$(echo $LINEA | cut -d, -f4)
echo "- /$DPOST/ - [[$LINK/post/$DPOST-$UPOST.html][$TPOST]] " >> tag.org
done < temp_tag.csv
done < tag.csv 
rm temp_tag.csv
echo '<head>
<title>Etiquetas. '$TITLE'</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<div id="logo"><a href="https://ugeek.github.io"><img src="./icon/ugeek.png" border="0"  width="90" height="90" alt="uGeek"></a></div>
<link rel="stylesheet" type="text/css" href="./css/stylesheet.css" /><link rel="alternate" type="application/rss+xml" href="https://ugeek.github.io/feed.xml" title="uGeek - Blog de Tecnología">

<meta name="twitter:site" content="'$TWITTER'" />
<meta name="twitter:card" content="summary_large_image" />
<link rel="alternate" type="application/rss+xml" title="uGeek. Blog de Tecnología" href="'$LINK'/feed/" />


<meta name="robots" content="index, follow">
<meta name="author" content="'$AUTHOR'">
<meta name="description" content="'$DESCRIPTION'" />
 

<link rel="shortcut icon" href="'$LINK$ICON'" type="image/x-icon" />
<link rel="icon" href="'$LINK$ICON'" sizes="32x32" />
<link rel="icon" href="'$LINK$ICON'" sizes="192x192" />
<link rel="apple-touch-icon-precomposed" href="'$LINK$ICON'" />
<meta property="og:locale" content="'$LANGUAGE'" />


<meta property="og:site_name" content="'$TITLE'"/>
<meta property="og:title" content="'$TITLE'" />
<meta property="og:description" content="'$DESCRIPTION'" />
<meta property="og:image" content="'$IMAGE'" />
<meta property="og:url" content="'$LINK'index.html" />

<meta name="twitter:title" content="'$TITLE'" />
<meta name="twitter:description" content="'$DESCRIPTION'" />
<meta name="twitter:image" content="'$IMAGE'" />

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id='$GOOGLE_ANALITYCS'"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag("'js'", new Date())
gtag("'config'", "'$GOOGLE_ANALITYCS'");
</script>


</head>

<br><br><br><br><br><br><br><br><br>

'$HEAD_PAGE'
' > tag.html
cat tag.org | pandoc --from org --to html5 >> tag.html
echo $ORG $PIE_WEB  >> tag.html
sed -i 's|__icon/|icon/|g' tag.html
sed -i 's|__css/|css/|g' tag.html
sed -i 's|<sub>|_|g' tag.html
sed -i 's|</sub>||g' tag.html

rm tag.org category_temp_post.csv cat_temp.csv
####################################################################################################

echo "Generando Buscador"

echo "var tipuesearch = {"pages": [" > content.js


while read LINEA
do

    TITLE_CONTENT=$(echo $LINEA | cut -d, -f1 | sed 's|\||,|g' | sed "s|'|,|g") 
    TEXT_CONTENT=$(echo $LINEA | cut -d, -f3 | sed 's|\||,|g' | sed "s|'|,|g")
    TAGS_CONTENT=$(echo $LINEA | cut -d, -f5-10)

    DATE_CONTENT=$(echo $LINEA | cut -d, -f4)
    NAME_CONTENT=$(echo $LINEA | cut -d, -f2)

    URL_CONTENT=$(echo "$DATE_CONTENT-$NAME_CONTENT.html")



    echo "{"  >> content.js
    echo "            '"title"': '"$TITLE_CONTENT"',"  >> content.js
    echo "            '"text"': '"$TEXT_CONTENT"', "  >> content.js
    echo "            '"tags"': '"$TAGS_CONTENT"', "  >> content.js
    echo "            '"url"': '"$LINK/post/$URL_CONTENT"' "  >> content.js
    echo "}," >> content.js

done < posts.csv


echo "]};" >> content.js


####################################################################################################
echo "Generando Páginas de Categorias"
ls -1 org | cut -d"." -f1 > cat


while read CAT; do 
echo '<head>
<title>'$CAT'</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<div id="logo"><a href="https://ugeek.github.io"><img src="../icon/ugeek.png" border="0"  width="90" height="90" alt="uGeek"></a></div>
<link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
<link rel="alternate" type="application/rss+xml" href="'$LINK'/feed.xml" title="uGeek - Blog de Tecnología">

<link rel="shortcut icon" href="'$LINK$ICON'" type="image/x-icon" />
<link rel="icon" href="'$LINK$ICON'" sizes="32x32" />
<link rel="icon" href="'$LINK$ICON'" sizes="192x192" />
<link rel="apple-touch-icon-precomposed" href="'$LINK$ICON'" />
<meta property="og:locale" content="'$LANGUAGE'" />



<meta name="robots" content="index, follow">
<meta name="twitter:site" content="'$TWITTER'" />
<meta name="twitter:card" content="summary_large_image" />
<link rel="alternate" type="application/rss+xml" title="uGeek. Blog de Tecnología" href="'$LINK'/feed/" />


<meta name="author" content="'$AUTHOR'">
<meta name="description" content="'$FILE_DESCRIPTION'" />


<meta property="og:site_name" content="'$TITLE'"/>
<meta property="og:type" content="article" /> 
<meta property="og:title" content="'$FILE_TITLE'" />
<meta property="og:description" content="'$FILE_DESCRIPTION'" />
<meta property="og:image" content="'$LINK'/images-blog/'$FILE_IMAGE'" />
<meta property="og:url" content="'$LINK'/post/'$FILE'.html" />

<meta name="twitter:title" content="'$FILE_TITLE'" />
<meta name="twitter:description" content="'$FILE_DESCRIPTION'" />
<meta name="twitter:image" content="'$LINK'/images-blog/'$FILE_IMAGE'" />


<link rel="stylesheet" type="text/css" href="css/stylesheet.css" /><link rel="alternate" type="application/rss+xml" href="https://ugeek.github.io/feed.xml" title="uGeek - Blog de Tecnología">

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id='$GOOGLE_ANALITYCS'"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag("'js'", new Date())
gtag("'config'", "'$GOOGLE_ANALITYCS'");
</script>

</head>

<br><br><br><br><br><br><br><br><br>

'$HEAD_PAGE_POST'
' >   categories/$CAT.html
echo "<h2><a>$CAT</a></h2>" >> categories/$CAT.html

grep "$CAT" postsID.csv > post_cat.csv

echo "<ul>" >> categories/$CAT.html
while read LINEA; do 
    TITLE_POST=$(echo $LINEA | cut -d, -f2 | sed 's|\||,|g')
    DATE_POST=$(echo $LINEA | cut -d, -f5)
    LINK_POST=$(echo $LINEA | cut -d, -f3)
    echo  " <li><a href="$LINK/post/$DATE_POST-$LINK_POST.html">$TITLE_POST</a></li>" >> categories/$CAT.html
done < post_cat.csv
echo "</ul>" >> categories/$CAT.html
echo $ORG $PIE_WEB  >> categories/$CAT.html
done < cat
#####################################################################################################
rm *~ > /dev/null 2>&1
else
echo " "
fi

rm emacs.csv # posts.csv
rm posts4feed.csv postsID.csv 
rm tags.csv tag temp_post.org tag.csv cat post_cat.csv
rm hour image category.csv
rm title link description category date date-  
sed -i '$d' $1



#####
# Podcast Content
cp content.js content_blog.js
#####




else
echo " "
exit
fi
