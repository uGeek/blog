<!DOCTYPE html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]> <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]> <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 9]><!--><html class="no-js" lang="en"><!--<![endif]--><head>
<meta content='IE=edge' http-equiv='X-UA-Compatible'>
<meta charset='utf-8'>
<meta content='width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no' name='viewport'>
<meta content='en' name='Content-Language'>
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-57x57-b83f183ad6b00aa74d8e692126c7017e.png" sizes="57x57" />
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-60x60-6dc1c10b7145a2f1156af5b798565268.png" sizes="60x60" />
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-72x72-5037b667b6f7a8d5ba8c4ffb4a62ec2d.png" sizes="72x72" />
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-76x76-57860ca8a817754d2861e8d0ef943b23.png" sizes="76x76" />
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-114x114-27f9c42684f2a77945643b35b28df6e3.png" sizes="114x114" />
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-120x120-3819f03d1bad1584719af0212396a6fc.png" sizes="120x120" />
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-144x144-a79479b4595dc7ca2f3e6f5b962d16fd.png" sizes="144x144" />
<link rel="apple-touch-icon-precomposed" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/apple-touch-icon-152x152-aafe015ef1c22234133158a89b29daf5.png" sizes="152x152" />
<link rel="icon" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/favicon-16x16-c1207cd2f3a20fd50de0e585b4b307a3.png" sizes="16x16" />
<link rel="icon" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/favicon-32x32-e9b1d6ef3d96ed8918c54316cdea011f.png" sizes="32x32" />
<link rel="icon" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/favicon-96x96-842fcd3e7786576fc20d38bbf94837fc.png" sizes="96x96" />
<link rel="icon" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/favicon-128x128-e97066b91cc21b104c63bc7530ff819f.png" sizes="128x128" />
<link rel="icon" type="image/png" href="https://d3g6anj9jkury9.cloudfront.net/assets/favicons/favicon-196x196-b8cab44cf725c4fa0aafdbd237cdc4ed.png" sizes="196x196" />
<meta content='Leanpub' name='application-name'>
<meta content='#ffffff' name='msapplication-TileColor'>
<meta content='favicons/mstile-144x144.png' name='msapplication-TileImage'>
<meta content='favicons/mstile-150x150.png' name='msapplication-square150x150logo'>
<meta content='favicons/mstile-310x150.png' name='msapplication-wide310x150logo'>
<meta content='favicons/mstile-310x310.png' name='msapplication-square310x310logo'>
<meta content='favicons/mstile-70x70.png' name='msapplication-square70x70logo'>

<title>Read Guide to Markdown Mode for Emacs | Leanpub</title>
<link href='//fonts.googleapis.com/' rel='dns-prefetch'>
<script src='https://ajax.googleapis.com/ajax/libs/webfont/1.6.16/webfont.js'></script>
<script>
  if (typeof WebFont !== 'undefined') {
    WebFont.load({
      google: {
        families: [
          'Noto Sans:400,700,400i,700i',
          'Noto Serif:400,700,400i,700i',
        ]
      }
    });
  }
</script>

<link rel="stylesheet" media="screen" href="https://d3g6anj9jkury9.cloudfront.net/assets/font_awesome-f7d95bde64062dd89b417f07c933597d.css" />
<link rel="stylesheet" media="all" href="https://d3g6anj9jkury9.cloudfront.net/assets/application-49e497cb6ef25e434249a42d0bca9da6.css" />

<script>
  var _rollbarConfig = {
      accessToken: "3d279f41d3804636adbbba833c2c0d2d",
      captureUncaught: true,
      captureUnhandledRejections: true,
      code_version: "b33b53ed08d22ed15ac2ba618deb57a597070415",
      payload: {
        environment: "production"
      }
  };
  // Rollbar Snippet
  !function(r){function o(n){if(e[n])return e[n].exports;var t=e[n]={exports:{},id:n,loaded:!1};return r[n].call(t.exports,t,t.exports,o),t.loaded=!0,t.exports}var e={};return o.m=r,o.c=e,o.p="",o(0)}([function(r,o,e){"use strict";var n=e(1),t=e(4);_rollbarConfig=_rollbarConfig||{},_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||"https://cdnjs.cloudflare.com/ajax/libs/rollbar.js/2.5.2/rollbar.min.js",_rollbarConfig.async=void 0===_rollbarConfig.async||_rollbarConfig.async;var a=n.setupShim(window,_rollbarConfig),l=t(_rollbarConfig);window.rollbar=n.Rollbar,a.loadFull(window,document,!_rollbarConfig.async,_rollbarConfig,l)},function(r,o,e){"use strict";function n(r){return function(){try{return r.apply(this,arguments)}catch(r){try{console.error("[Rollbar]: Internal error",r)}catch(r){}}}}function t(r,o){this.options=r,this._rollbarOldOnError=null;var e=s++;this.shimId=function(){return e},"undefined"!=typeof window&&window._rollbarShims&&(window._rollbarShims[e]={handler:o,messages:[]})}function a(r,o){if(r){var e=o.globalAlias||"Rollbar";if("object"==typeof r[e])return r[e];r._rollbarShims={},r._rollbarWrappedError=null;var t=new p(o);return n(function(){o.captureUncaught&&(t._rollbarOldOnError=r.onerror,i.captureUncaughtExceptions(r,t,!0),i.wrapGlobals(r,t,!0)),o.captureUnhandledRejections&&i.captureUnhandledRejections(r,t,!0);var n=o.autoInstrument;return o.enabled!==!1&&(void 0===n||n===!0||"object"==typeof n&&n.network)&&r.addEventListener&&(r.addEventListener("load",t.captureLoad.bind(t)),r.addEventListener("DOMContentLoaded",t.captureDomContentLoaded.bind(t))),r[e]=t,t})()}}function l(r){return n(function(){var o=this,e=Array.prototype.slice.call(arguments,0),n={shim:o,method:r,args:e,ts:new Date};window._rollbarShims[this.shimId()].messages.push(n)})}var i=e(2),s=0,d=e(3),c=function(r,o){return new t(r,o)},p=function(r){return new d(c,r)};t.prototype.loadFull=function(r,o,e,t,a){var l=function(){var o;if(void 0===r._rollbarDidLoad){o=new Error("rollbar.js did not load");for(var e,n,t,l,i=0;e=r._rollbarShims[i++];)for(e=e.messages||[];n=e.shift();)for(t=n.args||[],i=0;i<t.length;++i)if(l=t[i],"function"==typeof l){l(o);break}}"function"==typeof a&&a(o)},i=!1,s=o.createElement("script"),d=o.getElementsByTagName("script")[0],c=d.parentNode;s.crossOrigin="",s.src=t.rollbarJsUrl,e||(s.async=!0),s.onload=s.onreadystatechange=n(function(){if(!(i||this.readyState&&"loaded"!==this.readyState&&"complete"!==this.readyState)){s.onload=s.onreadystatechange=null;try{c.removeChild(s)}catch(r){}i=!0,l()}}),c.insertBefore(s,d)},t.prototype.wrap=function(r,o,e){try{var n;if(n="function"==typeof o?o:function(){return o||{}},"function"!=typeof r)return r;if(r._isWrap)return r;if(!r._rollbar_wrapped&&(r._rollbar_wrapped=function(){e&&"function"==typeof e&&e.apply(this,arguments);try{return r.apply(this,arguments)}catch(e){var o=e;throw o&&("string"==typeof o&&(o=new String(o)),o._rollbarContext=n()||{},o._rollbarContext._wrappedSource=r.toString(),window._rollbarWrappedError=o),o}},r._rollbar_wrapped._isWrap=!0,r.hasOwnProperty))for(var t in r)r.hasOwnProperty(t)&&(r._rollbar_wrapped[t]=r[t]);return r._rollbar_wrapped}catch(o){return r}};for(var u="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleUnhandledRejection,captureEvent,captureDomContentLoaded,captureLoad".split(","),f=0;f<u.length;++f)t.prototype[u[f]]=l(u[f]);r.exports={setupShim:a,Rollbar:p}},function(r,o){"use strict";function e(r,o,e){if(r){var t;if("function"==typeof o._rollbarOldOnError)t=o._rollbarOldOnError;else if(r.onerror){for(t=r.onerror;t._rollbarOldOnError;)t=t._rollbarOldOnError;o._rollbarOldOnError=t}var a=function(){var e=Array.prototype.slice.call(arguments,0);n(r,o,t,e)};e&&(a._rollbarOldOnError=t),r.onerror=a}}function n(r,o,e,n){r._rollbarWrappedError&&(n[4]||(n[4]=r._rollbarWrappedError),n[5]||(n[5]=r._rollbarWrappedError._rollbarContext),r._rollbarWrappedError=null),o.handleUncaughtException.apply(o,n),e&&e.apply(r,n)}function t(r,o,e){if(r){"function"==typeof r._rollbarURH&&r._rollbarURH.belongsToShim&&r.removeEventListener("unhandledrejection",r._rollbarURH);var n=function(r){var e,n,t;try{e=r.reason}catch(r){e=void 0}try{n=r.promise}catch(r){n="[unhandledrejection] error getting `promise` from event"}try{t=r.detail,!e&&t&&(e=t.reason,n=t.promise)}catch(r){}e||(e="[unhandledrejection] error getting `reason` from event"),o&&o.handleUnhandledRejection&&o.handleUnhandledRejection(e,n)};n.belongsToShim=e,r._rollbarURH=n,r.addEventListener("unhandledrejection",n)}}function a(r,o,e){if(r){var n,t,a="EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(",");for(n=0;n<a.length;++n)t=a[n],r[t]&&r[t].prototype&&l(o,r[t].prototype,e)}}function l(r,o,e){if(o.hasOwnProperty&&o.hasOwnProperty("addEventListener")){for(var n=o.addEventListener;n._rollbarOldAdd&&n.belongsToShim;)n=n._rollbarOldAdd;var t=function(o,e,t){n.call(this,o,r.wrap(e),t)};t._rollbarOldAdd=n,t.belongsToShim=e,o.addEventListener=t;for(var a=o.removeEventListener;a._rollbarOldRemove&&a.belongsToShim;)a=a._rollbarOldRemove;var l=function(r,o,e){a.call(this,r,o&&o._rollbar_wrapped||o,e)};l._rollbarOldRemove=a,l.belongsToShim=e,o.removeEventListener=l}}r.exports={captureUncaughtExceptions:e,captureUnhandledRejections:t,wrapGlobals:a}},function(r,o){"use strict";function e(r,o){this.impl=r(o,this),this.options=o,n(e.prototype)}function n(r){for(var o=function(r){return function(){var o=Array.prototype.slice.call(arguments,0);if(this.impl[r])return this.impl[r].apply(this.impl,o)}},e="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleUnhandledRejection,_createItem,wrap,loadFull,shimId,captureEvent,captureDomContentLoaded,captureLoad".split(","),n=0;n<e.length;n++)r[e[n]]=o(e[n])}e.prototype._swapAndProcessMessages=function(r,o){this.impl=r(this.options);for(var e,n,t;e=o.shift();)n=e.method,t=e.args,this[n]&&"function"==typeof this[n]&&("captureDomContentLoaded"===n||"captureLoad"===n?this[n].apply(this,[t[0],e.ts]):this[n].apply(this,t));return this},r.exports=e},function(r,o){"use strict";r.exports=function(r){return function(o){if(!o&&!window._rollbarInitialized){r=r||{};for(var e,n,t=r.globalAlias||"Rollbar",a=window.rollbar,l=function(r){return new a(r)},i=0;e=window._rollbarShims[i++];)n||(n=e.handler),e.handler._swapAndProcessMessages(l,e.messages);window[t]=n,window._rollbarInitialized=!0}}}}]);
  // End Rollbar Snippet
</script>

<script src="https://www.google.com/recaptcha/api.js?render=6LdDCakUAAAAAEFI0Kyx_gg9t-G4r1mOWrIwFLd0"></script>
<script src="https://d3g6anj9jkury9.cloudfront.net/assets/modernizr-6f6f590d4beb241834c7bf44f1147c87.js"></script>
<script src="//www.google.com/jsapi"></script>
<script src="https://d3g6anj9jkury9.cloudfront.net/assets/chartkick-ebce4400b12dc6a0bf57810075dd89ff.js"></script>
<link rel="stylesheet" media="screen" href="https://d3g6anj9jkury9.cloudfront.net/assets/stylesheets/header-bundle-9e323f0ec4cf53cf555c.css" />
<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  
  ga('create', 'UA-911230-9', 'auto');  // Replace with your property ID.
  ga('require', 'ec');
  
  // Visitor type parameters (only settable from non cached)
  
  
  
  
  ga('send', 'pageview');
</script>

</head>
<body id='reads-show'>

<div class='flash' id='js-flash-prototype'>
<div class='flash__progress-bar'></div>
<div class='container--large'>
<div class='flash__message'></div>
<div class='flash__close-icon'>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="25px" id="Layer_1" style="enable-background:new 0 0 512 512;" version="1.1" viewBox="0 0 512 512" width="25px" xml:space="preserve"><path d="M437.5,386.6L306.9,256l130.6-130.6c14.1-14.1,14.1-36.8,0-50.9c-14.1-14.1-36.8-14.1-50.9,0L256,205.1L125.4,74.5  c-14.1-14.1-36.8-14.1-50.9,0c-14.1,14.1-14.1,36.8,0,50.9L205.1,256L74.5,386.6c-14.1,14.1-14.1,36.8,0,50.9  c14.1,14.1,36.8,14.1,50.9,0L256,306.9l130.6,130.6c14.1,14.1,36.8,14.1,50.9,0C451.5,423.4,451.5,400.6,437.5,386.6z"></path></svg>

</div>
</div>
</div>


<script type='text/javascript'>
  window.__menu_data__ = null
  window.__menuPath__ = null
  window.__hidesStoreContent__ = true
</script>

<div id='react-header-root'></div>
<script>
  window.__BASE_URL__ = "https://leanpub.com/"
</script>
<script src="https://d3g6anj9jkury9.cloudfront.net/assets/polyfill-bundle-516779ebd9176b36f796.js"></script>
<script src="https://d3g6anj9jkury9.cloudfront.net/assets/header-bundle-9e323f0ec4cf53cf555c.js"></script>

<div class='scroll-wrapper' id='scroll-wrapper'>

<div class='main ruby-main'>


<button class='toggle-sidebar btn btn--plain'>
<div class='fa fa-list-ol'></div>
</button>
<div class='container--large' id='read-online' lang='en'>
<header class='read-online-slidable'>
<div class='read-upsell'>
<a href="/markdown-mode"><img alt="Guide to Markdown Mode for Emacs" src="https://d2sofvawe08yqg.cloudfront.net/markdown-mode/s_shelf?1620558115" /></a>
<div class='upsell-text'>
<div class='book-title'>Guide to Markdown Mode for Emacs</div>
<div class='book-author'>Jason R. Blevins</div>
</div>
</div>
<a class="btn--solid" href="/markdown-mode">Buy on Leanpub</a>
<hr>
</header>
<section class='read'>
<div id="leanpub-toc">
<h2>Table of Contents</h2>
<ol class="toc">
<ul class="toc no-parts">
  <li>
    <a href="#intro"><span class="section-number">1. </span>Introduction</a>
    <ul>
      <li>
        <a href="#leanpub-auto-quick-reference"><span class="section-number">1.1 </span>Quick Reference</a>
      </li>
      <li>
        <a href="#leanpub-auto-markdown"><span class="section-number">1.2 </span>Markdown</a>
      </li>
      <li>
        <a href="#leanpub-auto-history"><span class="section-number">1.3 </span>History</a>
      </li>
      <li>
        <a href="#leanpub-auto-acknowledgments"><span class="section-number">1.4 </span>Acknowledgments</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#install"><span class="section-number">2. </span>Installation &amp; Configuration</a>
    <ul>
      <li>
        <a href="#leanpub-auto-installation-methods"><span class="section-number">2.1 </span>Installation Methods</a>
      </li>
      <li>
        <a href="#configuring-markdown"><span class="section-number">2.2 </span>Configuring Markdown</a>
      </li>
      <li>
        <a href="#leanpub-auto-customization"><span class="section-number">2.3 </span>Customization</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#editing"><span class="section-number">3. </span>Movement &amp; Editing</a>
    <ul>
      <li>
        <a href="#leanpub-auto-headings"><span class="section-number">3.1 </span>Headings</a>
      </li>
      <li>
        <a href="#leanpub-auto-paragraphs"><span class="section-number">3.2 </span>Paragraphs</a>
      </li>
      <li>
        <a href="#leanpub-auto-blockquotes"><span class="section-number">3.3 </span>Blockquotes</a>
      </li>
      <li>
        <a href="#leanpub-auto-lists"><span class="section-number">3.4 </span>Lists</a>
      </li>
      <li>
        <a href="#leanpub-auto-paragraph--block-movement"><span class="section-number">3.5 </span>Paragraph &amp; Block Movement</a>
      </li>
      <li>
        <a href="#indentation"><span class="section-number">3.6 </span>Indentation</a>
      </li>
      <li>
        <a href="#leanpub-auto-code-blocks"><span class="section-number">3.7 </span>Code Blocks</a>
      </li>
      <li>
        <a href="#leanpub-auto-horizontal-rules"><span class="section-number">3.8 </span>Horizontal Rules</a>
      </li>
      <li>
        <a href="#leanpub-auto-emphasis-italic--bold"><span class="section-number">3.9 </span>Emphasis: Italic &amp; Bold</a>
      </li>
      <li>
        <a href="#leanpub-auto-inline-code"><span class="section-number">3.10 </span>Inline Code</a>
      </li>
      <li>
        <a href="#leanpub-auto-links--images"><span class="section-number">3.11 </span>Links &amp; Images</a>
      </li>
      <li>
        <a href="#leanpub-auto-line-breaks"><span class="section-number">3.12 </span>Line Breaks</a>
      </li>
      <li>
        <a href="#leanpub-auto-killing-elements"><span class="section-number">3.13 </span>Killing Elements</a>
      </li>
      <li>
        <a href="#leanpub-auto-markdown-do"><span class="section-number">3.14 </span>Markdown Do</a>
      </li>
      <li>
        <a href="#leanpub-auto-markup-promotion--demotion"><span class="section-number">3.15 </span>Markup Promotion &amp; Demotion</a>
      </li>
      <li>
        <a href="#completion"><span class="section-number">3.16 </span>Markup Completion</a>
      </li>
      <li>
        <a href="#leanpub-auto-markdown-maintenance-commands"><span class="section-number">3.17 </span>Markdown Maintenance Commands</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#extensions"><span class="section-number">4. </span>Extensions</a>
    <ul>
      <li>
        <a href="#leanpub-auto-fenced-code-blocks"><span class="section-number">4.1 </span>Fenced Code Blocks</a>
      </li>
      <li>
        <a href="#leanpub-auto-footnotes"><span class="section-number">4.2 </span>Footnotes</a>
      </li>
      <li>
        <a href="#leanpub-auto-definition-lists"><span class="section-number">4.3 </span>Definition Lists</a>
      </li>
      <li>
        <a href="#leanpub-auto-comments"><span class="section-number">4.4 </span>Comments</a>
      </li>
      <li>
        <a href="#leanpub-auto-task-list-items-checkboxes"><span class="section-number">4.5 </span>Task List Items (Checkboxes)</a>
      </li>
      <li>
        <a href="#leanpub-auto-subscripts-and-superscripts"><span class="section-number">4.6 </span>Subscripts and Superscripts</a>
      </li>
      <li>
        <a href="#leanpub-auto-metadata"><span class="section-number">4.7 </span>Metadata</a>
      </li>
      <li>
        <a href="#wiki-links"><span class="section-number">4.8 </span>Wiki Links</a>
      </li>
      <li>
        <a href="#math"><span class="section-number">4.9 </span>Mathematical Expressions (LaTeX)</a>
      </li>
      <li>
        <a href="#gfm"><span class="section-number">4.10 </span>GitHub Flavored Markdown (GFM) Mode</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#preview-export"><span class="section-number">5. </span>Previewing &amp; Exporting Files</a>
    <ul>
      <li>
        <a href="#markup-hiding"><span class="section-number">5.1 </span>Markup Hiding</a>
      </li>
      <li>
        <a href="#leanpub-auto-compiling-to-a-temporary-buffer-or-the-kill-ring"><span class="section-number">5.2 </span>Compiling to a Temporary Buffer or the Kill Ring</a>
      </li>
      <li>
        <a href="#leanpub-auto-static-html-preview"><span class="section-number">5.3 </span>Static HTML Preview</a>
      </li>
      <li>
        <a href="#leanpub-auto-static-html-export--view"><span class="section-number">5.4 </span>Static HTML Export &amp; View</a>
      </li>
      <li>
        <a href="#leanpub-auto-live-preview-mode"><span class="section-number">5.5 </span>Live Preview Mode</a>
      </li>
      <li>
        <a href="#leanpub-auto-opening-in-a-standalone-markdown-previewer"><span class="section-number">5.6 </span>Opening in a Standalone Markdown Previewer</a>
      </li>
      <li>
        <a href="#leanpub-auto-preview--export-customization"><span class="section-number">5.7 </span>Preview &amp; Export Customization</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#tips"><span class="section-number">6. </span>Tips</a>
    <ul>
      <li>
        <a href="#file-extensions"><span class="section-number">6.1 </span>Using Markdown Mode with Other File Extensions</a>
      </li>
      <li>
        <a href="#leanpub-auto-switching-and-toggling-markup"><span class="section-number">6.2 </span>Switching and Toggling Markup</a>
      </li>
      <li>
        <a href="#leanpub-auto-linking-to-or-including-custom-css"><span class="section-number">6.3 </span>Linking to or Including Custom CSS</a>
      </li>
      <li>
        <a href="#leanpub-auto-imenu-and-imenu-list"><span class="section-number">6.4 </span>Imenu and Imenu-List</a>
      </li>
      <li>
        <a href="#file-local"><span class="section-number">6.5 </span>File Local Variables</a>
      </li>
      <li>
        <a href="#leanpub-auto-generating-a-table-of-contents"><span class="section-number">6.6 </span>Generating a Table of Contents</a>
      </li>
      <li>
        <a href="#leanpub-auto-highlighting-and-preserving-whitespace"><span class="section-number">6.7 </span>Highlighting and Preserving Whitespace</a>
      </li>
      <li>
        <a href="#leanpub-auto-using-flyspell-with-markdown-mode"><span class="section-number">6.8 </span>Using Flyspell with Markdown Mode</a>
      </li>
      <li>
        <a href="#leanpub-auto-keeping-notes-in-a-local-wiki"><span class="section-number">6.9 </span>Keeping Notes in a Local Wiki</a>
      </li>
      <li>
        <a href="#leanpub-auto-integration-with-deft-mode"><span class="section-number">6.10 </span>Integration with Deft Mode</a>
      </li>
      <li>
        <a href="#leanpub-auto-mathjax-integration"><span class="section-number">6.11 </span>MathJax Integration</a>
      </li>
      <li>
        <a href="#leanpub-auto-using-pre--and-post-processors"><span class="section-number">6.12 </span>Using Pre- and Post-Processors</a>
      </li>
      <li>
        <a href="#leanpub-auto-using-a-custom-web-browser"><span class="section-number">6.13 </span>Using a Custom Web Browser</a>
      </li>
      <li>
        <a href="#leanpub-auto-using-marked-2-as-a-standalone-previewer"><span class="section-number">6.14 </span>Using Marked 2 as a Standalone Previewer</a>
      </li>
      <li>
        <a href="#leanpub-auto-pandoc-mode"><span class="section-number">6.15 </span>Pandoc Mode</a>
      </li>
      <li>
        <a href="#leanpub-auto-r-markdown"><span class="section-number">6.16 </span>R Markdown</a>
      </li>
      <li>
        <a href="#leanpub-auto-tracking-changes-with-criticmarkup-mode"><span class="section-number">6.17 </span>Tracking Changes with CriticMarkup Mode</a>
      </li>
      <li>
        <a href="#leanpub-auto-editing-html-as-markdown"><span class="section-number">6.18 </span>Editing HTML as Markdown</a>
      </li>
      <li>
        <a href="#leanpub-auto-editing-markdown-tables-with-org-table-mode"><span class="section-number">6.19 </span>Editing Markdown Tables with Org Table Mode</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#devel"><span class="section-number">7. </span>Markdown Mode Development</a>
    <ul>
      <li>
        <a href="#leanpub-auto-testing-the-development-version"><span class="section-number">7.1 </span>Testing the Development Version</a>
      </li>
      <li>
        <a href="#leanpub-auto-reporting-bugs-and-issues"><span class="section-number">7.2 </span>Reporting Bugs and Issues</a>
      </li>
      <li>
        <a href="#leanpub-auto-submitting-patches-or-github-pull-requests"><span class="section-number">7.3 </span>Submitting Patches or GitHub Pull Requests</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#leanpub-auto-conclusion"><span class="section-number">8. </span>Conclusion</a>
    <ul>
      <li>
        <a href="#leanpub-auto-looking-back-and-looking-ahead"><span class="section-number">8.1 </span>Looking Back and Looking Ahead</a>
      </li>
      <li>
        <a href="#leanpub-auto-further-reading"><span class="section-number">8.2 </span>Further Reading</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#leanpub-endnotes">Notes</a>
  </li>
</ul>

</ol>
</div>
<div id="leanpub-main" class="kramdown">
<h2 id="intro">
<span class="section-number">1. </span>Introduction</h2>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/markdown-mode-2_3.png" alt="Markdown Mode Screenshot" style="width: 100%;">
  <figcaption>Markdown Mode Screenshot</figcaption>
</figure>


<p>This <em>Guide</em> describes how to install, use, and customize
<a href="https://jblevins.org/projects/markdown-mode/">Markdown Mode</a>, a major mode for editing Markdown-formatted text
files in <a href="https://www.gnu.org/software/emacs/">Emacs</a>.  It is not intended to be a replacement for the
online manual, but rather to supplement and extend the manual for
users who want to learn to use Markdown Mode more effectively.</p>

<p>The goal of this book is to make writing and publishing with Markdown
in Emacs more enjoyable and efficient.  The hope is that through
examples and detailed descriptions of the various commands and
customizable variables, users can learn more about Emacs itself and
also improve their Markdown writing workflows.</p>

<p>This book covers the usual basic information about obtaining,
installing and configuring Markdown Mode, but it also addresses
advanced usage such as subtree and structure editing, defun and page
movement, marking, narrowing, region manipulation, etc.  It goes
beyond the basic documentation by also discussing interaction with
other packages and systems such as Flyspell mode, CriticMarkup mode,
Pandoc mode, Deft, HTML as Markdown mode, and MathJax.  Finally, it
also contains tips and tricks for custom configuration options such as
custom CSS stylesheets, using pre- and post-processors, customizing
faces, keeping notes in a local wiki, etc.</p>

<p>This guide is based on <strong>Markdown Mode version 2.3</strong>.
Markdown Mode and this guide were written by <a href="https://jblevins.org/">Jason Blevins</a>.
Markdown Mode is free software, licensed under the
GNU General Public License (GPL) version 3 or later,
and it may be freely obtained from the <a href="https://jblevins.org/projects/markdown-mode/">Markdown Mode homepage</a>.</p>

<h3 id="leanpub-auto-quick-reference">
<span class="section-number">1.1 </span>Quick Reference</h3>

<p>If you are a seasoned Markdown Mode user, here is a quick reference
table including new version 2.3 features:</p>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Keybinding</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Headings</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Insert heading depending on context</td>
      <td><code>C-c C-s h</code></td>
    </tr>
    <tr>
      <td>Insert heading, prefer setext</td>
      <td><code>C-c C-s H</code></td>
    </tr>
    <tr>
      <td>Insert atx heading of level # = 1, 2, … 6</td>
      <td><code>C-c C-s #</code></td>
    </tr>
    <tr>
      <td>Insert setext heading of level 1</td>
      <td><code>C-c C-s !</code></td>
    </tr>
    <tr>
      <td>Insert setext heading of level 2</td>
      <td><code>C-c C-s @</code></td>
    </tr>
    <tr>
      <td><strong>Inline Elements</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Bold</td>
      <td><code>C-c C-s b</code></td>
    </tr>
    <tr>
      <td>Italics</td>
      <td><code>C-c C-s i</code></td>
    </tr>
    <tr>
      <td>Inline code</td>
      <td><code>C-c C-s c</code></td>
    </tr>
    <tr>
      <td>
<code>kbd</code> tag</td>
      <td><code>C-c C-s k</code></td>
    </tr>
    <tr>
      <td>Wiki link</td>
      <td><code>C-c C-s w</code></td>
    </tr>
    <tr>
      <td><strong>Block Elements</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Preformatted/code block</td>
      <td><code>C-c C-s p</code></td>
    </tr>
    <tr>
      <td>Preformatted/code block (region)</td>
      <td><code>C-c C-s P</code></td>
    </tr>
    <tr>
      <td>Blockquote</td>
      <td><code>C-c C-s q</code></td>
    </tr>
    <tr>
      <td>Blockquote (region)</td>
      <td><code>C-c C-s Q</code></td>
    </tr>
    <tr>
      <td>GFM code block</td>
      <td><code>C-c C-s C</code></td>
    </tr>
    <tr>
      <td>Edit code block in indirect buffer</td>
      <td><code>C-c '</code></td>
    </tr>
    <tr>
      <td><strong>Links and Images</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Insert or edit link (inline, reference, or URL)</td>
      <td><code>C-c C-l</code></td>
    </tr>
    <tr>
      <td>Insert or edit image (inline or reference)</td>
      <td><code>C-c C-i</code></td>
    </tr>
    <tr>
      <td>Follow link at point</td>
      <td><code>C-c C-o</code></td>
    </tr>
    <tr>
      <td>Jump between reference link and definition</td>
      <td><code>C-c C-d</code></td>
    </tr>
    <tr>
      <td>Move to next link</td>
      <td><code>M-n</code></td>
    </tr>
    <tr>
      <td>Move to previous link</td>
      <td><code>M-p</code></td>
    </tr>
    <tr>
      <td><strong>Footnotes</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Insert footnote</td>
      <td><code>C-c C-s f</code></td>
    </tr>
    <tr>
      <td>Jump between footnote and definition</td>
      <td><code>C-c C-d</code></td>
    </tr>
    <tr>
      <td><strong>List Items &amp; List Editing</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Insert new list item (same level)</td>
      <td><code>M-RET</code></td>
    </tr>
    <tr>
      <td>Insert new list item (same level)</td>
      <td><code>C-c C-j</code></td>
    </tr>
    <tr>
      <td>Insert new list item (parent level)</td>
      <td><code>C-u C-c C-j</code></td>
    </tr>
    <tr>
      <td>Insert new list item (child level)</td>
      <td><code>C-u C-u C-c C-j</code></td>
    </tr>
    <tr>
      <td>Move list item up</td>
      <td><code>C-c &lt;up&gt;</code></td>
    </tr>
    <tr>
      <td>Move list item down</td>
      <td><code>C-c &lt;down&gt;</code></td>
    </tr>
    <tr>
      <td>Outdent/promote list item</td>
      <td><code>C-c &lt;left&gt;</code></td>
    </tr>
    <tr>
      <td>Indent/demote list item</td>
      <td><code>C-c &lt;right&gt;</code></td>
    </tr>
    <tr>
      <td>Toggle GFM checkbox</td>
      <td><code>C-c C-x C-x</code></td>
    </tr>
    <tr>
      <td><strong>Horizontal Rules</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Insert default horizontal rule string</td>
      <td><code>C-c C-s -</code></td>
    </tr>
    <tr>
      <td><strong>Killing and Yanking</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Kill element and keep text in kill ring</td>
      <td><code>C-c C-k</code></td>
    </tr>
    <tr>
      <td>Yank text back into buffer</td>
      <td><code>C-y</code></td>
    </tr>
    <tr>
      <td><strong>Movement by Paragraph</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Backward paragraph</td>
      <td><code>M-{</code></td>
    </tr>
    <tr>
      <td>Forward paragraph</td>
      <td><code>M-}</code></td>
    </tr>
    <tr>
      <td>Mark paragraph</td>
      <td><code>M-h</code></td>
    </tr>
    <tr>
      <td><strong>Movement by Block</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Backward block</td>
      <td><code>C-M-{</code></td>
    </tr>
    <tr>
      <td>Forward block</td>
      <td><code>C-M-}</code></td>
    </tr>
    <tr>
      <td>Mark block</td>
      <td><code>C-c M-h</code></td>
    </tr>
    <tr>
      <td>Narrow to block</td>
      <td><code>C-x n b</code></td>
    </tr>
    <tr>
      <td>Widen</td>
      <td><code>C-x n w</code></td>
    </tr>
    <tr>
      <td><strong>Movement by Section (Defun)</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Beginning of section</td>
      <td><code>C-M-a</code></td>
    </tr>
    <tr>
      <td>End of section</td>
      <td><code>C-M-e</code></td>
    </tr>
    <tr>
      <td>Mark section</td>
      <td><code>C-M-h</code></td>
    </tr>
    <tr>
      <td>Mark subtree</td>
      <td><code>C-c C-M-h</code></td>
    </tr>
    <tr>
      <td>Narrow to section</td>
      <td><code>C-x n d</code></td>
    </tr>
    <tr>
      <td>Narrow to subtree</td>
      <td><code>C-x n s</code></td>
    </tr>
    <tr>
      <td>Widen</td>
      <td><code>C-x n w</code></td>
    </tr>
    <tr>
      <td><strong>Outline &amp; List Movement</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Next heading or list item</td>
      <td><code>C-c C-n</code></td>
    </tr>
    <tr>
      <td>Previous heading or list item</td>
      <td><code>C-c C-p</code></td>
    </tr>
    <tr>
      <td>Next heading or list item (same level)</td>
      <td><code>C-c C-f</code></td>
    </tr>
    <tr>
      <td>Previous heading or list item (same level)</td>
      <td><code>C-c C-b</code></td>
    </tr>
    <tr>
      <td>Move up to parent heading or list item</td>
      <td><code>C-c C-u</code></td>
    </tr>
    <tr>
      <td><strong>Outline Visibility Cycling</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Cycle visibility globally</td>
      <td><code>S-TAB</code></td>
    </tr>
    <tr>
      <td>Cycle visibility of heading at point</td>
      <td><code>TAB</code></td>
    </tr>
    <tr>
      <td><strong>Outline Subtree Editing</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Move subtree up</td>
      <td><code>C-c &lt;up&gt;</code></td>
    </tr>
    <tr>
      <td>Move subtree down</td>
      <td><code>C-c &lt;down&gt;</code></td>
    </tr>
    <tr>
      <td>Promote subtree</td>
      <td><code>C-c &lt;left&gt;</code></td>
    </tr>
    <tr>
      <td>Demote subtree</td>
      <td><code>C-c &lt;right&gt;</code></td>
    </tr>
    <tr>
      <td><strong>Region Editing</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Indent region</td>
      <td><code>C-c &gt;</code></td>
    </tr>
    <tr>
      <td>Exdent region</td>
      <td><code>C-c &lt;</code></td>
    </tr>
    <tr>
      <td><strong>Promotion and Demotion</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Promote element at point</td>
      <td><code>C-c -</code></td>
    </tr>
    <tr>
      <td>Demote element at point</td>
      <td><code>C-c =</code></td>
    </tr>
    <tr>
      <td><strong>Markup Completion</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Complete markup at point or in region</td>
      <td><code>C-c C-]</code></td>
    </tr>
    <tr>
      <td>Complete markup in buffer</td>
      <td><code>C-c C-c ]</code></td>
    </tr>
    <tr>
      <td><strong>Markdown &amp; Utility Commands</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Run Markdown, output to temporary buffer</td>
      <td><code>C-c C-c m</code></td>
    </tr>
    <tr>
      <td>Run Markdown, export to file</td>
      <td><code>C-c C-c e</code></td>
    </tr>
    <tr>
      <td>Run Markdown, preview in browser</td>
      <td><code>C-c C-c p</code></td>
    </tr>
    <tr>
      <td>Run Markdown, export, and preview</td>
      <td><code>C-c C-c v</code></td>
    </tr>
    <tr>
      <td>Run Markdown, save to kill ring</td>
      <td><code>C-c C-c w</code></td>
    </tr>
    <tr>
      <td>Toggle live preview mode</td>
      <td><code>C-c C-c l</code></td>
    </tr>
    <tr>
      <td>Open external previewer</td>
      <td><code>C-c C-c o</code></td>
    </tr>
    <tr>
      <td>Check references in buffer</td>
      <td><code>C-c C-c c</code></td>
    </tr>
    <tr>
      <td>Renumber ordered lists in buffer</td>
      <td><code>C-c C-c n</code></td>
    </tr>
    <tr>
      <td><strong>Toggles and Settings</strong></td>
      <td> </td>
    </tr>
    <tr>
      <td>Toggle markup hiding</td>
      <td><code>C-c C-x C-m</code></td>
    </tr>
    <tr>
      <td>Toggle URL hiding</td>
      <td><code>C-c C-x C-l</code></td>
    </tr>
    <tr>
      <td>Toggle native code block font lock</td>
      <td><code>C-c C-x C-f</code></td>
    </tr>
    <tr>
      <td>Toggle inline images</td>
      <td><code>C-c C-x C-i</code></td>
    </tr>
    <tr>
      <td>Toggle LaTeX math support</td>
      <td><code>C-c C-x C-e</code></td>
    </tr>
    <tr>
      <td>Toggle GFM checkbox</td>
      <td><code>C-c C-x C-x</code></td>
    </tr>
  </tbody>

</table>

<h3 id="leanpub-auto-markdown">
<span class="section-number">1.2 </span>Markdown</h3>

<p><a href="http://daringfireball.net/projects/markdown/">Markdown</a> is a lightweight markup language, originally created by
<a href="https://daringfireball.net">John Gruber</a> in late 2003 and released in 2004.  Markdown aims to be
simultaneously easy to write and easy to read.  It takes many cues from
previous, similar attempts such as <a href="http://www.aaronsw.com/2002/atx/">atx</a>, by <a href="http://www.aaronsw.com">Aaron Swartz</a>,<sup id="fnref-aaronsw"><a href="#fn-aaronsw" rel="footnote">1</a></sup>
<a href="http://docutils.sourceforge.net/mirror/setext.html">setext</a>, by Ian Feldman, and <a href="https://txstyle.org">Textile</a>, by Dean Allen, as well
as from existing conventions for marking up plain text email.</p>

<p>“Markdown” is also used to refer to the original Markdown processor,
also written by John Gruber, which is a Perl script that converts plain
Markdown-formatted text input to HTML output.  It is distributed
under a BSD-style license and is included with, or available as a
plugin for, several content management systems.  In the remainder I
will refer to the processor by its filename, Markdown.pl, to
distinguish between the Markdown syntax and the Perl script.  After
the original Perl implementation, Markdown processors have been
implemented by others in a variety of programming languages.
Some examples are, in no particular order, PHP Markdown Extra, Python
Markdown, MultiMarkdown (Perl and C), Pandoc (Haskell), Discount (C),
Maruku (Ruby), RedCarpet (Ruby), Kramdown (Ruby), Showdown
(JavaScript), and CommonMark (C and JavaScript).</p>

<h4 id="leanpub-auto-markdown-syntax-reference">Markdown Syntax Reference</h4>

<p>For reference, below is a plain-text summary of Markdown’s syntax.
Additional details about each type of element are explained in the
course of describing the Markdown Mode editing commands.  See the
original <a href="http://daringfireball.net/projects/markdown/syntax">Markdown syntax page</a> for complete details.</p>

<figure class="code">
<div class="highlight"><pre><code></code># First-Level Header

## Second-Level Header

### Third-Level header

Paragraphs are separated by a blank line.

Text styles: _italic_, *italic*, __bold__, **bold**, `code`.

Horizontal rules:

---
***

Unordered list:

  * red
  * yellow
  * blue

Ordered list:

  1. apples
  2. oranges
  3. pears

Inline [link](https://jblevins.org/).

![Image alt text](emacs.svg)

Reference [link][tag].

[tag]: https://jblevins.org/

Implicit reference [link][].

[link]: https://jblevins.org/projects/markdown-mode/
</pre></div>

</figure>

<p>Characters can be backslash-escaped in Markdown.  That is, characters
which are ordinarily interpreted by Markdown as formatting commands
will instead be interpreted literally if preceded by a backslash.  For
example, when you need to type a literal asterisk or underscore:</p>

<figure class="code">
<div class="highlight"><pre><code></code>This is *italic*, but this \*is not\*.
</pre></div>

</figure>

<p>Markdown.pl also does not transform any text within raw block-level
HTML elements (although some other processors do).  Thus it is
possible to include sections of HTML within a Markdown source
document by wrapping them in block-level HTML tags.  However, with a
small number of exceptions (e.g., comments and <code>kbd</code> tags) Markdown
Mode does not explicitly support inline HTML.</p>

<h4 id="leanpub-auto-additional-information">Additional Information</h4>

<p>For additional information on Markdown syntax, you can refer to the
following links:</p>

<ul>
  <li>
<a href="http://daringfireball.net/projects/markdown/syntax">Markdown Syntax</a> - Original syntax description by John Gruber</li>
  <li>
<a href="http://daringfireball.net/projects/markdown/dingus">Markdown Dingus</a> - Online converter using Markdown.pl</li>
  <li>
<a href="https://johnmacfarlane.net/babelmark2/">Babelmark 2</a> - Online converter comparing many Markdown processors</li>
  <li>
<a href="http://en.wikipedia.org/wiki/Markdown">Wikipedia article</a> - Background information on Markdown with syntax examples</li>
  <li>
<a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</a> - Guide to Markdown and extensions by GitHub</li>
  <li>
<a href="http://pandoc.org/MANUAL.html">Pandoc User’s Guide</a> - Markdown and Pandoc extensions</li>
  <li>
<a href="https://michelf.ca/projects/php-markdown/reference/">PHP Markdown Reference</a> - Markdown and PHP Markdown Extra extensions</li>
  <li>
<a href="http://brettterpstra.com/2015/08/24/write-better-markdown/">Write better Markdown</a> - Style guide by Brett Terpstra</li>
</ul>

<h3 id="leanpub-auto-history">
<span class="section-number">1.3 </span>History</h3>

<p>Markdown Mode was originally written and is still maintained
by <a href="https://jblevins.org/">Jason Blevins</a>.  The initial release, version 1.1, was created
on May 24, 2007.  As of this writing, the latest stable version of
Markdown Mode is version 2.3, released on August 31, 2017.  For a
complete list of changes, see the <a href="https://jblevins.org/projects/markdown-mode/rev-2-3">version 2.3 release notes</a>
or those for previous versions:</p>

<ul>
  <li>2017-05-26: <a href="https://jblevins.org/projects/markdown-mode/rev-2-2">Version 2.2</a>
</li>
  <li>2016-01-09: <a href="https://jblevins.org/projects/markdown-mode/rev-2-1">Version 2.1</a>
</li>
  <li>2013-03-24: <a href="https://jblevins.org/projects/markdown-mode/rev-2-0">Version 2.0</a>
</li>
  <li>2013-01-25: <a href="https://jblevins.org/projects/markdown-mode/rev-1-9">Version 1.9</a>
</li>
  <li>2011-08-15: <a href="https://jblevins.org/projects/markdown-mode/rev-1-8-1">Version 1.8.1</a>
</li>
  <li>2011-08-12: <a href="https://jblevins.org/projects/markdown-mode/rev-1-8">Version 1.8</a>
</li>
  <li>2009-10-01: <a href="https://jblevins.org/projects/markdown-mode/rev-1-7">Version 1.7</a>
</li>
  <li>2008-06-04: <a href="https://jblevins.org/projects/markdown-mode/rev-1-6">Version 1.6</a>
</li>
  <li>2007-10-11: <a href="https://jblevins.org/projects/markdown-mode/rev-1-5">Version 1.5</a>
</li>
  <li>2007-06-29: <a href="https://jblevins.org/projects/markdown-mode/rev-1-4">Version 1.4</a>
</li>
  <li>2007-06-05: <a href="https://jblevins.org/projects/markdown-mode/rev-1-3">Version 1.3</a>
</li>
  <li>2007-05-25: <a href="https://jblevins.org/projects/markdown-mode/rev-1-2">Version 1.2</a>
</li>
  <li>2007-05-24: <a href="https://jblevins.org/projects/markdown-mode/rev-1-1">Version 1.1</a>
</li>
</ul>

<aside class="information blurb">
    <p>Historically, version numbering began at 1.1 because the source code
was originally stored in RCS (Revision Control System), which numbers
revisions starting at 1.1 by default.  After version 1.5, the source
was moved to Git, where it still resides today.  See the chapter
on <a href="#devel">Markdown Mode Development</a> for instructions on how to obtain
the source code.</p>

</aside>

<h3 id="leanpub-auto-acknowledgments">
<span class="section-number">1.4 </span>Acknowledgments</h3>

<p>Markdown Mode has benefited greatly from the efforts of the many
volunteers who have sent patches, test cases, bug reports,
suggestions, helped with packaging, etc.  Thank you for your
contributions!  Markdown Mode is much more robust and includes many
additional features as a result of your efforts.  Below is a partial
list of contributors (in alphabetical order).  See the
<a href="https://github.com/jrblevin/markdown-mode/graphs/contributors">GitHub contributors graph</a> and the commit log for more details.</p>


<blockquote>
  <p>Masayuki Ataka, Hilko Bengen, Jonas Bernoulli, Greg Bognar, Roger
Bolsius, Daniel Brotsky, Cyril Brulebois, Daniel Burrows, Donald
Ephraim Curtis, Julien Danjou, Werner Dittmann, Jeremiah Dodds,
Carsten Dominik, Michael Dwyer, Dmitry Dzhus, Peter Eisentraut,
Conal Elliott, Bryan Fink, Gunnar Franke, Samuel Freilich, Shigeru
Fukaya, Peter S. Galbraith, Francois Gannaz, David Glasser, Matus
Goljer, Kévin Le Gouguec, Marijn Haverbeke, Isaac Hodes, Philippe
Ivaldi, Zhenlei Jia, Peter Jones, Antonis Kanouras, Marcin
Kasperski, Keshav Kini, Dave Kleinschmidt, Vasily Korytov, Joost
Kremers, Bryan Kyle, Kévin Le Gouguec, Chris Lott, Christopher
J. Madsen, Tom May, Danny McClanahan, Matt McClure, Howard Melman,
Eric Merritt, Nelson Minar, Stefan Monnier, Makoto Motohashi, Jon
Mountjoy, Akinori Musha, Pierre Neidhardt, Spanti Nicola, Theresa
O’Connor, George Ogata, Paul W. Rankin, Jose A. Ortega Ruiz, Max
Penet, Nicolas Petton, Jorge Israel Peña, Scott Pfister, Kevin
Porter, Steve Purcell, Alec Resnick, Christophe Rhodes, Enrico
Scholz, Dale Sedivec, Ankit Solanki, Tyler Smith, Michael Sperber,
Mike Sperber, Vitalie Spinu, Philipp Stephani, Moogen Tian, Vegard
Vesterheim, Tim Visher, Ben Voui, Sebastian Wiesner, Peter Williams,
Tianxiang Xiong, Ian Yang, Syohei Yoshida, and Google, Inc.</p>
</blockquote>

<div class="scene-break stars">*    *    *</div>
<h2 id="install">
<span class="section-number">2. </span>Installation &amp; Configuration</h2>

<p>There are many ways to load packages in Emacs, and the following three
are covered in this section: installation using the built-in Emacs
package manager (recommended), installation using a system-wide
package manager, and manual installation.</p>

<p>Markdown Mode is compatible with Emacs 24.3 and later, and it has few
dependencies.  To preview files and export to HTML, you will need to
install and configure a Markdown processor (e.g., Markdown.pl).
Also, to enable editing of code blocks in indirect buffers
using <code>C-c '</code> (<code>markdown-edit-code-block</code>), you will need to install
the <a href="https://github.com/Fanael/edit-indirect/"><code>edit-indirect</code></a> package.</p>

<aside class="information blurb">
    <p>This chapter covers installing the stable version of Markdown
Mode, but installing the development version is similar.  If you would
like to test the development version see the <a href="#devel">Markdown Mode Development</a>
chapter at the end.</p>

</aside>

<h3 id="leanpub-auto-installation-methods">
<span class="section-number">2.1 </span>Installation Methods</h3>

<h4 id="leanpub-auto-emacs-package-manager">Emacs Package Manager</h4>

<p>The recommended way to install Markdown Mode is to use the built-in
Emacs package manager, <code>package.el</code>, which has been included in Emacs
since version 23.  Markdown Mode can be installed via the <code>markdown-mode</code>
package in the <a href="https://stable.melpa.org/#/markdown-mode">MELPA Stable repository</a>.<sup id="fnref-MELPA"><a href="#fn-MELPA" rel="footnote">2</a></sup></p>

<p>First, you will need to configure the package manager to use the MELPA
Stable repository by adding the following to your <code>.emacs</code>, <code>init.el</code>,
or equivalent init file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nb">require</code> <code class="ss">'package</code><code class="p">)</code>
<code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'package-archives</code>
    <code class="o">'</code><code class="p">(</code><code class="s">"melpa-stable"</code> <code class="o">.</code> <code class="s">"https://stable.melpa.org/packages/"</code><code class="p">))</code>
<code class="p">(</code><code class="nv">package-initialize</code><code class="p">)</code>
</pre></div>

</figure>

<p>Then, after restarting Emacs or evaluating the above statements, issue
the following command: <code>M-x package-install RET markdown-mode</code>.
When installing this way, the major modes <code>markdown-mode</code> and
<code>gfm-mode</code> will be autoloaded and <code>markdown-mode</code> will be invoked
automatically for file names ending in either <code>.md</code> or <code>.markdown</code>.<sup id="fnref-extensions"><a href="#fn-extensions" rel="footnote">3</a></sup></p>

<p>Alternatively, if you manage loading packages with <a href="https://github.com/jwiegley/use-package">use-package</a>
(a practice I highly recommend) then you can
automatically install and configure <code>markdown-mode</code> by adding a
declaration such as the one below to your init file (this is an example,
so adjust the settings as needed):</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nb">use-package</code> <code class="nv">markdown-mode</code>
  <code class="nb">:ensure</code> <code class="no">t</code>
  <code class="nb">:commands</code> <code class="p">(</code><code class="nv">markdown-mode</code> <code class="nv">gfm-mode</code><code class="p">)</code>
  <code class="nb">:mode</code> <code class="p">((</code><code class="s">"README\\.md\\'"</code> <code class="o">.</code> <code class="nv">gfm-mode</code><code class="p">))</code>
  <code class="nb">:init</code> <code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-command</code> <code class="s">"/usr/local/bin/multimarkdown"</code><code class="p">))</code>
</pre></div>

</figure>

<h4 id="leanpub-auto-os-package-manager">OS Package Manager</h4>

<p>Markdown Mode is also available in various package managers on several
operating systems.  You should confirm that the package you install
contains the latest stable version (and please notify the package
maintainer if not).  These packages also typically do not byte compile
the source files or configure them to load automatically, so you may
still need to follow the <a href="#manual">Manual Installation</a> instructions in the
next section.</p>

<p><strong>MacOS:</strong> MacOS users who use Homebrew can install the
<a href="https://github.com/dunn/homebrew-emacs/blob/master/Formula/markdown-mode.rb">markdown-mode formula</a>, which in turn obtains the latest
stable version of Markdown Mode from GitHub.</p>

<figure class="code">
<div class="highlight"><pre><code></code>brew tap dunn/emacs
brew install dunn/emacs/markdown-mode
</pre></div>

</figure>

<p>This will install files in
<code>/usr/local/share/emacs/site-lisp/markdown-mode</code>.  Depending on where
you obtained Emacs, this directory may or may not be in your
<code>load-path</code>, so you may need to add it as described in the
<a href="#manual">Manual Installation</a> section that follows.</p>

<aside class="warning blurb">
    <p>If you are a MacPorts user, unfortunately there does not seem to be
an up-to-date port.  The existing <a href="https://trac.macports.org/browser/trunk/dports/editors/markdown-mode.el/Portfile">markdown-mode.el</a> port
currently points to a Git revision from 2014.  There is also a
<a href="http://trac.macports.org/ticket/35716">pending</a> ticket for a new port, but there has been no activity.
Rather than installing from MacPorts, I recommend using the Emacs
package manager as described above.</p>

</aside>

<p><strong>Debian and Ubuntu Linux:</strong> On Debian-based distributions, Markdown
Mode can be installed via the <a href="https://packages.debian.org/sid/lisp/elpa-markdown-mode">elpa-markdown-mode</a> package.</p>

<figure class="code">
<div class="highlight"><pre><code></code>sudo apt-get install elpa-markdown-mode
</pre></div>

</figure>

<p><strong>FreeBSD:</strong> FreeBSD users can install
the <a href="http://svnweb.freebsd.org/ports/head/textproc/markdown-mode.el">textproc/markdown-mode.el</a> port, but note that the
installed files are not byte compiled.  Users who install this port
will also need to edit their init files following the Manual
Installation instructions in the next section to load Markdown Mode.</p>

<p><strong>NetBSD:</strong> Markdown Mode is available in pkgsrc
as <a href="http://pkgsrc.se/textproc/markdown-mode">textproc/markdown-mode</a>, but (as of May 8, 2017) it installs and
byte-compiles an outdated version of Markdown Mode.  If you use this
package, you will also need to edit your init file following the Manual
Installation instructions below, to load Markdown Mode.  Rather than
installing this package, use the Emacs package manager as described
above.</p>

<figure class="code">
<div class="highlight"><pre><code></code>pkg_add textproc/markdown-mode
</pre></div>

</figure>

<h4 id="manual">Manual Installation</h4>

<p>Alternatively, you can manually download and install Markdown Mode.
First, download the <a href="https://jblevins.org/projects/markdown-mode/markdown-mode.el">latest stable version</a><sup id="fnref-stable"><a href="#fn-stable" rel="footnote">4</a></sup> and save
the file where Emacs can find it (i.e., a directory in your
<code>load-path</code>).  You can then configure <code>markdown-mode</code> and <code>gfm-mode</code>
to load automatically by adding the following to your init file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nf">autoload</code> <code class="ss">'markdown-mode</code> <code class="s">"markdown-mode"</code>
  <code class="s">"Major mode for editing Markdown files"</code> <code class="no">t</code><code class="p">)</code>
<code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'auto-mode-alist</code> <code class="o">'</code><code class="p">(</code><code class="s">"\\.markdown\\'"</code> <code class="o">.</code> <code class="nv">markdown-mode</code><code class="p">))</code>
<code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'auto-mode-alist</code> <code class="o">'</code><code class="p">(</code><code class="s">"\\.md\\'"</code> <code class="o">.</code> <code class="nv">markdown-mode</code><code class="p">))</code>

<code class="p">(</code><code class="nf">autoload</code> <code class="ss">'gfm-mode</code> <code class="s">"markdown-mode"</code>
   <code class="s">"Major mode for GitHub Flavored Markdown files"</code> <code class="no">t</code><code class="p">)</code>
<code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'auto-mode-alist</code> <code class="o">'</code><code class="p">(</code><code class="s">"README\\.md\\'"</code> <code class="o">.</code> <code class="nv">gfm-mode</code><code class="p">))</code>
</pre></div>

</figure>

<h3 id="configuring-markdown">
<span class="section-number">2.2 </span>Configuring Markdown</h3>

<p>Although strictly speaking no configuration is <em>necessary</em>, there are
a few settings that most users will want to customize.  The most
important of these is the <code>markdown-command</code> variable, which tells
Markdown Mode where to find an external program on your system for
converting Markdown to HTML.  You should customize this variable so
that Markdown Mode uses your Markdown processor of choice.</p>

<dl>
  <dt><code>markdown-command</code></dt>
  <dd>String, default: <code>"markdown"</code>.
    <p>The command used to convert Markdown to HTML, along with any
necessary command-line options.  The default is to look for an
executable named <code>markdown</code> in the Emacs <code>exec-path</code>.</p>
  </dd>
</dl>

<p>If you are using the customize interface, you simply need to type the
path to your Markdown script or binary in the “Markdown Command” field
in the customize interface (e.g., <code>/usr/local/bin/multimarkdown</code>).  If
you know the name of the executable, say <code>multimarkdown</code>, but you are
not sure where it is located, and you are using macOS or Linux, you
can find it by typing <code>which multimarkdown</code> at the command line.</p>

<p>To set this variable in your init file, add a line such as the
following:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-command</code> <code class="s">"/usr/local/bin/multimarkdown"</code><code class="p">)</code>
</pre></div>

</figure>

<h4 id="leanpub-auto-configuring-markdown-on-macos-with-homebrew">Configuring Markdown on macOS with Homebrew</h4>

<p>If you use Homebrew, then you can install Markdown.pl, Pandoc, or
MultiMarkdown by issuing one of the following commands:</p>

<figure class="code">
<div class="highlight"><pre><code></code>brew install markdown
brew install pandoc
brew install multimarkdown
</pre></div>

</figure>

<p>Then, in Emacs, type <code>M-x customize-mode RET markdown-mode</code> and set
“Markdown Command” to the path of the executable you just installed:
<code>/usr/local/bin/markdown</code>, <code>/usr/local/bin/pandoc</code>, or
<code>/usr/local/bin/multimarkdown</code>.</p>

<h4 id="leanpub-auto-configuring-markdown-on-windows">Configuring Markdown on Windows</h4>

<p>On Windows, you will need to use the full path including the drive
letter.  For example, if you installed Pandoc in <code>C:\Utils\Console</code>,
then you would set <code>markdown-command</code> like this:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-command</code> <code class="s">"c:/Utils/Console/pandoc.exe"</code><code class="p">)</code>
</pre></div>

</figure>

<p>If you need to run Markdown as a script, with an interpreter, then
you will need to add that as well.  For example, to use Markdown.pl with
Perl (both need to be installed), something like this should suffice:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-command</code> <code class="s">"c:/path/to/perl.exe c:/path/to/Markdown.pl"</code><code class="p">)</code>
</pre></div>

</figure>

<h4 id="leanpub-auto-passing-command-line-options-to-markdown">Passing Command Line Options to Markdown</h4>

<p>You can also customize this variable to pass any necessary
command line options to your Markdown processor.  For example, to ask
MultiMarkdown to enable smart typography and footnotes, you can define
<code>markdown-command</code> as follows:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-command</code> <code class="s">"/usr/local/bin/multimarkdown --smart --notes"</code><code class="p">)</code>
</pre></div>

</figure>

<p>If you use Pandoc, you may want to configure it as follows:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-command</code>
      <code class="p">(</code><code class="nf">concat</code>
       <code class="s">"/usr/local/bin/pandoc"</code>
       <code class="s">" --from=markdown --to=html"</code>
       <code class="s">" --standalone --mathjax --highlight-style=pygments"</code><code class="p">))</code>
</pre></div>

</figure>

<p>The command-line arguments ask Pandoc to convert Markdown to HTML, to
produce a standalone HTML document rather than a snippet, to enable
MathJax (to render LaTeX as MathML), and to use Pygments for syntax
highlighting of code blocks.</p>

<h4 id="leanpub-auto-passing-a-file-name-to-markdown">Passing a File Name to Markdown</h4>

<p>By default, Markdown Mode assumes that your Markdown processor accepts
input via the standard input, or <code>stdin</code>.  That is, it assumes that if
you were using it from the command line, you could <em>pipe</em> input to it
like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code>cat document.md | markdown
</pre></div>

</figure>

<p>If your Markdown processor needs to be passed a file name, you will need
to set another variable: <code>markdown-command-needs-filename</code>.
When this variable is <code>nil</code> (the default), Markdown Mode will pass the
Markdown content to <code>markdown-command</code> using <code>stdin</code>.  When set to
<code>t</code>, Markdown Mode will pass the name of the file as the final command
line argument to <code>markdown-command</code>.  Note that in the latter case,
you will only be able to run <code>markdown-command</code> from buffers which are
visiting a file.</p>

<dl>
  <dt><code>markdown-command-needs-filename</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>Set to <code>t</code> if the program specified as <code>markdown-command</code>
needs the filename to be specified as a command line argument,
rather than reading the content from the standard input (<code>stdin</code>).</p>
  </dd>
</dl>

<h4 id="leanpub-auto-markdown-command-and-exec-path">Markdown Command and <code>exec-path</code>
</h4>

<p>You can set <code>markdown-command</code> to be the full path to the executable,
as in previous examples, but a better solution is to set your
<code>exec-path</code> properly so that Emacs can find it without the full path.
You can check this in two ways.  First, to see the value of
<code>exec-path</code>, issue <code>M-x describe-variable RET exec-path</code>.  If you see
the directory containing your Markdown executable in the path, then
the name of the program by itself should suffice without the path
(e.g., <code>multimarkdown</code>).</p>

<p>Second, you can also use the <code>executable-find</code> command to see if Emacs
can find your Markdown processor.  This isn’t an interactive command,
but you can run it using <code>eval-expression</code> via <code>M-:</code>.  For example, to
check whether Emacs can find an executable named <code>pandoc</code>, you can
issue <code>M-: (executable-find "pandoc")</code>.  The return value will be
displayed in the minibuffer.  If you see the path to <code>pandoc</code>, then
Emacs can find it.  If you see <code>nil</code>, then <code>pandoc</code> could not be found
in your <code>exec-path</code>.</p>

<aside class="error blurb">
    <p>If you attempt to preview or export your buffer and you see an error
regarding the <code>markdown</code> command (which is the default value of the
<code>markdown-command</code> variable), then most likely you need to check
your <code>markdown-command</code> setting or install a Markdown processor (or
both).  Below are some common error messages that indicate that
either the <code>markdown</code> binary cannot be found or <code>markdown-command</code>
should be customized to your system:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>/bin/bash: markdown: command not found

zsh:1: command not found: markdown

'markdown' is not recognized as an internal or external
    command, operable program or batch file.
</pre></div>

  </figure>

</aside>

<aside class="tip blurb">
    <p>If you are having trouble setting your <code>exec-path</code>, a simple way to
configure it is to install the
<a href="https://github.com/purcell/exec-path-from-shell"><code>exec-path-from-shell</code></a>
package.  Its purpose is to ensure that environment variables in
Emacs are the same as in your shell.  This allows Emacs to find any
commands you can also execute from the command line without
specifying the full path.</p>

</aside>

<h3 id="leanpub-auto-customization">
<span class="section-number">2.3 </span>Customization</h3>


<figure class="image center" style="width: 70%;">
  <img src="/site_images1/markdown-mode/customize-group-markdown.png" alt="Markdown Customize Group" style="width: 100%;">
  <figcaption>Markdown Customize Group</figcaption>
</figure>


<p>When in Markdown Mode, the <code>M-x customize-mode</code> command provides an
interface to all of the available customizations.  If you are
using a different mode, then you will need to be more specific: <code>M-x
customize-mode RET markdown-mode</code>.  Alternatively, you can customize
variables using <code>M-x customize-group RET markdown</code> (i.e., by
customizing the <em>group</em> rather than the <em>mode</em>).</p>

<aside class="tip blurb">
    <p>If you use this built-in customize interface, be sure to save your
changes before closing the buffer by clicking the “Apply and Save”
button.</p>

</aside>


<figure class="image center" style="width: 70%;">
  <img src="/site_images1/markdown-mode/customize-group-markdown-faces.png" alt="Markdown Faces Customize Group" style="width: 100%;">
  <figcaption>Markdown Faces Customize Group</figcaption>
</figure>


<p>Additionally, the faces used for font lock (syntax highlighting)
can be modified to your liking—the font family, color,
size, and so on—by issuing <code>M-x customize-group RET
markdown-faces</code> or by using the “Markdown Faces” link at the
bottom of the mode customization screen.</p>

<div class="scene-break stars">*    *    *</div>
<h2 id="editing">
<span class="section-number">3. </span>Movement &amp; Editing</h2>

<p>This section describes the movement, insertion, and editing commands
provided by Markdown Mode.  Commands pertaining to block elements are
described first: headings, paragraphs, blockquotes, lists, code blocks,
and horizontal rules.  Then, commands for editing span elements are
described: emphasis, code, links, images, and comments.  Finally,
miscellaneous editing commands are described for markup completion,
markup cycling, indentation, etc.  Extensions, such as footnotes,
fenced code blocks, wiki links, definition lists, and checkboxes
are described in the <a href="#extensions">Extensions</a> chapter that follows.</p>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/menu-bar.png" alt="Markdown Menu in Emacs on macOS" style="width: 100%;">
  <figcaption>Markdown Menu in Emacs on macOS</figcaption>
</figure>


<p>Markdown Mode keybindings are grouped by prefixes based on their
function.  Like other major modes, most commands begin with <code>C-c</code>, the
<code>mode-specific-command-prefix</code>.  Commands are then grouped by category
under a second-level prefix.  For example, the commands for styling
text are grouped under <code>C-c C-s</code> (<code>markdown-mode-style-map</code>).
Similarly, commands for running Markdown and performing maintenance
tasks reside under <code>C-c C-c</code> (<code>markdown-mode-command-map</code>).
Movement and shifting commands tend to be associated with paired
delimiters such as <code>M-{</code> and <code>M-}</code> or <code>C-c &lt;</code> and <code>C-c &gt;</code>.
If you have <code>menu-bar-mode</code> on, you can also access these commands
from the Markdown menu.</p>

<p>We begin with a summary of Markdown Mode prefixes and mnemonics.  The
commands in each group will be described in detail below.  You can
obtain a list of all keybindings by pressing <code>C-c C-h</code> or <code>C-h m</code>.  To
see commands under a specific prefix, add <code>C-h</code> to the end of the
prefix.  For example, press <code>C-c C-s C-h</code> to list all commands under
<code>C-c C-s</code>.</p>

<table>
  <thead>
    <tr>
      <th>Prefix</th>
      <th>Function</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>C-c C-s</code></td>
      <td>
<strong>S</strong>tyles</td>
    </tr>
    <tr>
      <td><code>C-c C-l</code></td>
      <td>
<strong>L</strong>inks</td>
    </tr>
    <tr>
      <td><code>C-c C-i</code></td>
      <td>
<strong>I</strong>mages</td>
    </tr>
    <tr>
      <td><code>C-c C-c</code></td>
      <td>
<strong>C</strong>ommands</td>
    </tr>
    <tr>
      <td><code>C-c C-x</code></td>
      <td>Toggles</td>
    </tr>
  </tbody>

</table>

<p>When you use the <code>C-c C-s</code> or <code>C-c C-c</code> prefixes, prompts will
appear in the minibuffer that provide hints for a few of the most
commonly used commands.  You can control this by setting
<code>markdown-enable-prefix-prompts</code>.</p>

<dl>
  <dt><code>markdown-enable-prefix-prompts</code></dt>
  <dd>Boolean, default: <code>t</code>.
    <p>When non-<code>nil</code>, display prompts when certain prefix keys are
pressed.  Set to <code>nil</code> to disable these prompts.</p>
  </dd>
</dl>

<aside class="tip blurb">
    <p>There are several Emacs packages for providing keybinding hints,
such as <code>which-key</code> and <code>guide-key</code>.  If you use one of these,
you can disable Markdown Mode’s prefix prompts by setting
<code>markdown-enable-prefix-prompts</code> to <code>nil</code>.</p>

</aside>

<p>The following sections describe many commands for inserting
markup—for headings, blockquotes, lists, source code, and so
on—and many of these commands behave differently depending on
whether <code>transient-mark-mode</code> is enabled or not.  When it makes sense,
if <code>transient-mark-mode</code> is on and there is an active region, the
command applies to the text in the region.  For example, <code>C-c C-s b</code>
(<code>markdown-insert-bold</code>) would make the region bold.  When
<code>transient-mark-mode</code> is off or there is no active region, many
commands then proceed to work with either the word at the point (e.g.,
for italics) or the current line (e.g., for headings).</p>

<p>There are also some parallel commands that act specifically on the
region, even when <code>transient-mark-mode</code> is disabled.  These commands
have the same keybindings as their standard counterparts but use an
uppercase letter instead.  For example, <code>markdown-insert-blockquote</code>
is bound to <code>C-c C-s q</code> while <code>markdown-blockquote-region</code> is bound to
<code>C-c C-s Q</code>.  The latter <em>always</em> applies to the region while the former
only acts on the region when <code>transient-mark-mode</code> is on and the region
is active.</p>

<aside class="tip blurb">
    <p>For users who prefer to work <em>without</em> <code>transient-mark-mode</code>,
conveniently since Emacs 22 it can be enabled temporarily by pressing
<code>C-SPC C-SPC</code>.</p>

</aside>

<h3 id="leanpub-auto-headings">
<span class="section-number">3.1 </span>Headings</h3>

<p>Headings in Markdown can be defined using either of two formats:
atx and setext.</p>

<p>Atx-style headings are lines beginning with one to six hash marks (<code>#</code>)
followed by the heading text.  The number of hash marks corresponds to
the level of the heading, with one being the most prominent and six
being the least prominent (corresponding to the six levels of headings
in HTML, <code>&lt;h1&gt;</code> through <code>&lt;h6&gt;</code>).  The heading text may optionally be
followed by an equal number of hash marks.</p>

<figure class="code">
<div class="highlight"><pre><code></code># First-level heading #

First section text.  Here we close the heading with a hash mark.

## Second-level heading

Second section text.  No closing hash marks here.

### Third-level heading ###

Third section text.
</pre></div>

</figure>

<p>The second type of headings supported in Markdown are called setext
headings, for which only two levels are defined.  Instead of being
surrounded by hash marks, equals signs (<code>=</code>) and hyphens (<code>-</code>) are
used to underline the heading text.</p>

<figure class="code">
<div class="highlight"><pre><code></code>First-level heading
==================

Second-level heading
-------------------
</pre></div>

</figure>

<h4 id="leanpub-auto-inserting--replacing-headings">Inserting &amp; Replacing Headings</h4>

<p>There are two options for inserting or replacing headings: you can
either insert a heading of a specific level and type or let Markdown
Mode determine the level and type for you.  To insert a heading of a
specific level directly, simply use <code>C-c C-s #</code> where <code>#</code> is a number
<code>1</code> through <code>6</code> (<code>markdown-insert-header-atx-1</code>, …,
<code>markdown-insert-header-atx-6</code>).</p>

<p>To insert setext headings directly, use
<code>C-c C-s !</code> (<code>markdown-insert-header-setext-1</code>) for level one
or <code>C-c C-s @</code> (<code>markdown-insert-header-setext-2</code>) for level two.
Noting that <code>!</code> is <code>S-1</code> and <code>@</code> is <code>S-2</code> may make these commands
easier to remember.</p>

<p>For automatic heading insertion use <code>C-c C-s h</code>
(<code>markdown-insert-header-dwim</code>).  The type and level are determined
based on the previous heading.  By default, the new heading will be a
sibling (same level).  A <code>C-u</code> prefix can be added to insert a heading
that is <em>promoted</em> (lower number) by one level or a <code>C-u C-u</code> prefix
can be given to insert a heading that is <em>demoted</em> (higher number) by
one level.</p>

<aside class="exercise blurb">
    <p>Suppose you are currently writing in a level-two section, as in the
following example, where <code>█</code> indicates the point:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>## Heading ##

Body text.
█
</pre></div>

  </figure>

  <p>Pressing <code>C-c C-s h</code>, for automatic heading insertion, creates a
new level-two sibling heading:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>## Heading ##

Body text.

## █##
</pre></div>

  </figure>

  <p>Using the universal prefix, as in <code>C-u C-c C-s h</code>, creates a
new level-one parent heading:</p>

  <figure class="code">
<div class="highlight"><pre><code></code># █#
</pre></div>

  </figure>

  <p>Using the universal prefix twice, as in <code>C-u C-u C-c C-s h</code>, creates a
new level-three child heading instead:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>### █###
</pre></div>

  </figure>

</aside>

<p>To automatically insert setext-style headings, use <code>C-c C-s H</code>
(<code>markdown-insert-header-setext-dwim</code>).  This command behaves
like <code>C-c C-c h</code> (<code>markdown-insert-header-dwim</code>) in that the level is
calculated automatically and it can accept the same prefix arguments,
but it uses setext (underlined) headings for levels one and two.</p>

<p>As with several other markup commands, if the region is active and
<code>transient-mark-mode</code> is on, the heading insertion commands use the
text in the region as the heading text.  Next, if the current line is
not blank, they use the text on the current line.  Otherwise, the user
is prompted to provide the heading text.</p>

<p>If the point is at a heading, these commands will replace the existing
markup in order to update the level or type of the heading.  This
is useful, for example, when the automatically-determined heading level
is not what you wanted: the heading level can be quickly changed as needed.</p>

<aside class="exercise blurb">
    <p>Suppose you mistakenly insert a level-two heading and want to
replace it, as in the following example:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>## Heading█##
</pre></div>

  </figure>

  <p>Pressing <code>C-c C-s 1</code> replaces the heading with a level-one heading:</p>

  <figure class="code">
<div class="highlight"><pre><code></code># Heading█#
</pre></div>

  </figure>

</aside>

<p>To remove the markup of the heading at the point, you can press <code>C-c C-k</code>
(<code>markdown-kill-thing-at-point</code>) to kill the heading and add the text
to the kill ring.  Press <code>C-y</code> to yank the heading text back into the
buffer.</p>

<aside class="information blurb">
    <p>Markdown.pl and several other processors allow one to omit the
whitespace between the hash mark and the heading text, but some
processors and specifications such as CommonMark do require the
whitespace.  To help guarantee compatibility, Markdown Mode also
requires whitespace.  This has other advantages, for example, it
allows one to use #hashtags that might wrap to the beginning of the
line.</p>

</aside>

<aside class="tip blurb">
    <p>If the length of the underline characters is not exactly right,
Markdown Mode can help keep things tidy by “completing” the markup
for you after the fact.  See the <a href="#completion">Markup Completion</a> section of
this chapter for more details.</p>

</aside>

<h4 id="outline">Outline Navigation</h4>

<p>Markdown Mode defines keys for hierarchical navigation in headings and
lists.  When the point is in a list, they move between list items.
Otherwise, they move between headings.</p>

<ul>
  <li>Use <code>C-c C-n</code> and <code>C-c C-p</code> (<code>markdown-outline-previous</code> and
<code>markdown-outline-next</code>) to move to the next and previous visible
headings or list items <em>of any level</em>.</li>
  <li>Similarly, <code>C-c C-f</code> and <code>C-c C-b</code>
(<code>markdown-outline-previous-same-level</code> and <code>markdown-outline-next-same-level</code>)
move to the next and previous visible headings or list items
<em>at the same level</em> as the one at the point.</li>
  <li>Finally, <code>C-c C-u</code> (<code>markdown-outline-up</code>) will move up to the
parent heading or list item.</li>
</ul>

<aside class="tip blurb">
    <p>The outline navigation commands in <code>markdown-mode</code> (<code>C-c C-n</code>,
<code>C-c C-p</code>, <code>C-c C-f</code>, <code>C-c C-b</code>, and <code>C-c C-u</code>) are the same as in
<code>org-mode</code>, which are in turn based on those in <code>outline-minor-mode</code>.</p>

</aside>

<h4 id="leanpub-auto-movement-by-defun">Movement by Defun</h4>

<p>The usual Emacs commands can be used to move by defuns (top-level
major definitions), but in Markdown Mode, <strong>a defun is a section.</strong> As
usual, <code>C-M-a</code> (<code>beginning-of-defun</code>) will move the point to the
beginning of the current or preceding defun, <code>C-M-e</code> (<code>end-of-defun</code>)
will move to the end of the current or following defun, and <code>C-M-h</code>
(<code>mark-defun</code>) will mark the current defun.  To narrow
the buffer to show only the current section, use <code>C-x n d</code>
(<code>narrow-to-defun</code>) and to widen again, use <code>C-x n w</code> (<code>widen</code>) as
usual.</p>

<aside class="tip blurb">
    <p>Defuns in Emacs are major top-level definitions.  The name derives
from the Emacs Lisp <code>defun</code> macro for defining functions.  The
defun movement and marking commands in Markdown Mode (<code>C-M-a</code>,
<code>C-M-e</code>, and <code>C-M-h</code>) are the same as in Emacs more generally.
Since Markdown has no functions, Markdown Mode considers section
headings to be defuns.</p>

</aside>

<p>To include the complete subtree (including any subsections) when
marking and narrowing, Markdown Mode also defines <code>C-c C-M-h</code>
(<code>markdown-mark-subtree</code>) and <code>C-x n s</code>
(<code>markdown-narrow-to-subtree</code>).</p>

<h4 id="leanpub-auto-movement-by-page">Movement by Page</h4>

<p>Markdown Mode also re-defines the “page” movement and marking commands
in Emacs, since they aren’t otherwise useful in Markdown documents.
Elsewhere in Emacs, pages are defined by a regular expression given in
the <code>page-delimiter</code> variable, usually <code>^L</code> (control-L, the page break
control code).  Markdown Mode redefines a page to be a complete
top-level subtree, so you can navigate between top-level headings
using the standard Emacs page movement keys: <code>C-x [</code> and <code>C-x ]</code>
(<code>markdown-backward-page</code> and <code>markdown-forward-page</code>).  To
mark the current top-level subtree, use <code>C-x C-p</code>
(<code>markdown-mark-page</code>).  To narrow the buffer to show only the current
top-level subtree, use <code>C-x n p</code> (<code>markdown-narrow-to-page</code>) and to
widen again, use <code>C-x n w</code> (<code>widen</code>) as usual.</p>

<h4 id="leanpub-auto-visibility-cycling">Visibility Cycling</h4>

<p>Markdown Mode supports <code>org-mode</code>-style visibility cycling for
headings and sections.  There are two types of visibility cycling:
global and local.</p>

<p>Pressing <code>S-TAB</code> (<code>markdown-shifttab</code>) cycles <em>globally</em> between three
levels of visibility, as shown in the screenshot below:</p>

<ol class="numeric">
  <li>headings only (overview),</li>
  <li>top-level headings only (contents),</li>
  <li>all sections visible (show all).</li>
</ol>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/global-visibility.png" alt="Global Visibility Cycling" style="width: 100%;">
  <figcaption>Global Visibility Cycling</figcaption>
</figure>


<p>On the other hand, pressing <code>TAB</code> (<code>markdown-cycle</code>) while the point
is at a heading will cycle through three levels of visibility
<em>locally</em> for the current subtree:</p>

<ol class="numeric">
  <li>all subsections and sub-headings completely folded,</li>
  <li>child headings visible,</li>
  <li>all subsections and sub-headings fully visible.</li>
</ol>

<h4 id="leanpub-auto-subtree-editing">Subtree Editing</h4>

<p>Entire subtrees of ATX headings can be promoted and demoted with
<code>C-c &lt;left&gt;</code> and <code>C-c &lt;right&gt;</code> (<code>markdown-promote</code> and
<code>markdown-demote</code>).  Conveniently, these are the same keybindings used
for promotion and demotion of list items.  If the point is at a list
item, they operate on the list item.  Otherwise, they operate on the
current heading subtree.  Similarly, subtrees can be moved up and down
with <code>C-c &lt;up&gt;</code> and <code>C-c &lt;down&gt;</code> (<code>markdown-move-up</code> and
<code>markdown-move-down</code>).</p>

<aside class="warning blurb">
    <p>These commands are based on functions from <code>outline.el</code> that are
regular-expression-based, and so they currently do not work
properly if there are setext headings in the region.</p>

</aside>

<p>Note the following “boundary” behavior for promotion and demotion.
Any level-six headings will not be demoted further (i.e., they remain
at level six, since Markdown and HTML do not define more than six
levels of headings) and any level-one headings will be promoted away
entirely (i.e., the heading markup will be removed, since level-zero
headings are undefined).</p>

<h4 id="leanpub-auto-heading-customization">Heading Customization</h4>

<p>Markdown Mode distinguishes between <em>symmetric</em> and <em>asymmetric</em> atx
heading markup.  Symmetric headings have an equal number of hash marks
at the beginning and end of the line.  Asymmetric headings have only
leading hash marks.  Both are valid, so this is an aesthetic choice.
You can customize Markdown Mode to fit your preference by setting the
<code>markdown-asymmetric-header</code> variable.</p>

<dl>
  <dt><code>markdown-asymmetric-header</code></dt>
  <dd>
<code>nil</code> or <code>t</code>, default: <code>nil</code>.
    <p>Determines if atx heading style will be asymmetric.</p>

    <p>When <code>nil</code>, balanced markup will be inserted at the beginning and
end of the line around the heading title.</p>

    <figure class="code">
<div class="highlight"><pre><code></code>## Heading ##
</pre></div>

    </figure>

    <p>Set to a non-<code>nil</code> value to use asymmetric heading styling, placing
heading markup only at the beginning of the line.</p>

    <figure class="code">
<div class="highlight"><pre><code></code>## Heading
</pre></div>

    </figure>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-asymmetric-header</code> <code class="no">t</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
</dl>

<p>Markdown Mode also has the ability to scale the font sizes used for
headings in proportion to their importance (as in AUCTeX, for
instance).  To enable this, customize <code>markdown-header-scaling</code> or set
it in your init file.</p>

<dl>
  <dt><code>markdown-header-scaling</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>Determines whether Markdown Mode uses different font sizes for
headings of different levels.  Set to a non-<code>nil</code> value to inherit
from the <code>variable-pitch</code> for headings with font sizes that
correspond to the scaling factors in the
<code>markdown-header-scaling-values</code> list.</p>
  </dd>
  <dt><code>markdown-header-scaling-values</code></dt>
  <dd>List of floats, default: <code>(2.0 1.7 1.4 1.1 1.0 1.0)</code>.
    <p>List of six scaling values, relative to baseline, to use for
headings of levels one through six.  Only used when
<code>markdown-header-scaling</code> is non-<code>nil</code>.</p>
  </dd>
</dl>

<p>For finer control over the heading faces, Markdown Mode defines
separate heading faces for each heading level:</p>

<figure class="code">
<div class="highlight"><pre><code></code>markdown-header-face-1    markdown-header-face-4
markdown-header-face-2    markdown-header-face-5
markdown-header-face-3    markdown-header-face-6
</pre></div>

</figure>

<p>Each of these inherits from the common <code>markdown-header-face</code>.  So, to
change all faces (e.g., a common font family or color) you can
customize <code>markdown-header-face</code> directly.  To change the face used
for a specific heading level, customize that face individually.</p>

<aside class="tip blurb">
    <p><code>markdown-header-face</code> inherits from <code>variable-pitch</code> by default,
for contrast with the <code>default</code> face, which is a fixed width font by
default.  If you don’t like the appearance of headings on your
system, first ensure that you are setting the family of
<code>variable-pitch</code> to something that pairs well with your <code>default</code>
font.</p>

</aside>

<h3 id="leanpub-auto-paragraphs">
<span class="section-number">3.2 </span>Paragraphs</h3>

<p>A paragraph in Markdown is one or more consecutive lines of text
separated by one or more blank lines.  Normal paragraphs should not be
indented with spaces or tabs:</p>

<figure class="code">
<div class="highlight"><pre><code></code>This is a paragraph.  It has two sentences.

This is another paragraph.  It also has two sentences.
</pre></div>

</figure>

<h3 id="leanpub-auto-blockquotes">
<span class="section-number">3.3 </span>Blockquotes</h3>

<p>To produce a blockquote (<code>&lt;blockquote&gt;</code> in HTML), prefix each line
with a right angle bracket (<code>&gt;</code>), just as when quoting an email:</p>

<figure class="code">
<div class="highlight"><pre><code></code>&gt; This text will be enclosed in an HTML `&lt;blockquote&gt;` element.
</pre></div>

</figure>

<p>Blockquotes may be nested, like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code>&gt; Blockquote
&gt;
&gt; &gt; Nested blockquote
</pre></div>

</figure>

<p>To insert markup for a blockquote in Markdown Mode, use <code>C-c C-s q</code>
(<code>markdown-insert-blockquote</code>).  When <code>transient-mark-mode</code> is
enabled, this command adds blockquote markup to the region,
when active.  Otherwise, it simply inserts markup for an empty
blockquote and positions the point appropriately.  The appropriate
amount of indentation, if any, is calculated automatically given the
surrounding context, but may be adjusted later using the region
indentation commands described in the <a href="#indentation">Indentation</a>
section below.</p>

<p>If you want to specifically operate on the region, whether or not
<code>transient-mark-mode</code> and the region is active, you can use the
region-specific command <code>C-c C-s Q</code> (<code>markdown-blockquote-region</code>).</p>

<aside class="information blurb">
    <p>Notice that the keybinding for this command, <code>C-c C-s Q</code>, is
similar to <code>C-c C-s q</code> but the <code>Q</code> is uppercase.  This pattern is
also used with other paired or otherwise related commands in
Markdown Mode, such as atx and setext heading insertion.</p>

</aside>

<aside class="tip blurb">
    <p>The region-specific functions such as <code>markdown-blockquote-region</code>
are useful in some less obvious cases.  For example, yanking text
from the kill ring sets the mark at the beginning of the yanked
text and leaves the point at the end.  Therefore, even though the
region is not active (i.e., it is not highlighted) the region does
contain the yanked text and so <code>C-c C-s Q</code> will format it as a
blockquote.</p>

</aside>

<h3 id="leanpub-auto-lists">
<span class="section-number">3.4 </span>Lists</h3>

<p>To produce an unordered list (<code>&lt;ul&gt;</code> in HTML), prefix each line with a
list marker.  Valid list marker characters are asterisks (<code>*</code>),
hyphens (<code>-</code>), and plus signs (<code>+</code>):</p>

<figure class="code">
<div class="highlight"><pre><code></code>* An item in a bulleted (unordered) list
* Another item in a bulleted list
</pre></div>

</figure>

<p>Ordered lists (<code>&lt;ol&gt;</code> in HTML) are created by prefixing
each line with a number followed by a period:</p>

<figure class="code">
<div class="highlight"><pre><code></code>1. An item in an enumerated (ordered) list
2. Another item in an enumerated list
</pre></div>

</figure>

<p>To create a <em>nested list</em>, use four spaces to indent the markers of
subordinate items.  You may change list markers if you wish to
add more visual distinction.  Note that it is the marker indentation
that matters, not the whitespace following the marker.</p>

<figure class="code">
<div class="highlight"><pre><code></code>*   An item in a bulleted (unordered) list

    *   A sub-item in a nested list

1234567890
</pre></div>

</figure>

<aside class="tip blurb">
    <p>The four-space convention will show up again, for creating code
blocks.  For the broadest Markdown processor compatibility, it is
recommended to always use four spaces for indenting and nesting
elements.</p>

</aside>

<aside class="information blurb">
    <p><a href="https://daringfireball.net/2017/07/unordered_lists_in_markdown">John Gruber conducted a Twitter Poll</a> in July 2017 to ask which
list markers were most popular among Markdown users.  Out of 4,545
responses, the results were:</p>

  <ul>
    <li>Asterisk (<code>*</code>): 42%</li>
    <li>Hyphen (<code>-</code>): 54%</li>
    <li>Plus (<code>+</code>): 4%</li>
  </ul>

  <p>Gruber noted that he uses all three at times, and that different
characters can be used for different levels of nesting.</p>

</aside>

<h4 id="leanpub-auto-creating-and-editing-lists">Creating and Editing Lists</h4>

<p>New list items can be inserted with <code>M-RET</code> or <code>C-c C-j</code>
(<code>markdown-insert-list-item</code>).  This command determines the
appropriate marker (one of the possible unordered list markers or the
next number in sequence for an ordered list) and indentation level by
examining nearby list items.  If there is no list before or after the
point, it starts a new list.</p>

<p>As with heading insertion, you may prefix <code>markdown-insert-list-item</code>
by <code>C-u</code> to decrease the indentation by one level.  Prefix this
command by <code>C-u C-u</code> to increase the indentation by one level.</p>

<p>Existing list items (and their nested sub-items) can be moved up and
down with <code>C-c &lt;up&gt;</code> and <code>C-c &lt;down&gt;</code> (<code>markdown-move-up</code> and
<code>markdown-move-down</code>).  List items can also be indented and outdented
with <code>C-c &lt;right&gt;</code> and <code>C-c &lt;left&gt;</code> (<code>markdown-demote</code> and
<code>markdown-promote</code>).</p>

<h4 id="leanpub-auto-list-navigation">List Navigation</h4>

<p>The same keys used for heading outline navigation (<code>C-c C-n</code>,
<code>C-c C-p</code>, <code>C-c C-f</code>, <code>C-c C-b</code>, and <code>C-c C-u</code>) also work inside
nested lists.  See the <a href="#outline">Outline Navigation</a> section for details.</p>

<h4 id="leanpub-auto-list-customization">List Customization</h4>

<p>You can customize the default unordered list item marker and spacing
by setting the variable <code>markdown-unordered-list-item-prefix</code>.  Also,
although it is not recommended to do so, if needed you can change the
default indentation amount by setting <code>markdown-list-indent-width</code>.</p>

<dl>
  <dt><code>markdown-unordered-list-item-prefix</code></dt>
  <dd>String, default: “  * ”.
    <p>String to be inserted to create an unordered list item.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-unordered-list-item-prefix</code> <code class="s">"*   "</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-list-indent-width</code></dt>
  <dd>Integer, default: <code>4</code>.
    <p>Depth of indentation for lists when inserting, promoting, and
demoting list items.</p>
  </dd>
</dl>

<h3 id="leanpub-auto-paragraph--block-movement">
<span class="section-number">3.5 </span>Paragraph &amp; Block Movement</h3>

<p>For the purposes of defining movement and marking commands, “paragraphs”
in Markdown Mode include not only regular paragraphs as described
above, but also paragraphs inside blockquotes, individual list items,
headings, etc.</p>

<p>To move the point from one paragraph to another, use
<code>M-{</code> and <code>M-}</code> (<code>markdown-backward-paragraph</code> and
<code>markdown-forward-paragraph</code>).  By default, these keys are bound to
<code>forward-paragraph</code> and <code>backward-paragraph</code>, but the built-in Emacs
functions are based on simple regular expressions that fail in
Markdown files.  To mark a paragraph, you can use
<code>M-h</code> (<code>markdown-mark-paragraph</code>).</p>

<p>Markdown Mode also defines “block” movement commands, which are larger
in scope and may contain multiple “paragraphs” in some cases.  Blocks
are considered to be entire lists, entire code blocks, and entire
blockquotes.  To move backward or forward by one block use
<code>C-M-{</code> and <code>C-M-}</code> (<code>markdown-beginning-block</code> and
<code>markdown-end-of-block</code>).  To mark a block, use <code>C-c M-h</code>
(<code>markdown-mark-block</code>).  To narrow the buffer to the current
block, use <code>C-x n b</code> (<code>markdown-narrow-to-block</code>) and to
widen again use <code>C-x n w</code> (<code>widen</code>).</p>

<p>To compare paragraph and block movement, consider some specific
examples.  In terms of list items, paragraph movement moves
item-by-item, regardless of the list item level.  On the other hand,
block movement moves across the entire list.  Suppose the point is at
the block, as in the following example:</p>

<figure class="code">
<div class="highlight"><pre><code></code>Paragraph

- item 1
- item 2
- item 3
█
</pre></div>

</figure>

<p>Moving backwards by “paragraph” with <code>M-{</code> first moves the point back
to the marker for item 3, then back to the marker for item 2, and so
on.  Moving backwards by one “block” with <code>C-M-{</code>, on the other hand,
moves the point immediately to the marker for item 1.</p>

<p>Next, consider a blockquote with multiple paragraphs as in the following
example:</p>

<figure class="code">
<div class="highlight"><pre><code></code>Regular paragraph

&gt; blockquote paragraph 1
&gt;
&gt; blockquote paragraph 2.
█
</pre></div>

</figure>

<p>Moving backward by one paragraph leaves the point at the <code>&gt;</code> before
blockquote paragraph 2 while moving backward by one block moves over
the entire blockquote and leaves the point at the <code>&gt;</code> before
blockquote paragraph 1.</p>

<h3 id="indentation">
<span class="section-number">3.6 </span>Indentation</h3>

<h4 id="leanpub-auto-the-tab-key">The Tab Key</h4>

<p>Markdown Mode attempts to be flexible in how it handles indentation.
When you press <code>TAB</code> (<code>markdown-cycle</code>) repeatedly, the point will
cycle through several possible indentation levels corresponding to
locations you might have in mind.  For example, you may want to start
a new list item, continue a list item with hanging indentation, indent
for a nested <code>&lt;pre&gt;</code> block, and so on.</p>

<figure class="code">
<div class="highlight"><pre><code></code>- list item
    - nested list item
█
5   1 2 3   4
</pre></div>

</figure>

<p>The numbers in the block above represent the indentation positions
that are cycled through following a nested list when the point is at
the block above position 5.  In order, these positions would be appropriate
for 1) starting a new nested list item, 2) continuing the nested list
item with indentation past the marker, 3) starting a list item with a
deeper level of nesting, 4) adding a nested indented code block, and
5) starting a new list item at the top level of the list.</p>

<p>If you so desire, you can fully customize this behavior by writing
your own indentation function and setting the variable
<code>markdown-indent-function</code> appropriately.</p>

<dl>
  <dt><code>markdown-indent-function</code></dt>
  <dd>Function, default: <code>markdown-indent-line</code>.
    <p>Function to use for automatic indentation.</p>
  </dd>
</dl>

<h4 id="leanpub-auto-the-backspace-key">The Backspace Key</h4>

<p>When <code>DEL</code> or <code>&lt;backspace&gt;</code> (<code>markdown-outdent-or-delete</code>) is pressed
at the beginning of the non-whitespace portion of a line, text will be
outdented similarly, but in the opposite direction as indentation.</p>

<h4 id="leanpub-auto-the-return-key">The Return Key</h4>

<p>When the point is at the end of a (potentially nested) list item, code
block, etc. and you press <code>RET</code> (<code>markdown-enter-key</code>), what happens
next depends on the value of <code>markdown-indent-on-enter</code>.  As an example,
consider the following nested list.</p>

<figure class="code">
<div class="highlight"><pre><code></code>- list item
    - nested list item█
</pre></div>

</figure>

<p>When <code>markdown-indent-on-enter</code> is <code>nil</code>, the point will move to
column 0 of the following line:</p>

<figure class="code">
<div class="highlight"><pre><code></code>- list item
    - nested list item
█
</pre></div>

</figure>

<p>When <code>markdown-indent-on-enter</code> is set to <code>t</code>, the point will be
positioned for continuing your nested list.</p>

<figure class="code">
<div class="highlight"><pre><code></code>- list item
    - nested list item
    █
</pre></div>

</figure>

<p>In this scenario, if you wanted to continue your existing (now
line-wrapped) list item with hanging indentation, simply press <code>TAB</code>
to indent to the next logical position.</p>

<figure class="code">
<div class="highlight"><pre><code></code>- list item
    - nested list item
      █
</pre></div>

</figure>

<p>Finally, when <code>markdown-indent-on-enter</code> is set to
<code>indent-and-new-item</code>, Markdown Mode will automatically
insert a new list item.  With this setting, pressing <code>RET</code> again
removes the empty list item and leaves a blank line.  If you want
to insert a single literal newline, you can use <code>quoted-insert</code>
via <code>C-q C-j</code>.</p>

<figure class="code">
<div class="highlight"><pre><code></code>- list item
    - nested list item
    - █
</pre></div>

</figure>

<dl>
  <dt><code>markdown-indent-on-enter</code></dt>
  <dd>
<code>nil</code>, <code>t</code>, or <code>indent-and-new-item</code>, default: <code>t</code>.
    <p>When non-<code>nil</code>, automatically indent new lines when the enter key
is pressed.  When set to <code>indent-and-new-item</code>, additionally
insert a new list item marker if the point was in a list item.</p>
  </dd>
</dl>

<h4 id="leanpub-auto-shifting-the-region">Shifting the Region</h4>

<p>Text in the region can be outdented or indented as a single block using
<code>C-c &lt;</code> and <code>C-c &gt;</code>
(<code>markdown-outdent-region</code> and <code>markdown-indent-region</code>).
Text in the region will be shifted to the next indentation point
calculated in the current context, as discussed above.</p>

<aside class="tip blurb">
    <p>The region indent and outdent keybindings are the same as those for
the corresponding commands in <code>python-mode</code>.</p>

</aside>

<h3 id="leanpub-auto-code-blocks">
<span class="section-number">3.7 </span>Code Blocks</h3>

<p>Code blocks in Markdown are formatted by prefixing each line with four
spaces:</p>

<figure class="code">
<div class="highlight"><pre><code></code>    #include &lt;stdio.h&gt;
    int main()
    {
        printf("hello, world\n");
        return 0;
    }

1234567890
</pre></div>

</figure>

<p>To begin a new code block press <code>C-c C-s p</code> (<code>markdown-insert-pre</code>),
where <code>p</code> refers to the HTML <code>&lt;pre&gt;</code> tag used to format such a block.
When <code>transient-mark-mode</code> is enabled, this command also works on the
region, when active, or begins a new code block otherwise.</p>

<p>If you want to specifically operate on the region, whether it is
highlighted with <code>transient-mark-mode</code> or not, you can use the
region-specific command <code>C-c C-s P</code> (<code>markdown-pre-region</code>).
So, as with other commands, the lowercase and uppercase keybindings
are related.</p>

<aside class="tip blurb">
    <p>Region-specific commands such as this one are useful when you have
just yanked some text and want to format it, say, as a code block.
Upon yanking, the mark moved to the beginning of the yanked text
and so the region is already set appropriately.</p>

</aside>

<aside class="information blurb">
    <p>In addition to indented code blocks, or pre blocks, Markdown Mode
also supports several variations referred to as fenced code blocks.
Rather than being indented, fenced code blocks are surrounded above
and below by strings of tildes or backquotes.  We will return to
fenced code blocks later, in the <a href="#extensions">Extensions</a> chapter.</p>

</aside>

<h3 id="leanpub-auto-horizontal-rules">
<span class="section-number">3.8 </span>Horizontal Rules</h3>

<p>Horizontal rules, corresponding to <code>&lt;hr&gt;</code> tags in HTML, are created in
Markdown by placing three or more hyphens, asterisks, or underscores
on a line by themselves.  You may use spaces between the characters if
you prefer, but the characters cannot be mixed.  Each of the following
lines will produce a horizontal rule:</p>

<figure class="code">
<div class="highlight"><pre><code></code>---
- - -
* * *
________________________________________
</pre></div>

</figure>

<p>To insert a horizontal rule, press <code>C-c C-s -</code> (<code>markdown-insert-hr</code>).
Markdown Mode allows
you to define several horizontal rules of decreasing prominence in a
list variable named <code>markdown-hr-strings</code>.  By default, this
command inserts the first string in <code>markdown-hr-strings</code>—the most
prominent one.  With a <code>C-u</code> prefix, insert the last string.  With a
numeric prefix <code>N</code>, insert the string in position <code>N</code> (starting at 1).
The list of strings inserted by Markdown Mode can be customized by
redefining the variable <code>markdown-hr-strings</code>.</p>

<dl>
  <dt><code>markdown-hr-strings</code></dt>
  <dd>List of strings.
    <p>Strings to use when inserting horizontal rules.</p>
  </dd>
</dl>

<aside class="warning blurb">
    <p>Different strings will not be distinguished when converted to
HTML—they will all be converted to <code>&lt;hr&gt;</code> tags—but they may add visual
distinction and style to plain text documents.  To maintain notions
of promotion and demotion, these should be ordered from largest to
smallest.</p>

</aside>

<aside class="tip blurb">
    <p>To insert a specific horizontal rule from the <code>markdown-hr-strings</code>
list, use a prefix argument to <code>C-c C-s -</code>, as in <code>C-# C-c C-s -</code>
where <code>#</code> is the index of the string in the list.</p>

</aside>

<aside class="information blurb">
    <p>In the default <code>markdown-hr-strings</code> list, the longest two strings
are 79 characters long, rather than 80 characters long, to prevent
a line wrap indicator from appearing in the right fringe when the
window is exactly 80 characters wide.  However, the list is fully
customizable and if you prefer an 80-character-wide string you can
set this variable in your local configuration.</p>

</aside>

<h3 id="leanpub-auto-emphasis-italic--bold">
<span class="section-number">3.9 </span>Emphasis: Italic &amp; Bold</h3>

<p>To emphasize text in Markdown, surround it with asterisks or
underscores.  For <em>italics</em>, use single asterisks or underscores:</p>

<figure class="code">
<div class="highlight"><pre><code></code>*italic* or _italic_
</pre></div>

</figure>

<p>Similarly, enclose <strong>bold</strong> text between two asterisks or two
underscores:</p>

<figure class="code">
<div class="highlight"><pre><code></code>**bold** or __bold__
</pre></div>

</figure>

<p>In Markdown Mode, <code>C-c C-s i</code> (<code>markdown-insert-italic</code>) inserts
markup to make the region or a word italic.  If <code>transient-mark-mode</code>
is on and there is an active region, it wraps the region in italic
markup.  Else, if the point is at a non-italic word, make the word
italic, or if the point is at an italic word or phrase, remove
(toggle) the markup.  Otherwise, simply insert italic markup and place
the point in the middle.</p>

<p>Similarly, use <code>C-c C-s b</code> (<code>markdown-insert-bold</code>) for bold text.
This command works in exactly the same way as
<code>markdown-insert-italic</code>.</p>

<p>Like the three possible list markers, the use of asterisks or
underscores for italic or bold text is a personal preference in
Markdown.  Markdown Mode lets you customize the default choice
for inserting new markup via two variables described below.</p>

<aside class="information blurb">
    <p>Brett Terpstra, in his <a href="http://brettterpstra.com/2015/08/24/write-better-markdown/">Write better Markdown</a> style
guide, recommends maintaining a consistent style with respect to
asterisks and underscores throughout a document.  For example, you
might always use underscores for italics and asterisks for bold.</p>

</aside>

<aside class="tip blurb">
    <p>You can also <em>toggle</em> between asterisks and underscores using the
promotion and demotion commands, <code>C-c C--</code> and <code>C-c C-=</code>
(<code>markdown-promote</code> and <code>markdown-demote</code>).</p>

</aside>

<aside class="warning blurb">
    <p>Markdown processors differ as to how they handle inter-word
underscores.  When Markdown.pl encounters <code>_dis_functional</code>, it
assumes you intend to italicize “dis”.  However, if you are writing
technical documentation, perhaps you have a variable named
<code>state_space_dimension</code>.  Unless you format that as inline code,
then the middle word—<code>space</code>—would become italicized.  GitHub Flavored
Markdown re-defines this behavior so that inter-word underscores do
not trigger italics.  Markdown Mode includes a special
mode, <a href="#gfm">GitHub Flavored Markdown Mode</a> or <code>gfm-mode</code>, and among
other differences, it uses the GitHub convention for underscores.
This mode is described in the section on <a href="#gfm">GitHub Flavored Markdown</a>
in the <a href="#extensions">Extensions</a> chapter.</p>

</aside>

<dl>
  <dt><code>markdown-italic-underscore</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>Set to a non-<code>nil</code> value to use underscores instead of asterisks
when inserting markup for italic text.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-italic-underscore</code> <code class="no">t</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-bold-underscore</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>Set to a non-<code>nil</code> value to use two underscores instead of two
asterisks when inserting markup for bold text.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-bold-underscore</code> <code class="no">nil</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
</dl>

<h3 id="leanpub-auto-inline-code">
<span class="section-number">3.10 </span>Inline Code</h3>

<p>To mark up inline source code, for command names, file names, etc.,
place the text between backquotes (<code>`</code>) like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code>This is inline code: `printf("hello, world\n");`
</pre></div>

</figure>

<p>To insert inline code in Markdown Mode, use <code>C-c C-s c</code>
(<code>markdown-insert-code</code>).  This command works for both insertion and
toggling and it uses the region when appropriate, just like the
bold and italic commands.</p>

<aside class="tip blurb">
    <p>Because Markdown is often used for technical documentation (e.g.,
README files on GitHub), Markdown Mode also provides <code>C-c C-s k</code>
(<code>markdown-insert-kbd</code>) for inserting HTML <code>&lt;kbd&gt;</code> tags, for which
there is no Markdown equivalent.  In terms of font lock, <code>&lt;kbd&gt;</code>
tags are treated like inline code but of course they may be styled
differently on websites and elsewhere.</p>

</aside>

<h3 id="leanpub-auto-links--images">
<span class="section-number">3.11 </span>Links &amp; Images</h3>

<p>To create simple links, you can simply place a URL or email address
inside angle brackets:</p>

<figure class="code">
<div class="highlight"><pre><code></code>&lt;https://www.gnu.org/software/emacs/&gt;
&lt;bug-gnu-emacs@gnu.org&gt;
</pre></div>

</figure>

<p>To create hyperlinks—text with an associated URL—place the link
text in square brackets followed by the URL in parentheses:</p>

<figure class="code">
<div class="highlight"><pre><code></code>[Link text](http://link.url/)
</pre></div>

</figure>

<p>Optionally, you can add “title text” (for the HTML <code>title</code> attribute)
to the link which will appear when the user’s mouse pointer hovers
over the link:</p>

<figure class="code">
<div class="highlight"><pre><code></code>[Link text](http://link.url/ "Title text")
</pre></div>

</figure>

<p>A similar syntax is used for images: just add an exclamation point
(<code>!</code>) before the square bracket.  There is no equivalent of link text
for images, so instead the text in square brackets will be used as the
“alt text” (for the HTML <code>alt</code> attribute):</p>

<figure class="code">
<div class="highlight"><pre><code></code>![Alt text](http://link.url/image.jpg "Title text")
</pre></div>

</figure>

<p>In Markdown Mode, links of the above form are referred to as “inline
links” because the URL is written out in full inline in the Markdown
text.  On the other hand, “reference links” allow you to keep the text
clean and define the URLs later:</p>

<figure class="code">
<div class="highlight"><pre><code></code>You can define short reference link like this:
[link text here][1]

[1]: http://link.url/

You can still include a title, like this:
[link text here][ref]

[ref]: http://link.url/ "Title text"

Finally, you can use implicitly defined reference links
where the reference label is the same as the link text:
[link text][]

[link text]: http://link.url/
</pre></div>

</figure>

<h4 id="leanpub-auto-inserting-links--images">Inserting Links &amp; Images</h4>

<p>For links, <code>C-c C-l</code> (<code>markdown-insert-link</code>) is the general command
for inserting new link markup or editing existing link markup
interactively.  This command can be used to insert links of any form:
either inline links, reference links, or plain URLs in angle brackets.
The URL or reference label, link text, and optional title are
provided through a series of prompts.  The type of link is determined
by which values are provided:</p>

<ul>
  <li>Given a URL and link text, insert an inline link:
<code>[text](url)</code>.</li>
  <li>Given a <code>[reference]</code> and link text, insert
a reference link: <code>[text][reference]</code>.</li>
  <li>Given only link text, insert an implicit reference link:
<code>[text][]</code>.</li>
  <li>Given only a URL, insert a plain URL:
<code>&lt;url&gt;</code>.</li>
</ul>

<p>Similarly, <code>C-c C-i</code> (<code>markdown-insert-image</code>) is a general command for
inserting or editing image markup interactively.  As with the link
insertion command, through a series of interactive prompts you can insert
either an inline or reference image:</p>

<ul>
  <li>Given a URL and alt text, insert an inline image:
<code>![alt](url)</code>.</li>
  <li>Given a <code>[reference]</code> and alt text, insert a reference image:
<code>![alt][reference]</code>.</li>
</ul>

<p>If there is an existing link or image at the point, these commands will
edit the existing markup rather than inserting new markup.  Otherwise,
if <code>transient-mark-mode</code> is on and there is an active region, these
commands use the region as either the default URL (if it seems to be a
URL) or link text value otherwise.  In that case, the region will be
replaced by the link.</p>

<p>If a reference label is given that is not yet defined, you
will be prompted for the URL and optional title and the
reference definition will be inserted according to the value of
<code>markdown-reference-location</code>.  If a title is given, it will be
added to the end of the reference definition and will be used
to populate the HTML <code>title</code> attribute when exported.</p>

<p>You can use <code>C-c C-d</code> (<code>markdown-do</code>) to jump between reference labels
and reference definitions.  If more than one link uses the same
reference label, a window will be shown with clickable buttons
for jumping to each link.  Pressing <code>TAB</code> or <code>S-TAB</code> cycles between
buttons in this window.</p>

<aside class="tip blurb">
    <p>Note that interactive functions <code>C-c C-l</code> and <code>C-c C-i</code> can be used
to convert links and images from one type to another (inline,
reference, or plain URL) by selectively adding or removing
properties via the interactive prompts.</p>

</aside>

<aside class="exercise blurb">
    <p>As an example, suppose you have an inline link of the form
<code>[text](url)</code> and want to convert it to a plain URL link as in
<code>&lt;url&gt;</code>.  If you press <code>C-c C-l</code> and leave the URL as is when prompted
but remove the link text, then a plain URL, as in <code>&lt;url&gt;</code>, will be
inserted in place of the inline link.  If you removed the URL
instead, then you would be prompted for a reference label.</p>

</aside>

<h4 id="leanpub-auto-following-links">Following Links</h4>

<p>Links in Markdown Mode are clickable and clicking one will open the URL in
the default browser.  To follow a link using the keyboard, press <code>C-c C-o</code>
(<code>markdown-follow-thing-at-point</code>) when the point is on an inline or
reference link.  Use <code>M-p</code> and <code>M-n</code>
(<code>markdown-previous-link</code> and <code>markdown-next-link</code>) to quickly jump to
the previous or next link of any type.</p>

<h4 id="url-hiding">URL Hiding</h4>

<p>Markdown Mode makes it possible to hide URLs for inline and reference
links, which can make your text more readable.  This feature can be
toggled as needed using <code>C-c C-x C-l</code> (<code>markdown-toggle-url-hiding</code>)
or from the Markdown menu.  When URL hiding is enabled, the URL
components of links will be displayed as a single, customizable
character (<code>∞</code> by default).  That is, URLs will appear as <code>[link](∞)</code>
instead of <code>[link](long/url)</code>.</p>

<p>URL hiding is accomplished in Emacs using <em>composition</em>, so the URLs
are still part of the buffer.  To change the placeholder (composition)
character used, set the variable <code>markdown-url-compose-char</code>.</p>

<p>When URL hiding is enabled, the link properties will be displayed in
the minibuffer along with a hint to use <code>C-c C-l</code> for editing the
link.  You can also edit a URL directly by deleting the final
parenthesis, which disables fontification of the link and thus removes
the composition property.  Finally, you can also hover your mouse
pointer over the link text to see the URL.</p>

<dl>
  <dt><code>markdown-hide-urls</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>Determines whether URL and reference labels are hidden for inline
and reference links.  This can be toggled interactively using
<code>C-c C-x C-l</code> (<code>markdown-toggle-url-hiding</code>).</p>
  </dd>
  <dt><code>markdown-url-compose-char</code></dt>
  <dd>Character, default: <code>∞</code>.
    <p>Placeholder character for hidden URLs.  Depending on your font,
some other good choices are <code>…</code> and <code>#</code>.</p>
  </dd>
</dl>

<aside class="tip blurb">
    <p>The interactive link and image commands <code>C-c C-l</code> and <code>C-c C-i</code>
are especially useful when markup or URL hiding is enabled, in
which case it is more difficult to edit URLs.</p>

</aside>

<h4 id="leanpub-auto-link--image-customizations">Link &amp; Image Customizations</h4>

<p>Certain aspects of link and image insertion can be customized, such as
the default location of reference links and the protocol schemes of URLs
that should be recognized automatically.</p>

<dl>
  <dt><code>markdown-reference-location</code></dt>
  <dd>
<code>immediately</code>, <code>header</code>, <code>subtree</code>, or <code>end</code>, default: <code>header</code>.
    <p>Determines where to insert reference definitions.  The possible
locations are the end of the document (<code>end</code>), after the current
block (<code>immediately</code>), the end of the current subtree (<code>subtree</code>),
or before the next heading (<code>header</code>).</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-reference-location</code> <code class="ss">'end</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-uri-types</code></dt>
  <dd>List of strings.
    <p>A list of protocol schemes (“http”, “ftp”, etc.) for URLs that
Markdown Mode should highlight.</p>
  </dd>
</dl>

<h4 id="leanpub-auto-inline-image-display">Inline Image Display</h4>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/inline-images.png" alt="Inline Image Display in Markdown Mode" style="width: 100%;">
  <figcaption>Inline Image Display in Markdown Mode</figcaption>
</figure>


<p>Local images associated with image links may be displayed inline in
the buffer by pressing
<code>C-c C-x C-i</code> or <code>M-x markdown-toggle-inline-images</code>.
This is a toggle command, so pressing this again will remove inline
images.</p>

<h3 id="leanpub-auto-line-breaks">
<span class="section-number">3.12 </span>Line Breaks</h3>

<p>In Markdown, whitespace at the end of a line is meaningful.  Adding
two trailing spaces at the end of a line creates a hard line break.
Markdown Mode highlights these spaces to draw attention to possibly
spurious whitespace.  Markdown Mode also respects hard line breaks
when filling paragraphs.</p>

<h3 id="leanpub-auto-killing-elements">
<span class="section-number">3.13 </span>Killing Elements</h3>

<p>Press <code>C-c C-k</code> (<code>markdown-kill-thing-at-point</code>) to kill the thing at
point and add the most important text, without markup, to the kill
ring.  Possible entities to kill include (roughly in order of
precedence): inline code, headings, horizontal rules, links (adds the
link text to kill ring), images (adds the alt text to kill ring),
plain URLs, email addresses, bold, italics, reference definitions
(adds URL to kill ring), footnote markers and text (kills both the
marker and text, adds text to kill ring), and list items.  See the
following table for a summary.</p>

<table>
  <thead>
    <tr>
      <th>Killed Entity</th>
      <th>Kill Ring</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>`code`</code></td>
      <td>“code”</td>
    </tr>
    <tr>
      <td><code># Heading</code></td>
      <td>“Heading”</td>
    </tr>
    <tr>
      <td><code>-----</code></td>
      <td><code>nil</code></td>
    </tr>
    <tr>
      <td><code>[text](url)</code></td>
      <td>“text”</td>
    </tr>
    <tr>
      <td><code>[text][ref]</code></td>
      <td>“text”</td>
    </tr>
    <tr>
      <td><code>![alt](url)</code></td>
      <td>“alt”</td>
    </tr>
    <tr>
      <td><code>![alt][ref]</code></td>
      <td>“alt”</td>
    </tr>
    <tr>
      <td><code>&lt;url&gt;</code></td>
      <td>“url”</td>
    </tr>
    <tr>
      <td><code>_text_</code></td>
      <td>“text”</td>
    </tr>
    <tr>
      <td><code>**text**</code></td>
      <td>“text”</td>
    </tr>
    <tr>
      <td><code>[ref]: url</code></td>
      <td>“url”</td>
    </tr>
    <tr>
      <td>
<code>[^fn]</code>, <code>[^fn]: footnote</code>
</td>
      <td>“footnote”</td>
    </tr>
    <tr>
      <td><code>* List item</code></td>
      <td>“List item”</td>
    </tr>
  </tbody>

</table>

<h3 id="leanpub-auto-markdown-do">
<span class="section-number">3.14 </span>Markdown Do</h3>

<p>Markdown Mode defines <code>C-c C-d</code> (<code>markdown-do</code>), a command for doing
something sensible with the object at the point.  Depending on the
context, it does the following:</p>

<ul>
  <li>Jumps between reference links and reference definitions.</li>
  <li>Jumps between footnote markers and footnote text.</li>
  <li>Toggles the completion status of GFM task list items (checkboxes).</li>
</ul>

<aside class="information blurb">
    <p>The Markdown Do command has evolved over the past three versions of
Markdown Mode.  It derives from a previous command named
<code>markdown-jump</code>, which was previously bound to <code>C-c C-j</code> in
Markdown Mode 2.1.  It was later moved to <code>C-c C-l</code>
in Markdown Mode 2.2 to allow using <code>C-c C-j</code> (in addition
to <code>M-RET</code>) for inserting list items, as in AUCTeX mode.
In Markdown Mode 2.3, this command has been imbued with additional
functionality, rebranded as <code>markdown-do</code>, and moved to <code>C-c C-d</code>
to make way for the new interactive link editing command <code>C-c C-l</code>.</p>

</aside>

<h3 id="leanpub-auto-markup-promotion--demotion">
<span class="section-number">3.15 </span>Markup Promotion &amp; Demotion</h3>

<p>Markdown Mode allows certain markup (headings, for example) to be
<em>promoted</em> and <em>demoted</em>.  Press <code>C-c C--</code> or <code>C-c &lt;left&gt;</code>
(<code>markdown-promote</code>) to promote the element at the point if possible.
Similarly, <code>C-c C-=</code> or <code>C-c &lt;right&gt;</code> (<code>markdown-demote</code>) to demote
the element at the point.</p>

<p>Headings, horizontal rules, and list items can be promoted and
demoted, as well as bold and italic text.  For headings, promotion
means <em>decreasing</em> the level (i.e., from <code>&lt;h2&gt;</code> to <code>&lt;h1&gt;</code>) while
demotion means <em>increasing</em> the level (i.e., from <code>&lt;h2&gt;</code> to <code>&lt;h3&gt;</code>).
For horizontal rules, promotion and demotion mean moving backward or
forward through the <code>markdown-hr-strings</code> list.  For bold and italic
text, promotion and demotion mean switching the markup from underscores
to asterisks and back.</p>

<aside class="tip blurb">
    <p>To promote or demote markup at the point, where applicable, use
<code>C-c C--</code> and <code>C-c C-=</code>.  To remember the promotion and demotion
commands, note that <code>-</code> is for decreasing the level, and <code>=</code> (on
the same key as <code>+</code>) is for increasing the level.  Similarly, the
left and right arrow keys indicate the direction in which the atx
heading markup will move when promoting or demoting.</p>

</aside>

<aside class="tip blurb">
    <p>You can change the level of a heading level two ways:</p>

  <ol class="numeric">
    <li>Using markup cycling, with either <code>C-c C--</code> and <code>C-c C-=</code> or the
alternatives <code>C-c &lt;left&gt;</code> and <code>C-c &lt;right&gt;</code>.</li>
    <li>By re-issuing a heading insertion command when the point is at a
heading.  For example, <code>C-c C-s 4</code> will replace the current heading
(of any level) with a level-four heading.</li>
  </ol>

</aside>

<h3 id="completion">
<span class="section-number">3.16 </span>Markup Completion</h3>

<p><em>Complete markup</em> refers to markup in normalized form.  This means,
for example, that the underlined portion of a setext heading is the same
length as the heading text, or that the number of leading and trailing
hash marks of an atx heading are equal and that there is no extra
whitespace.  To complete any incomplete markup at the point, press
<code>C-c C-]</code> (<code>markdown-complete</code>).</p>

<aside class="exercise blurb">
    <p>Suppose a buffer contains the following headings, one with an
underline that is too short and another with extra whitespace and
a missing hash mark:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>Heading 1
===

##  Heading 2 #
</pre></div>

  </figure>

  <p>Markup completion via <code>C-c C-]</code> will adjust them as follows:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>Heading 1
=========

## Heading 2 ##
</pre></div>

  </figure>

</aside>

<h3 id="leanpub-auto-markdown-maintenance-commands">
<span class="section-number">3.17 </span>Markdown Maintenance Commands</h3>

<p>Markdown Mode also provides some <em>global</em> maintenance commands under the
<code>C-c C-c</code> prefix for checking references, cleaning up list numbers,
and completing markup in the buffer.</p>

<dl>
  <dt><code>C-c C-c c (markdown-check-refs)</code></dt>
  <dd>Checks the buffer for undefined references.  If there are any, a
small buffer will open with a list of undefined references and the
line numbers on which they appear.  Selecting a reference from
this list and pressing <code>RET</code> will insert an empty reference
definition at the end of the buffer.  Selecting the line number
instead will move the point to the location of the undefined
reference.</dd>
  <dt><code>C-c C-c n (markdown-cleanup-list-numbers)</code></dt>
  <dd>Renumbers any ordered lists in the buffer that are out of
sequence.  Note that the sequence is not important for rendering
HTML—a list with numbers <code>1.</code>, <code>1.</code>, …, <code>1.</code> is perfectly
fine—but this command is useful if you prefer to also maintain
accurate plain text numbering.</dd>
  <dt><code>C-c C-c ] (markdown-complete-buffer)</code></dt>
  <dd>Completes all heading markup and normalizes all horizontal rules
in the buffer.</dd>
</dl>

<div class="scene-break stars">*    *    *</div>
<h2 id="extensions">
<span class="section-number">4. </span>Extensions</h2>

<h3 id="leanpub-auto-fenced-code-blocks">
<span class="section-number">4.1 </span>Fenced Code Blocks</h3>

<p>In addition to indented code blocks, Markdown Mode also supports
<em>fenced code blocks</em>.  Although fenced code blocks are not universally
supported by all Markdown processors, a primary advantage is that they
allow authors to indicate the name of the language of the source code
contained within, to assist with syntax highlighting and CSS styling.
They also remove the need to maintain the four-space leading
indentation, which can make editing code blocks more difficult.</p>

<h4 id="leanpub-auto-gfm-code-blocks">GFM Code Blocks</h4>

<p>The first type of fenced code blocks supported by Markdown Mode are those
used by <a href="http://github.github.com/github-flavored-markdown/">GitHub-Flavored Markdown (GFM)</a>.  These blocks begin and end
with three consecutive backquotes on separate lines.  After the
opening three backquotes, you may give an optional language
identifier, optionally separated by whitespace.  These are referred to in
Markdown Mode simply as GFM code blocks:</p>

<figure class="code">
<div class="highlight"><pre><code></code>```
a one-line code block
```

```python
print("hello, world")
```

``` Ruby
puts("hello, world")
```
</pre></div>

</figure>

<p>To insert a GFM code block interactively in Markdown Mode, press
<code>C-c C-s C</code> (<code>markdown-insert-gfm-code-block</code>).  You will be presented
with a minibuffer prompt asking for an optional programming language name.
Markdown Mode includes a large list of known languages to select from.
The default value will be the most recently used language.</p>

<p>The GFM programming language prompt uses <code>completing-read</code>, which has
several useful keybindings such as <code>M-n</code> and <code>M-p</code> to select the next
or previous elements and <code>M-s</code> and <code>M-r</code> to select the next or
previous elements matching a partially complete string.</p>

<aside class="tip blurb">
    <p>Since it uses <code>completing-read</code>, programming language selection
will also work with <code>ido</code>, <code>ivy</code>, and <code>helm</code>.</p>

</aside>

<p>Another way to insert a GFM code block is to use the <em>electric
backquote</em> feature, which is enabled by default.  When this setting is
enabled, pressing the backquote key (<code>`</code>) three times triggers
<code>markdown-insert-gfm-code-block</code> automatically.  At present, this
feature is only enabled in <code>gfm-mode</code>.</p>

<dl>
  <dt><code>markdown-gfm-use-electric-backquote</code></dt>
  <dd>Boolean, default: <code>t</code>.
    <p>When non-<code>nil</code>, trigger interactive insertion of GFM code blocks
when the backquote key is pressed three times.</p>
  </dd>
</dl>

<p>Additionally, you can augment the list of known language names by
setting <code>markdown-gfm-additional-languages</code> and you can indicate a
preference for lowercase language identifiers with
<code>markdown-gfm-downcase-languages</code>.</p>

<dl>
  <dt><code>markdown-gfm-additional-languages</code></dt>
  <dd>List of strings, default: <code>nil</code>.
    <p>This variable contains additional languages to make available, aside
from those predefined in <code>markdown-gfm-recognized-languages</code>, when
inserting GFM code blocks.  Language strings must be trimmed
of whitespace and not contain curly braces.  They may be of
arbitrary capitalization.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-gfm-additional-languages</code> <code class="o">'</code><code class="p">(</code><code class="s">"Texinfo"</code> <code class="s">"Zimbu"</code><code class="p">))</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-gfm-downcase-languages</code></dt>
  <dd>Boolean, default: <code>t</code>.
    <p>When non-<code>nil</code>, apply <code>downcase</code> to suggested programming language
names to convert them to lowercase.</p>
  </dd>
  <dt><code>markdown-spaces-after-code-fence</code></dt>
  <dd>Integer, default: <code>1</code>.
    <p>Number of space characters to insert between an opening code fence
and the optional programming language name.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-spaces-after-code-fence</code> <code class="mi">0</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
</dl>

<h4 id="leanpub-auto-tilde-fenced-code-blocks">Tilde-Fenced Code Blocks</h4>

<p>The second type of fenced code blocks supported by Markdown Mode are
tilde-fenced code blocks.  Markdown processors supporting this
extension include <a href="https://michelf.ca/projects/php-markdown/extra/">PHP Markdown Extra</a>, <a href="http://pandoc.org">Pandoc</a>, and
<a href="https://leanpub.com/help/manual">Leanpub</a> among others.  The block opens with <em>at least three</em>
tildes (<code>~</code>) and closes with at least as many tildes as it was opened
with (but possibly more):</p>

<figure class="code">
<div class="highlight"><pre><code></code>~~~~~~~~~~~~~~~~~~~~~
a one-line code block
~~~~~~~~~~~~~~~~~~~~~
</pre></div>

</figure>

<aside class="information blurb">
    <p>Markdown Mode supports font-lock and indirect editing of
tilde-fenced code blocks, but it does not yet include a
dedicated command for inserting them.</p>

</aside>

<h4 id="leanpub-auto-language-strings">Language Strings</h4>

<p>Some processors allow you to specify the language of the source code
using attribute lists of various formats, as in the following
examples.  Markdown Mode takes an inclusive approach to highlighting
such blocks by allowing optional braces, periods, <code>lang</code> attributes,
and so on:</p>

<figure class="code">
<div class="highlight"><pre><code></code>```{r, eval=FALSE}
summary(gdp)
```

~~~~~~~~~~~~~~~~~~~ .html
&lt;p&gt;hello, world&lt;/p&gt;
~~~~~~~~~~~~~~~~~~~

~~~~{.python}
print("hello, world")
~~~~

~~~~~~~ {: lang=fortran }
program main
  print *, 'hello, world'
end program main
~~~~~~~~~~~~~~~~~~~~~~~~~
</pre></div>

</figure>

<h4 id="leanpub-auto-native-font-lock-and-indirect-editing">Native Font Lock and Indirect Editing</h4>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/native-font-lock.png" alt="Native Font Lock for a JavaScript Code Block" style="width: 100%;">
  <figcaption>Native Font Lock for a JavaScript Code Block</figcaption>
</figure>


<p>Markdown Mode can also optionally perform native syntax highlighting
of source code in fenced code blocks.  This works for GFM and
tilde-fenced code blocks for which a language name has been specified.
You can toggle this mode with either <code>C-c C-x C-f</code> or
<code>M-x markdown-toggle-fontify-code-blocks-natively</code> and you can set the
default behavior by customizing the variable
<code>markdown-fontify-code-blocks-natively</code>.</p>

<dl>
  <dt><code>markdown-fontify-code-blocks-natively</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>When non-<code>nil</code>, fontify code in code blocks using the native major
mode.  This only works for fenced code blocks where the language
is specified and where Markdown Mode can automatically determine
the appropriate mode to use.</p>
  </dd>
</dl>

<p>Additionally, if you have the <a href="https://github.com/Fanael/edit-indirect/"><code>edit-indirect</code></a>
package installed
Markdown Mode can open code blocks for editing in an “indirect” buffer
with the native major mode enabled.  To do this, press <code>C-c '</code>
(<code>markdown-edit-code-block</code>).  A new window will open with the
contents of the code block and with the guessed major mode enabled.
The code block in the Markdown buffer will be highlighted to indicate
that it is being edited elsewhere.  When you are finished editing in
the indirect buffer, press <code>C-c C-c</code> (<code>edit-indirect-commit</code>)
to “commit” any changes and update the Markdown buffer or press
<code>C-c C-k</code> (<code>edit-indirect-abort</code>) to cancel and ignore any changes.</p>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/edit-indirect.png" alt="Editing a GFM Code Block in an Indirect Buffer" style="width: 100%;">
  <figcaption>Editing a GFM Code Block in an Indirect Buffer</figcaption>
</figure>


<p>Both native font lock and indirect editing require Markdown Mode to
try to determine the appropriate mode to use for each language identifier.
Sometimes this is straightforward.  For example, <code>shell</code> maps to <code>shell-mode</code>
and <code>emacs-lisp</code> maps to <code>emacs-lisp-mode</code>.  In other cases, the language
and mode names may not agree or a different mode may be desired.
The language-to-mode mapping may be customized as needed by setting the
variable <code>markdown-code-lang-modes</code>.</p>

<dl>
  <dt><code>markdown-code-lang-modes</code></dt>
  <dd>Association list.
    <p>An alist mapping languages to their major modes.  Keys are strings
representing language names and values are major mode symbols.
For example, a default element of this alist is <code>("sqlite"
. sql-mode)</code>, which instructs Markdown Mode to use <code>sql-mode</code> to
highlight and edit <code>sqlite</code> code blocks.</p>
  </dd>
</dl>

<p>In practice, the language-to-mode mapping is handled by the
<code>markdown-get-lang-mode</code> function, which looks for a defined function
satisfying one of the following forms, in order, where <code>&lt;lang&gt;</code>
represents the language keyword specified for the code block:</p>

<ol class="numeric">
  <li>An entry with key <code>&lt;lang&gt;</code> specified in <code>markdown-code-lang-modes</code>.</li>
  <li>A function named <code>&lt;lang&gt;-mode</code>.</li>
</ol>

<aside class="exercise blurb">
    <p>As an example, suppose you have a code block with language name <code>matlab</code>.
By default, there is no element of <code>markdown-code-lang-modes</code> with
key <code>matlab</code>, so Markdown Mode checks to see if <code>matlab-mode</code> is defined.
If so, it will be used for syntax highlighting of the code block and also
for indirect editing of the code block.</p>

</aside>

<h3 id="leanpub-auto-footnotes">
<span class="section-number">4.2 </span>Footnotes</h3>

<p>Footnotes are another common and reasonably standardized extension to
Markdown.  Footnotes consist of an inline marker, such as <code>[^fn]</code> and
a definition, where the footnote text is given:</p>

<figure class="code">
<div class="highlight"><pre><code></code>Paragraph text.[^fn]

[^fn]: Footnote text.
</pre></div>

</figure>

<p>To insert a footnote in Markdown Mode press <code>C-c C-s f</code>
(<code>markdown-insert-footnote</code>).  This inserts a footnote marker such as
<code>[^1]</code> at the point, inserts a footnote definition below, and
positions the point for typing the footnote text.  Footnotes inserted
this way are numbered, and the counter advances automatically.</p>

<aside class="warning blurb">
    <p>This footnote syntax is an extension to Markdown and although it is
in common use, it is not supported by all processors.</p>

</aside>

<p>As with reference links, you can customize the location of footnote
definitions.  Similarly, you can use <code>C-c C-d</code> (<code>markdown-do</code>) to jump
between footnote markers and footnote definitions.</p>

<dl>
  <dt><code>markdown-footnote-location</code></dt>
  <dd>
<code>immediately</code>, <code>header</code>, <code>subtree</code>, or <code>end</code>, default: <code>end</code>.
    <p>Determines where to insert footnote text.  The set of location
options is the same as for <code>markdown-reference-location</code>: the
possible locations are the end of the document (<code>end</code>), after the
current block (<code>immediately</code>), the end of the current subtree
(<code>subtree</code>), or before the next heading (<code>header</code>).</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-footnote-location</code> <code class="ss">'subtree</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
</dl>

<aside class="tip blurb">
    <p>Markdown Mode also includes basic font lock support for Pandoc’s
<em>inline footnotes</em>:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>Here is an inline footnote.^[Footnote text here.]
</pre></div>

  </figure>

  <p>This is, however, a processor-specific extension.</p>

</aside>

<h3 id="leanpub-auto-definition-lists">
<span class="section-number">4.3 </span>Definition Lists</h3>

<p>Several Markdown processors, such as PHP Markdown Extra, Pandoc,
MultiMarkdown, and Python Markdown, support an extension called
<em>definition lists</em>, which correspond to <code>&lt;dl&gt;</code> tags in HTML.  A simple
definition list begins with a term followed by a newline and a colon
at the beginning of the next line, which separates the definition:</p>

<figure class="code">
<div class="highlight"><pre><code></code>Term
:   Definition
</pre></div>

</figure>

<p>In HTML, this becomes:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">&lt;</code><code class="nt">dl</code><code class="p">&gt;</code>
<code class="p">&lt;</code><code class="nt">dt</code><code class="p">&gt;</code>Term<code class="p">&lt;/</code><code class="nt">dt</code><code class="p">&gt;</code>
<code class="p">&lt;</code><code class="nt">dd</code><code class="p">&gt;&lt;</code><code class="nt">p</code><code class="p">&gt;</code>Definition<code class="p">&lt;/</code><code class="nt">p</code><code class="p">&gt;&lt;/</code><code class="nt">dd</code><code class="p">&gt;</code>
<code class="p">&lt;/</code><code class="nt">dl</code><code class="p">&gt;</code>
</pre></div>

</figure>

<p>As with many words in a typical dictionary, you can specify multiple
definitions per term.  To borrow an example from the PHP Markdown
Extra documentation:</p>

<figure class="code">
<div class="highlight"><pre><code></code>Apple
:   Pomaceous fruit of plants of the genus Malus in
    the family Rosaceae.
:   An American computer company.

Orange
:   The fruit of an evergreen tree of the genus Citrus.
</pre></div>

</figure>

<p>Markdown Mode provides basic syntax highlighting and filling for
definition lists, and some of the list-related commands previously
described also work for definition lists.  For example, you can move
items up and down with <code>C-c &lt;up&gt;</code> (<code>markdown-move-up</code>) and <code>C-c &lt;down&gt;</code>
(<code>markdown-move-down</code>).  However, Markdown Mode does not yet provide
dedicated commands for inserting or otherwise manipulating definition
lists.</p>

<h3 id="leanpub-auto-comments">
<span class="section-number">4.4 </span>Comments</h3>

<p>Although there is no official syntax for comments in Markdown, since
it is most often converted to HTML the most natural comment syntax is that
used in HTML: <code>&lt;!-- comment --&gt;</code>.  You can use the usual Emacs commands
in Markdown Mode for commenting and uncommenting:</p>

<dl>
  <dt><code>M-; (comment-dwim)</code></dt>
  <dd>Insert or align comment on the current line.  If <code>transient-mark-mode</code>
is on and the region is active, invoke <code>comment-region</code> instead
(unless the region is a block of comments, in which case invoke
<code>uncomment-region</code>).</dd>
  <dt><code>C-x C-; (comment-line)</code></dt>
  <dd>Comment or uncomment the current line.</dd>
  <dt><code>C-u M-; (comment-kill)</code></dt>
  <dd>Kill a comment on the current line.</dd>
</dl>

<h3 id="leanpub-auto-task-list-items-checkboxes">
<span class="section-number">4.5 </span>Task List Items (Checkboxes)</h3>

<p>GitHub Flavored Markdown (GFM) defines a syntax for task lists (i.e.,
checkboxes) which is a straightforward and backward-compatible
modification of Markdown’s unordered list syntax.</p>

<figure class="code">
<div class="highlight"><pre><code></code>- [ ] Incomplete task
- [x] Completed task
</pre></div>

</figure>

<p>By default, Markdown Mode activates these checkboxes so that they can
be clicked using the mouse, or by pressing <code>RET</code> when the point is at
a checkbox.  You can also toggle checkboxes using either the dedicated
toggle command <code>C-c C-x C-x</code> (<code>markdown-toggle-gfm-checkbox</code>) or
the context-specific command <code>C-c C-d</code> (<code>markdown-do</code>).</p>

<dl>
  <dt><code>markdown-make-gfm-checkboxes-buttons</code></dt>
  <dd>Boolean, default: <code>t</code>.
    <p>Determines whether GitHub Flavored Markdown style task lists
(checkboxes) should be turned into buttons that can be toggled
with <code>mouse-1</code> or <code>RET</code>.  When non-<code>nil</code>, buttons are enabled.
This works both in <code>markdown-mode</code> and <code>gfm-mode</code>.</p>
  </dd>
  <dt><code>markdown-gfm-uppercase-checkbox</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>When non-<code>nil</code>, complete GFM task list items with the uppercase
<code>[X]</code> instead of the lowercase <code>[x]</code>.  This is primarily useful
for compatibility with Org Mode, which doesn’t recognize the
lowercase form.  GFM, however, supports both forms.</p>
  </dd>
</dl>

<h3 id="leanpub-auto-subscripts-and-superscripts">
<span class="section-number">4.6 </span>Subscripts and Superscripts</h3>

<p>Pandoc and MultiMarkdown, among other Markdown processors, support
extensions for subscripts and superscripts.  Markdown Mode supports
this syntax as well.  Superscripts may be written by placing carets
(<code>^</code>) immediately before and after the text.  Similarly, subscripts
may be written by placing tildes (<code>~</code>) immediately before and after
the text.</p>

<figure class="code">
<div class="highlight"><pre><code></code>H~2~O is a liquid.  2^10^ is 1024.
</pre></div>

</figure>

<h3 id="leanpub-auto-metadata">
<span class="section-number">4.7 </span>Metadata</h3>

<p>Markdown Mode provides font lock support for several common metadata
formats, such as those supported by MultiMarkdown, Pandoc, and GitHub.</p>

<p>One of the simplest forms is email-style metadata that must appear at
the beginning of the file.  This metadata format is supported by
MultiMarkdown and some blog generation systems.</p>

<figure class="code">
<div class="highlight"><pre><code></code>title: Guide to Markdown Mode for Emacs
author: Jason R. Blevins
</pre></div>

</figure>

<p>Markdown Mode also supports Pandoc metadata, which also must appear at
the beginning of a file and is indicated by percent signs:</p>

<figure class="code">
<div class="highlight"><pre><code></code>% title
% author(s) (separated by semicolons)
% date
</pre></div>

</figure>

<p>Finally, Markdown Mode supports YAML and TOML metadata blocks.  YAML
and TOML metadata blocks begin with a line of three hyphens (<code>---</code>)
and end with either a line of three hyphens (<code>---</code>) or three dots
(<code>...</code>).  Pandoc, GitHub, and Jekyll all support YAML metadata.</p>

<figure class="code">
<div class="highlight"><pre><code></code>---
title: Guide to Markdown Mode for Emacs
author: Jason R. Blevins
tags: Emacs, markdown, markdown-mode, writing, plain text
---
</pre></div>

</figure>

<p>Some website generators, such as Hugo, also support TOML metadata.</p>

<figure class="code">
<div class="highlight"><pre><code></code>---
title = "Guide to Markdown Mode for Emacs"
author = "Jason R. Blevins"
---
</pre></div>

</figure>

<p>Optionally, Markdown Mode allows YAML and TOML metadata to occur
anywhere in the document.  This is disabled by default, for
performance reasons, but you can customize
<code>markdown-use-pandoc-style-yaml-metadata</code> to enable it.</p>

<dl>
  <dt><code>markdown-use-pandoc-style-yaml-metadata</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>When non-<code>nil</code>, allow YAML and TOML metadata anywhere in the
document.</p>
  </dd>
</dl>

<h3 id="wiki-links">
<span class="section-number">4.8 </span>Wiki Links</h3>

<p>Markdown Mode also supports syntax highlighting for <code>[[Wiki Links]]</code>.
Note that wiki links are an extension to Markdown and are not
supported by all processors, so this support is disabled by default.
Support can be toggled with <code>M-x markdown-toggle-wiki-links</code> or by
setting <code>markdown-enable-wiki-links</code>.</p>

<p>To insert a wiki link, use <code>C-c C-s w</code> (<code>markdown-insert-wiki-link</code>).
If <code>transient-mark-mode</code> is on and there is an active region, this
command will use the region as the link text.  If the point is at a
word, use the word as the link text.  If there is no active region and
the point is not at word, it will simply insert empty wiki link brackets.</p>

<p>Wiki links may be followed by pressing <code>C-c C-o</code> when the point is at
a wiki link.  This will find the corresponding file in the current
window, by default, or in another window when the <code>C-u</code> prefix is
given.  As with regular links, you can use <code>M-p</code> and <code>M-n</code> to quickly
jump to the previous and next links (including other kinds of links).</p>

<p>Aliased or piped wiki links of the form <code>[[link text|PageName]]</code> are
also supported.  Since some wiki engines reverse these components, set
<code>markdown-wiki-link-alias-first</code> to nil to treat them as
<code>[[PageName|link text]]</code> instead.</p>

<p>By default, Markdown Mode only searches for target files in the
current directory.  Sequential subdirectory search can be enabled by
setting <code>markdown-wiki-link-search-subdirectories</code> to a non-<code>nil</code>
value.  Similarly, sequential parent directory search can be enabled
by setting <code>markdown-wiki-link-search-parent-directories</code> to a
non-<code>nil</code> value.</p>

<dl>
  <dt><code>markdown-enable-wiki-links</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>Enable or disable syntax highlighting for wiki links.  Set this
variable to a non-<code>nil</code> value to enable wiki link support.  Wiki
link support can also be toggled interactively using the function
<code>markdown-toggle-wiki-links</code>.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-enable-wiki-links</code> <code class="no">t</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-wiki-link-alias-first</code></dt>
  <dd>Boolean, default: <code>t</code>.
    <p>Set to a non-<code>nil</code> value to treat aliased wiki links like
<code>[[link text|PageName]]</code>.  When set to <code>nil</code>,
they will be treated as <code>[[PageName|link text]]</code>.</p>
  </dd>
  <dt><code>markdown-link-space-sub-char</code></dt>
  <dd>String, default: <code>"_"</code> in <code>markdown-mode</code> and <code>"-"</code> in <code>gfm-mode</code>.
    <p>Character to replace spaces when mapping wiki links to filenames.
For example, use an underscore for compatibility with the Python
Markdown WikiLinks extension.  In GFM Mode, this is set to <code>"-"</code>
to conform with the GitHub wiki link conventions.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-link-space-sub-char</code> <code class="s">"-"</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-wiki-link-fontify-missing</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>When non-<code>nil</code>, set wiki link faces according to the
existence or absence of target files.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-wiki-link-fontify-missing</code> <code class="no">t</code><code class="p">)</code>
</pre></div>

    </figure>

    <aside class="warning blurb">
            <p>Note that this is expensive because it requires checking each
linked file every time the buffer changes or the user switches
windows.  It is disabled by default because it may cause lag when
typing on slower machines.</p>

    </aside>
  </dd>
  <dt><code>markdown-wiki-link-search-subdirectories</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>When non-<code>nil</code>, search for wiki link targets in subdirectories.
This is the default search behavior for GitHub, so this variable
is automatically set to <code>t</code> in <code>gfm-mode</code>.</p>
  </dd>
  <dt><code>markdown-wiki-link-search-parent-directories</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>When non-<code>nil</code>, search for wiki link targets in parent directories.
This is the default search behavior of the <a href="https://ikiwiki.info">Ikiwiki</a> engine.</p>
  </dd>
</dl>

<h3 id="math">
<span class="section-number">4.9 </span>Mathematical Expressions (LaTeX)</h3>


<figure class="image center" style="width: 60%;">
  <img src="/site_images1/markdown-mode/math.png" alt="LaTeX Math in Markdown Mode" style="width: 100%;">
  <figcaption>LaTeX Math in Markdown Mode</figcaption>
</figure>


<p>Syntax highlighting for mathematical expressions written in LaTeX can
be toggling with <code>C-c C-x C-e</code> (<code>markdown-toggle-math</code>), where
the final <code>e</code> is for <em>equation</em>.  Importantly, this is <em>not</em> full
LaTeX support.  It only involves font lock and only for expressions
delimited by <code>$..$</code>, <code>$$..$$</code>, or <code>\[..\]</code> are supported; this does
not yet include dedicated commands for inserting or otherwise
manipulating mathematical markup.</p>

<figure class="code">
<div class="highlight"><pre><code></code>A simple equation for a line in $\mathbb{R}^2$:

\[ y = mx + b \]

Again, but with dollar signs:

$$ y = mx + b $$
</pre></div>

</figure>

<p>Alternatively, you can enable this by default by setting
<code>markdown-enable-math</code> to a non-<code>nil</code> value.  You can do this on a
file-by-file basis using <a href="#file-local">File Local Variables</a>.  Or you can enable
this setting globally, via <code>M-x customize</code> or by placing <code>(setq
markdown-enable-math t)</code> in your startup file.  In that case, you
should restart Emacs or call <code>markdown-reload-extensions</code>.</p>

<dl>
  <dt><code>markdown-enable-math</code></dt>
  <dd>Boolean, default: <code>nil</code>.
    <p>Enable syntax highlighting for LaTeX expressions.</p>
  </dd>
</dl>

<h3 id="gfm">
<span class="section-number">4.10 </span>GitHub Flavored Markdown (GFM) Mode</h3>

<p><a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a> is a dialect of Markdown developed for use on GitHub.
A GitHub Flavored Markdown Mode for Emacs is also available
as <code>gfm-mode</code> and is part of the Markdown Mode package.</p>

<p>The GitHub implementation of Markdown differs slightly
from standard Markdown in that it supports things like different
behavior for underscores inside of words, automatic linking of URLs,
strikethrough text, and fenced code blocks with an optional language
keyword.  Many of these extensions have been discussed already, but
here we address them collectively in relation to <code>gfm-mode</code>.</p>

<p>On GitHub, the GFM-specific features above apply to <code>README.md</code> files,
wiki pages, and other Markdown-formatted files in repositories on
GitHub.  GitHub also enables <a href="https://help.github.com/articles/writing-on-github/">additional features</a> for writing on
the site (for issues, pull requests, messages, etc.)  that are further
extensions of GFM.  These features include task lists (checkboxes),
newlines corresponding to hard line breaks, auto-linked references to
issues and commits, wiki links, and so on.  To make matters more
confusing, although task lists are not part of <a href="http://github.github.com/github-flavored-markdown/">GFM proper</a>,
<a href="https://github.com/blog/1825-task-lists-in-all-markdown-documents">since 2014</a> they are rendered (in a read-only fashion) in all
Markdown documents in repositories on the site.  These additional
extensions are supported to varying degrees by Markdown Mode and GFM
Mode as described below.</p>

<ul>
  <li>
<strong>URL auto-linking:</strong>  Both Markdown Mode and GFM Mode support
highlighting of URLs even without angle brackets.</li>
  <li>
<strong>Underscores inside words:</strong>  You must enable GFM Mode to
toggle support for underscores inside of words. In this mode
variable names such as <code>a_test_variable</code> will not trigger
italics.</li>
  <li>
<strong>Fenced code blocks:</strong>  Code blocks between triple backquotes
(<code>```</code>), with optional programming language keywords, are
highlighted in both Markdown Mode and GFM Mode.  They can be
inserted with <code>C-c C-s C</code> (<code>markdown-insert-gfm-code-block</code>) or by
typing three backquotes when <code>markdown-electric-backquote</code> is
non-<code>nil</code>.</li>
  <li>
<strong>Strikethrough:</strong>  Strikethrough text is supported in both Markdown
Mode and GFM Mode and can be inserted (and toggled) using
<code>C-c C-s s</code> (<code>markdown-insert-strike-through</code>).</li>
  <li>
<strong>Task lists:</strong> GFM task lists will be rendered as checkboxes,
implemented using Emacs buttons, in both Markdown Mode and GFM Mode
when <code>markdown-make-gfm-checkboxes-buttons</code> is set to a non-<code>nil</code>
value (and this variable is <code>t</code> by default).  These checkboxes can
be toggled by clicking <code>mouse-1</code>, pressing <code>RET</code> over the button, or
by pressing <code>C-c C-d</code> (<code>markdown-do</code>) with the point anywhere in the
task list item.  Alternatively, you can use the dedicated function
<code>C-c C-x C-x</code> (<code>markdown-toggle-gfm-checkbox</code>) directly.</li>
  <li>
<strong>Wiki links:</strong>  Generic wiki links are supported in
Markdown Mode, but in GFM Mode specifically they will be
treated as they are on GitHub: spaces will be replaced by hyphens
in file names and the first letter of the file name will be
capitalized.  For example, <code>[[wiki link]]</code> will map to a file
named <code>Wiki-link</code> with the same extension as the current file.</li>
  <li>
<strong>Newlines:</strong>  Neither Markdown Mode nor GFM Mode does anything
specifically with respect to newline behavior.  If you use
GFM Mode mostly to write text <em>for comments or issues</em> on the
GitHub site—where newlines are indeed significant and correspond
to hard line breaks—then you may want to enable <code>visual-line-mode</code>
for line wrapping in buffers.  You can do this with a
<code>gfm-mode-hook</code> as follows:
    <figure class="code">
<div class="highlight"><pre><code></code><code class="c1">;; Use visual-line-mode in gfm-mode</code>
<code class="p">(</code><code class="nb">defun</code> <code class="nv">my-gfm-mode-hook</code> <code class="p">()</code>
  <code class="p">(</code><code class="nv">visual-line-mode</code> <code class="mi">1</code><code class="p">))</code>
<code class="p">(</code><code class="nv">add-hook</code> <code class="ss">'gfm-mode-hook</code> <code class="ss">'my-gfm-mode-hook</code><code class="p">)</code>
</pre></div>

    </figure>
  </li>
  <li>
<strong>Preview:</strong> GFM-specific preview can be powered by setting
<code>markdown-command</code> to use <a href="https://github.com/alampros/Docter">Docter</a> (which, as of this writing, is
unfortunately no longer maintained).  This may also be configured to
work with <a href="https://geo.itunes.apple.com/us/app/marked-2/id890031187?mt=12&amp;at=11l5Vs">Marked 2</a> for <code>markdown-open-command</code>.  See the <a href="#tips">Tips</a>
chapter for details.</li>
</ul>

<div class="scene-break stars">*    *    *</div>
<h2 id="preview-export">
<span class="section-number">5. </span>Previewing &amp; Exporting Files</h2>

<p>There are a variety of ways to preview and export files in Markdown
Mode.  Perhaps the simplest way to quickly “preview” what your
Markdown will look like on the web is to hide the markup in the buffer
itself.  Several other options are available which make use of an
external Markdown processor (e.g., Markdown.pl, Pandoc, or
MultiMarkdown).  The various methods for previewing and exporting are
summarized in the following table and described in more detail in the
sections that follow.</p>

<table>
  <thead>
    <tr>
      <th>Description</th>
      <th>Keybinding</th>
      <th>Destination/Viewer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Hide Markup</td>
      <td><code>C-c C-x C-m</code></td>
      <td>Same buffer</td>
    </tr>
    <tr>
      <td>Compile</td>
      <td><code>C-c C-c m</code></td>
      <td>
<code>*markdown-output*</code> buffer</td>
    </tr>
    <tr>
      <td>Kill Ring Save</td>
      <td><code>C-c C-c w</code></td>
      <td>Kill ring</td>
    </tr>
    <tr>
      <td>Preview</td>
      <td><code>C-c C-c p</code></td>
      <td>Browser (temporary file)</td>
    </tr>
    <tr>
      <td>Export</td>
      <td><code>C-c C-c e</code></td>
      <td><code>&lt;basename&gt;.html</code></td>
    </tr>
    <tr>
      <td>Export &amp; View</td>
      <td><code>C-c C-c v</code></td>
      <td>
<code>&lt;basename&gt;.html</code>, then browser</td>
    </tr>
    <tr>
      <td>Live Preview</td>
      <td><code>C-c C-c l</code></td>
      <td>
<code>eww</code> in an Emacs buffer</td>
    </tr>
    <tr>
      <td>Open</td>
      <td><code>C-c C-c o</code></td>
      <td><code>markdown-open-command</code></td>
    </tr>
  </tbody>

</table>

<p>All commands except Hide Markup and Open involve the additional step
of sending the contents of the buffer to an external processor
(<code>markdown-command</code>) to convert Markdown to HTML.</p>

<aside class="information blurb">
    <p>To use Compile and other command commands that make use of an
external Markdown processor, <code>markdown-command</code> must be configured
as described in the <a href="#configuring-markdown">Configuring Markdown</a>
section.</p>

</aside>

<p>The Preview and Export commands are similar and worthy of more
discussion.  The difference is that when <em>previewing</em>, the output is
written to a temporary file that is then opened in a browser.  When
<em>exporting</em>, the output is written to a file named like the one being
visited, with the extension changed to <code>.html</code> instead, but the file
is not opened.  On the other hand, <em>viewing</em> is a combination of
exporting and previewing: the file is saved permanently and then
also opened for viewing.</p>

<aside class="warning blurb">
    <p>For the Export and View commands, the output file of form
<code>&lt;basename&gt;.html</code> will be overwritten without notice.</p>

</aside>

<aside class="tip blurb">
    <p>The table above lists the keybindings for carrying out these
commands, but they are also available from the Markdown menu
when <code>menu-bar-mode</code> is enabled.</p>

</aside>

<h3 id="markup-hiding">
<span class="section-number">5.1 </span>Markup Hiding</h3>

<p><em>Markup hiding</em> with <code>C-c C-x C-m</code> or <code>M-x markdown-toggle-markup-hiding</code>
is one simple way to preview (and even edit) files.  The side-by-side
screenshots below illustrate the effects of this.  Most markup will be hidden,
including asterisks and underscores for italics and bold, square brackets and
URLs for links, backquotes for inline code and fenced code blocks.</p>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/markup-hiding.png" alt="Markup Hiding in Markdown Mode" style="width: 100%;">
  <figcaption>Markup Hiding in Markdown Mode</figcaption>
</figure>


<p>Note that markup hiding supersedes <a href="#url-hiding">URL hiding</a>.  With
markup hiding, the URL and surrounding markup is hidden entirely,
while with URL hiding, only the URL itself is replaced by a
composition character.</p>

<p>When <a href="#markup-hiding">Markup Hiding</a> is enabled, the <code>&gt;</code> prefix for blockquotes
will be displayed as a special box drawing character.  Horizontal
rules, similarly, will be displayed using a line drawing character.
List markers for unordered lists will be displayed using Unicode
bullets, with different bullets for each level of nesting.  Definition
list markers, similarly, will be displayed using an alternative glyph.
The alternative display characters can be changed by customizing the
following variables.</p>

<dl>
  <dt><code>markdown-blockquote-display-char</code></dt>
  <dd>String, default: 0x258C (left half block).<sup id="fnref-unicode"><a href="#fn-unicode" rel="footnote">5</a></sup>
    <p>Character displayed when hiding blockquote markup.</p>
  </dd>
  <dt><code>markdown-hr-display-char</code></dt>
  <dd>Character, default: <code>─</code>.
    <p>Character for hiding horizontal rule markup.</p>
  </dd>
  <dt><code>markdown-definition-display-char</code></dt>
  <dd>Character, default: 0x2058 (four dot punctuation).
    <p>Character for replacing definition list markup.</p>
  </dd>
  <dt><code>markdown-list-item-bullets</code></dt>
  <dd>List of strings, default: 0x25cf (black circle), 0x25ce
(bullseye), 0x25cb (white circle), 0x25c6 (black diamond), 0x25c7
(white diamond), 0x25ba (black right-pointing pointer), 0x2022
(bullet).
    <p>List of bullets to use for unordered lists.  It can contain any
number of symbols, which will be repeated if nesting exceeds the
list length.</p>
  </dd>
</dl>

<aside class="information blurb">
    <p>Markup hiding works by adding text properties to positions in the
buffer—either the <code>invisible</code> property or the <code>display</code> property
in cases where alternative glyphs are used (e.g., list bullets).
<em>This does not, however, affect printing or other output.</em>
Functions such as <code>htmlfontify-buffer</code> and <code>ps-print-buffer</code> will
not honor these text properties.  For printing, it would be better
to convert to HTML or PDF first (e.g., using Pandoc) and then
print.</p>

</aside>

<h3 id="leanpub-auto-compiling-to-a-temporary-buffer-or-the-kill-ring">
<span class="section-number">5.2 </span>Compiling to a Temporary Buffer or the Kill Ring</h3>

<p><em>Compiling</em> (i.e., running Markdown) with <code>C-c C-c m</code>
(<code>markdown-other-window</code>) will send the
contents of the current buffer to <code>markdown-command</code> and show the
output in a temporary <code>*markdown-output*</code> buffer.</p>


<figure class="image center" style="width: 395px;">
  <img src="/site_images1/markdown-mode/markdown-output.png" alt="Markdown Output in a Separate Window" style="width: 100%;">
  <figcaption>Markdown Output in a Separate Window</figcaption>
</figure>


<p>As an alternative, rather than displaying the output in another
buffer you can save the output directly to the kill ring with
<code>C-c C-c w</code> (<code>markdown-kill-ring-save</code>).</p>

<h3 id="leanpub-auto-static-html-preview">
<span class="section-number">5.3 </span>Static HTML Preview</h3>

<p><em>Previewing</em> the current buffer with <code>C-c C-c p</code> (<code>markdown-preview</code>)
runs Markdown on the current buffer, stores the output in a temporary
file, and opens or “previews” the file in the default browser.</p>

<aside class="tip blurb">
    <p>See the <a href="#tips">Tips</a> chapter for details on how to configure the
default browser in Emacs, and how to link to or include a custom
stylesheet.</p>

</aside>

<h3 id="leanpub-auto-static-html-export--view">
<span class="section-number">5.4 </span>Static HTML Export &amp; View</h3>

<p><em>Exporting</em> with <code>C-c C-c e</code> (<code>markdown-export</code>) will run Markdown
(<code>markdown-command</code>) on the current buffer and save the result in the
file <code>&lt;basename&gt;.html</code>, where <code>&lt;basename&gt;</code> is the name of the Markdown
file visited by the current buffer, with the extension removed.</p>

<aside class="exercise blurb">
    <p>As an example, if you are editing a file named <code>notes.md</code>, then the
corresponding export file name would be <code>notes.html</code>.</p>

</aside>

<p>Similarly <em>viewing</em> with <code>C-c C-c v</code> (<code>markdown-export-and-preview</code>)
is the same as <em>exporting</em> the file and opening it in the default
browser.</p>

<h3 id="leanpub-auto-live-preview-mode">
<span class="section-number">5.5 </span>Live Preview Mode</h3>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/live-preview.png" alt="Live Preview Mode with the `eww` Browser" style="width: 100%;">
  <figcaption>Live Preview Mode with the <code>eww</code> Browser</figcaption>
</figure>


<p>Markdown Mode also includes a live preview mode, which opens a preview
window in <code>eww</code>, which is a built-in browser available in Emacs.  An
idle timer periodically refreshes the HTML generated by
<code>markdown-command</code>.  Press <code>C-c C-c l</code> to toggle
<code>markdown-live-preview-mode</code>.</p>

<dl>
  <dt><code>markdown-split-window-direction</code></dt>
  <dd>
<code>any</code>, <code>right</code>, or <code>below</code>, default: <code>any</code>.
    <p>Preference for splitting windows for static and live preview.  The
default value is <code>any</code>, which instructs Emacs to use
<code>split-window-sensibly</code> to automatically choose how to split
windows based on the values of <code>split-width-threshold</code> and
<code>split-height-threshold</code> and the current window configuration.  To
force vertically split windows (left and right), set this to
<code>right</code>.  To force horizontally split windows, set this to
<code>below</code>.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-split-window-direction</code> <code class="ss">'right</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-live-preview-delete-export</code></dt>
  <dd>
<code>nil</code>, <code>delete-on-export</code>, or <code>delete-on-destroy</code>,
default: <code>delete-on-destroy</code>.
    <p>Whether and when to delete the exported HTML file when using
<code>markdown-live-preview-export</code>.  If set to <code>delete-on-export</code>,
delete on every export.  When set to <code>delete-on-destroy</code>, delete
when quitting <code>markdown-live-preview-mode</code>.  If set to <code>nil</code>,
never delete.</p>
  </dd>
</dl>

<aside class="tip blurb">
    <p>For more complex configurations,
<code>markdown-live-preview-window-function</code> can be customized to open
in a browser other than <code>eww</code>.</p>

</aside>

<h3 id="leanpub-auto-opening-in-a-standalone-markdown-previewer">
<span class="section-number">5.6 </span>Opening in a Standalone Markdown Previewer</h3>

<p>A final option for previewing files is to use an external previewer
with <code>C-c C-c o</code> (<code>markdown-open</code>).  The program used to preview files
is specified by the <code>markdown-open-command</code> variable, which must be
customized to use an available external previewer on your system.</p>

<dl>
  <dt><code>markdown-open-command</code></dt>
  <dd>String, default: <code>nil</code>.
    <p>The command used for calling a standalone Markdown previewer
capable of opening Markdown source files directly.  This command
will be called with a single argument, the file name of the
current buffer.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-open-command</code> <code class="s">"/usr/local/bin/mark"</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
</dl>

<aside class="tip blurb">
    <p>As described in the <a href="#tips">Tips</a> chapter, one popular viewer on macOS
is <a href="https://geo.itunes.apple.com/us/app/marked-2/id890031187?mt=12&amp;at=11l5Vs">Marked 2</a>, which can easily be used as with Markdown Mode
with a simple shell script acting as a <code>markdown-open-command</code>
wrapper.</p>

</aside>

<h3 id="leanpub-auto-preview--export-customization">
<span class="section-number">5.7 </span>Preview &amp; Export Customization</h3>

<dl>
  <dt><code>markdown-xhtml-standalone-regexp</code></dt>
  <dd>String, default: <code>"^\\(&lt;\\?xml\\|&lt;!DOCTYPE\\|&lt;html\\)"</code>.
    <p>The regular expression that Markdown Mode uses to determine whether
the output of <code>markdown-command</code> is a standalone HTML document or
an HTML fragment.  If this regular expression not matched in the
first five lines of output, Markdown Mode assumes the output is a
fragment and adds a header and footer.</p>
  </dd>
  <dt><code>markdown-css-paths</code></dt>
  <dd>List of strings, default: <code>nil</code>.
    <p>A list of CSS files (URLs) to link to in the HTML output.</p>
  </dd>
  <dt><code>markdown-content-type</code></dt>
  <dd>String, default: <code>""</code>.
    <p>When set to a nonempty string, an <code>http-equiv</code> attribute will be
included in the HTML <code>&lt;head&gt;</code> block.  If needed, the suggested
values are <code>application/xhtml+xml</code> or <code>text/html</code>.  See also:
<code>markdown-coding-system</code>.</p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-content-type</code> <code class="s">"application/xhtml+xml"</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-coding-system</code></dt>
  <dd>String, default: <code>nil</code>.
    <p>Used for specifying the character set identifier in the
<code>http-equiv</code> attribute when included.  See
<code>markdown-content-type</code>, which must be set before this variable
has any effect.  When set to <code>nil</code>, <code>buffer-file-coding-system</code>
will be used to automatically determine the coding system string
(falling back to <code>iso-8859-1</code> when unavailable).  Common settings
are <code>utf-8</code> and <code>iso-latin-1</code>.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-coding-system</code> <code class="s">"utf-8"</code><code class="p">)</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-xhtml-header-content</code></dt>
  <dd>String, default: <code>""</code>.
    <p>Additional content to include in the HTML <code>&lt;head&gt;</code> block.</p>

    <p><em>Example:</em></p>

    <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-xhtml-header-content</code>
      <code class="p">(</code><code class="nf">concat</code> <code class="s">"&lt;link rel=\"shortcut icon\""</code>
              <code class="s">" href=\"/favicon.ico\""</code>
              <code class="s">" type=\"image/png\"/&gt;"</code><code class="p">))</code>
</pre></div>

    </figure>
  </dd>
  <dt><code>markdown-before-export-hook</code></dt>
  <dd>List of functions, default: <code>nil</code>.
    <p>Hook run before running <code>markdown-command</code> to export HTML output.
The hook may modify the buffer, which will be restored to the
original state after exporting is complete.</p>
  </dd>
  <dt><code>markdown-after-export-hook</code></dt>
  <dd>List of functions, default: <code>nil</code>.
    <p>Hook run after HTML output has been saved.  Any changes to the
output buffer made by this hook will be saved.</p>
  </dd>
</dl>

<div class="scene-break stars">*    *    *</div>
<h2 id="tips">
<span class="section-number">6. </span>Tips</h2>

<p>This chapter contains additional tips about using Markdown Mode and
integration with other third-party packages.</p>

<h3 id="file-extensions">
<span class="section-number">6.1 </span>Using Markdown Mode with Other File Extensions</h3>

<p>Markdown Mode contains <code>autoload</code> statements to automatically
associate itself with <code>.md</code> and <code>.markdown</code> files in
<code>auto-mode-alist</code>.  If you use another file extension for your
Markdown files, say <code>.text</code>, then you can also ask Emacs to load
<code>markdown-mode</code> automatically for <code>.text</code> files by adding the
following to your init file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'auto-mode-alist</code> <code class="o">'</code><code class="p">(</code><code class="s">"\\.text\\'"</code> <code class="o">.</code> <code class="nv">markdown-mode</code><code class="p">))</code>
</pre></div>

</figure>

<p>Alternatively, if you load packages with <code>use-package</code>, you can
achieve the same thing using the <code>:mode</code> keyword, like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nb">use-package</code> <code class="nv">markdown-mode</code>
  <code class="nb">:mode</code> <code class="p">((</code><code class="s">"\\.text\\'"</code> <code class="o">.</code> <code class="nv">markdown-mode</code><code class="p">)))</code>
</pre></div>

</figure>

<aside class="tip blurb">
    <p>This is a macro and after expanding it with
<code>pp-macroexpand-last-sexp</code> we see that it is equivalent to
auto-loading <code>markdown-mode</code> and updating <code>auto-mode-alist</code>:</p>

  <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">progn</code>
  <code class="p">(</code><code class="nb">unless</code>
      <code class="p">(</code><code class="nf">fboundp</code> <code class="ss">'markdown-mode</code><code class="p">)</code>
    <code class="p">(</code><code class="nf">autoload</code> <code class="nf">#'</code><code class="nv">markdown-mode</code> <code class="s">"markdown-mode"</code> <code class="no">nil</code> <code class="no">t</code><code class="p">))</code>
  <code class="p">(</code><code class="nv">ignore</code>
   <code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'auto-mode-alist</code>
                <code class="o">'</code><code class="p">(</code><code class="s">"\\.text\\'"</code> <code class="o">.</code> <code class="nv">markdown-mode</code><code class="p">))))</code>
</pre></div>

  </figure>

</aside>

<h3 id="leanpub-auto-switching-and-toggling-markup">
<span class="section-number">6.2 </span>Switching and Toggling Markup</h3>

<p>There are a couple of ways to quickly switch or toggle markup in
Markdown Mode (e.g., from bold to italic).  As an example, suppose
you type <code>**italic**</code> and want to change it to <code>*italic*</code>.  You can
quickly fix the mistake in at least two ways.</p>

<ol class="numeric">
  <li>
<strong>Using the kill ring:</strong>  Move the point to the erroneously bold
word and press <code>C-c C-k</code> (<code>markdown-kill-thing-at-point</code>).  This
removes the bold text and adds “italic”, without the asterisks, to
the kill ring.  Then press <code>C-c C-s i</code> to insert an empty italic
span and yank in the “italic” text with <code>C-y</code>.</li>
  <li>
<strong>Using markup toggling:</strong>  Markdown Mode allows you to “toggle”
certain markup, including that for bold, italic, and inline code,
by repeating the insertion command.  Returning to the example, you
can press <code>C-c C-s b</code> to first remove (toggle) the bold asterisks,
leaving only “italic” behind.  Then, pressing <code>C-c C-s i</code> surrounds
the word with single asterisks.</li>
</ol>

<p>These methods also apply to other forms of markup such as inline code
and even links.</p>

<p>You can also toggle between asterisks and underscores as needed.
Suppose that you have <code>__bold__</code> in the buffer and want to use
asterisks instead.  Both will render in HTML as bold, but you might
have a preference for the latter in plain text.  You can use the
Markdown Mode cycling commands to switch between underscores and
asterisks in bold and italic phrases by pressing either <code>C-c C--</code> or
<code>C-c C-=</code> (<code>markdown-promote</code> or <code>markdown-demote</code>).</p>

<h3 id="leanpub-auto-linking-to-or-including-custom-css">
<span class="section-number">6.3 </span>Linking to or Including Custom CSS</h3>

<p>The default stylesheet for HTML in most browsers is rather plain by
design, so you may want to use a custom stylesheet by either linking
to an external stylesheet or including a <code>&lt;style&gt;</code> block in the
exported HTML itself.</p>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/custom-css.png" alt="Default and Custom CSS in Markdown Mode Output" style="width: 100%;">
  <figcaption>Default and Custom CSS in Markdown Mode Output</figcaption>
</figure>


<h4 id="leanpub-auto-linking-to-an-external-stylesheet">Linking to an External Stylesheet</h4>

<p>The easiest way to customize the style of previewed and exported HTML
output is to link to an existing CSS stylesheet.  Markdown Mode has a
customizable variable <code>markdown-css-paths</code>, which is a list of
stylesheets to link to.  For each path or URL in <code>markdown-css-paths</code>,
a line like the following will be included in the HTML output:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">&lt;</code><code class="nt">link</code> <code class="na">rel</code><code class="o">=</code><code class="s">"stylesheet"</code> <code class="na">type</code><code class="o">=</code><code class="s">"text/css"</code> <code class="na">media</code><code class="o">=</code><code class="s">"all"</code> <code class="na">href</code><code class="o">=</code><code class="s">"URL"</code> <code class="p">/&gt;</code>
</pre></div>

</figure>

<p>Noting that the variable is a list, one can specify a single CSS path
on the local filesystem like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-css-paths</code> <code class="o">'</code><code class="p">(</code><code class="s">"/path/to/custom.css"</code><code class="p">))</code>
</pre></div>

</figure>

<p>On the other hand, to link to an existing URL you can use the
following form:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-css-paths</code> <code class="o">'</code><code class="p">(</code><code class="s">"http://mydomain.com/style.css"</code><code class="p">))</code>
</pre></div>

</figure>

<p>As another example, the <a href="https://geo.itunes.apple.com/us/app/marked-2/id890031187?mt=12&amp;at=11l5Vs">Marked 2</a> previewer contains several
built-in stylesheets that users can choose between.  Conveniently,
these stylesheets are stored on the filesystem as CSS files inside the
application package and you can link to them locally.  To use the
“Lopash” style when previewing from <code>markdown-mode</code>, you can set the
<code>markdown-css-paths</code> list as follows:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-css-paths</code>
    <code class="o">'</code><code class="p">(</code><code class="s">"/Applications/Marked 2.app/Contents/Resources/Lopash.css"</code><code class="p">))</code>
</pre></div>

</figure>

<p>If you don’t have a stylesheet already, there are many popular
Markdown stylesheets available online.  For example, here are three
such repositories on GitHub:</p>

<ul>
  <li><a href="http://markdowncss.github.io">http://markdowncss.github.io</a></li>
  <li><a href="http://jasonm23.github.io/markdown-css-themes/">http://jasonm23.github.io/markdown-css-themes/</a></li>
  <li><a href="https://sindresorhus.com/github-markdown-css/">https://sindresorhus.com/github-markdown-css/</a></li>
</ul>

<h4 id="leanpub-auto-embedding-a-custom-stylesheet">Embedding a Custom Stylesheet</h4>

<p>As an alternative to linking to an external stylesheet, you can also
include inline style information in output files by using the
<code>markdown-xhtml-header-content</code> variable.  This variable specifies a
string to add to the <code>&lt;head&gt;</code> block of the HTML output.</p>

<aside class="exercise blurb">
    <p>For example, to remove the default underline property from links,
but temporarily underline links when hovering, you can include the
following <code>&lt;style&gt;</code> block via <code>markdown-xhtml-header-content</code>:</p>

  <figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-xhtml-header-content</code>
      <code class="s">"&lt;style type='text/css'&gt;</code>
<code class="s">a { text-decoration: none; }</code>
<code class="s">a:hover { text-decoration: underline; }</code>
<code class="s">&lt;/style&gt;"</code><code class="p">)</code>
</pre></div>

  </figure>

</aside>

<aside class="tip blurb">
    <p>For more advanced customization, there are two export hooks available:
<code>markdown-before-export-hook</code> and <code>markdown-after-export-hook</code>.</p>

</aside>

<h3 id="leanpub-auto-imenu-and-imenu-list">
<span class="section-number">6.4 </span>Imenu and Imenu-List</h3>

<p>Markdown Mode includes support for <code>imenu</code>, an interface for quickly
navigating to different sections within a buffer.  To try <code>imenu</code> with
Markdown Mode, simply run <code>M-x imenu-add-menubar-index</code>.  An “Index”
menu will appear in the menubar.  Clicking a heading moves the point
to that heading.  Alternatively, when invoking <code>M-x imenu</code> using the
keyboard Emacs will present you with a list of headings in the
minibuffer.</p>


<figure class="image center" style="width: 70%;">
  <img src="/site_images1/markdown-mode/imenu-index.png" alt="`imenu` Index Menu" style="width: 100%;">
  <figcaption><code>imenu</code> Index Menu</figcaption>
</figure>


<p>Markdown Mode adds a single period (<code>.</code>) to the top of each sub-menu.
Clicking it takes you to the parent section.  Otherwise, there is no
way to jump directly to headings that are not leaf nodes in the
heading tree.</p>

<p>To automatically load <code>imenu</code> when <code>markdown-mode</code> is loaded, you can
add the following to your <code>.emacs</code> or <code>init.el</code> file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">add-hook</code> <code class="ss">'markdown-mode-hook</code> <code class="ss">'imenu-add-menubar-index</code><code class="p">)</code>
<code class="p">(</code><code class="k">setq</code> <code class="nv">imenu-auto-rescan</code> <code class="no">t</code><code class="p">)</code>
</pre></div>

</figure>

<p>The first line asks Emacs to run the <code>imenu-add-menubar-index</code>
function each time <code>markdown-mode</code> is loaded.  The second line asks
<code>imenu</code> to keep the index up to date when files are modified, as
sections are added or removed.</p>

<p>By default, the <code>imenu</code> menu is nested.  If you prefer a flat menu,
you can customize <code>markdown-nested-imenu-heading-index</code>.</p>

<dl>
  <dt><code>markdown-nested-imenu-header-index</code></dt>
  <dd>Boolean, default: <code>t</code>.
    <p>Use nested <code>imenu</code> heading index when non-<code>nil</code> and a flat menu
otherwise.  A nested index may provide more natural browsing from
the menu bar, but a flat list may allow for faster keyboard
navigation via tab completion.</p>
  </dd>
</dl>

<p>Another useful <code>imenu</code>-based package is <a href="https://github.com/bmag/imenu-list"><code>imenu-list</code></a>, a
third-party package which shows the current buffer’s <code>imenu</code> entries
in a pop-up buffer.  You can install <code>imenu-list</code> from MELPA.
With <a href="https://github.com/jwiegley/use-package">use-package</a>, you can configure it like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nb">use-package</code> <code class="nv">imenu-list</code>
  <code class="nb">:ensure</code> <code class="no">t</code>
  <code class="nb">:bind</code> <code class="p">((</code><code class="s">"C-'"</code> <code class="o">.</code> <code class="nv">imenu-list-smart-toggle</code><code class="p">))</code>
  <code class="nb">:config</code>
  <code class="p">(</code><code class="k">setq</code> <code class="nv">imenu-list-focus-after-activation</code> <code class="no">t</code>
        <code class="nv">imenu-list-auto-resize</code> <code class="no">nil</code><code class="p">))</code>
</pre></div>

</figure>

<p>This binds <code>C-'</code> (<code>imenu-list-smart-toggle</code>) so that when pressing it
a window appears on the right side showing the heading hierarchy in
the <code>*Ilist*</code> buffer.  Pressing <code>C-'</code> again hides the window.</p>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/imenu-list.png" alt="Markdown Mode with `imenu-list`" style="width: 100%;">
  <figcaption>Markdown Mode with <code>imenu-list</code></figcaption>
</figure>


<p>By default, the point stays in the original window and so the
<code>*Ilist*</code> window is not focused.  Setting the variable
<code>imenu-list-focus-after-activation</code> to a non-<code>nil</code> value, as above,
changes the focus to the new window so that you can immediately issue
commands there.</p>

<p>The <code>*Ilist*</code> buffer is periodically refreshed.  If you want the width
of the window containing it to adjust automatically each time it is
refreshed, then set the variable <code>imenu-list-auto-resize</code> to <code>t</code>
instead.</p>

<p>There are several keybindings in the <code>*Ilist*</code> buffer for
navigating between sections:</p>

<ul>
  <li>
<code>RET</code> or mouse click - visit heading at point</li>
  <li>
<code>SPC</code> - visit heading, but keep focus on <code>*Ilist*</code> buffer</li>
  <li>
<code>TAB</code> or <code>f</code> - fold/unfold subtree</li>
  <li>
<code>n</code> and <code>p</code> - next/previous line</li>
  <li>
<code>g</code> - refresh entries</li>
  <li>
<code>q</code> - quit window and disable <code>imenu-list-minor-mode</code>
</li>
</ul>

<p>Unlike the <code>imenu</code> Index menu, the <code>*Ilist*</code> buffer is updated
automatically.</p>

<h3 id="file-local">
<span class="section-number">6.5 </span>File Local Variables</h3>

<p>Emacs allows one to specify values for
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html">variables inside files themselves</a>.
For example, you can specify which mode Emacs should use to edit a
particular file by setting a special variable named <code>mode</code>.  You can
specify such file local variables at either the beginning or end of a
file.</p>

<p>Perhaps you have seen lines like the following at the beginning of
scripts.  This particular line tells Emacs that you would like to open
this file using <code>cperl-mode</code>:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="ch">#!/usr/bin/perl       -*- mode: cperl -*-</code>
</pre></div>

</figure>

<p>The <code>mode</code> variable is special; it is not an actual variable name in
Emacs.  Another special variable is <code>coding</code>, which specifies the
character coding system for this file (e.g., <code>utf-8</code> or <code>latin-1</code>).  A
third special variable is <code>eval</code>, which specifies a Lisp expression to
evaluate.  Multiple <code>eval</code> declarations can be given in the same file.</p>

<p>Among the special variables, <code>mode</code> is the most special of all and so
the <code>mode:</code> declaration can even be omitted:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="ch">#!/usr/bin/perl       -*-cperl-*-</code>
</pre></div>

</figure>

<p>File variable definitions should appear in a comment and the comment
syntax used by Markdown Mode is the same as for HTML comments: <code>&lt;!--
comment --&gt;</code>.  So, to specify a local variable at the beginning of a
file you could add the following to the first line (which would result
in Emacs loading the file in <code>gfm-mode</code> instead of, say,
<code>markdown-mode</code>):</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="c">&lt;!-- -*- mode: gfm -*- --&gt;</code>
</pre></div>

</figure>

<p>To specify multiple variables, separate them by semicolons:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="c">&lt;!-- -*- mode: markdown; coding: utf-8 -*- --&gt;</code>
</pre></div>

</figure>

<p>Alternatively, you can insert a local variable block at the <em>end</em> of a
file.  Such a block opens with a <code>Local Variables:</code> declaration and
closes with <code>End:</code>, like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="c">&lt;!-- Local Variables: --&gt;</code>
<code class="c">&lt;!-- markdown-enable-math: t --&gt;</code>
<code class="c">&lt;!-- End: --&gt;</code>
</pre></div>

</figure>

<p>It is not necessary that each line is a self-contained comment, so the
following also works and it is a personal preference which form you
use:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="c">&lt;!--</code>
<code class="c">Local Variables:</code>
<code class="c">markdown-enable-math: t</code>
<code class="c">End:</code>
<code class="c">--&gt;</code>
</pre></div>

</figure>

<p>One useful scenario for using file local variables with Markdown files
include toggling special modes, like setting <code>markdown-enable-math</code> in
the previous example.  If you mostly leave math mode disabled (so that
<code>$</code> is not a special character), but sometimes want to enable it,
using a file-local variable as above is a great way to handle this
case.</p>

<p>Other example uses are setting the <code>fill-column</code> in a particular file,
or declaring that spaces should be used for indentation instead of
tabs:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="c">&lt;!--</code>
<code class="c">Local Variables:</code>
<code class="c">fill-column: 70</code>
<code class="c">indent-tabs-mode: nil</code>
<code class="c">End:</code>
<code class="c">--&gt;</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-generating-a-table-of-contents">
<span class="section-number">6.6 </span>Generating a Table of Contents</h3>

<p>A package called <a href="https://github.com/ardumont/markdown-toc"><code>markdown-toc</code></a>
allows users to generate and update a table of contents in Markdown
files.  Like Markdown Mode itself, you can install it from <a href="https://melpa.org/#/markdown-toc">MELPA</a>
or <a href="https://stable.melpa.org/#/markdown-toc">MELPA Stable</a>: <code>M-x package-install RET markdown-toc</code>.</p>

<p>To insert the table of contents initially, place the point where you
would like it to appear and issue <code>M-x markdown-toc-generate-toc</code>.
You will see a header comment, a title, a Markdown-formatted nested
list of headings, and a footer comment, as in the following example:</p>

<figure class="code">
<div class="highlight"><pre><code></code>&lt;!-- markdown-toc start - Don't edit this section. 
     Run M-x markdown-toc-generate-toc again --&gt;
**Table of Contents**

- [Introduction](#introduction)
    - [Quick Reference](#quick-reference)
    - [Markdown](#markdown)
        - [Markdown Syntax Reference](#markdown-syntax-reference)
        - [Additional Information](#additional-information)
    ...

&lt;!-- markdown-toc end --&gt;
</pre></div>

</figure>

<p>After it has been inserted, you can update the table of contents with
<code>M-x markdown-toc-refresh-toc</code>.  As an alternative, you can use the combined
generate-or-refresh command <code>M-x markdown-toc-generate-or-refresh-toc</code>.
Finally, to remove it run <code>M-x markdown-toc-delete-toc</code>.</p>

<aside class="warning blurb">
    <p>Notice that <code>markdown-toc</code> generates anchors (e.g., <code>#quick-reference</code>)
automatically.  You will need to make sure that your Markdown processor
of choice also generates these in the resulting HTML and that it
follows the same format (i.e., replacing spaces with hyphens).  This is
the format used by MultiMarkdown, for example.</p>

</aside>

<p>You can also customize the title and the start and end comments:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">custom-set-variables</code>
 <code class="o">'</code><code class="p">(</code><code class="nv">markdown-toc-header-toc-start</code> <code class="s">"&lt;!-- customized start--&gt;"</code><code class="p">)</code>
 <code class="o">'</code><code class="p">(</code><code class="nv">markdown-toc-header-toc-title</code> <code class="s">"**customized title**"</code><code class="p">)</code>
 <code class="o">'</code><code class="p">(</code><code class="nv">markdown-toc-header-toc-end</code> <code class="s">"&lt;!-- customized end --&gt;"</code><code class="p">))</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-highlighting-and-preserving-whitespace">
<span class="section-number">6.7 </span>Highlighting and Preserving Whitespace</h3>

<p>Whitespace is an important part of Markdown.  For example, two spaces
at the end of a line produce a hard line break and blocks indented by
four spaces become code blocks.</p>

<p>If you want to temporarily display whitespace in a file, you can
enable <code>whitespace-mode</code>, which is part of Emacs, by typing <code>M-x
whitespace-mode</code>.  Issue the command again to disable it.</p>

<p>On a related note, if you use <code>whitespace-cleanup-mode</code> to tidy up
your files automatically, then you may want to disable it in
<code>markdown-mode</code>.  To do so, you can add the following to your init
file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">after-load</code> <code class="ss">'whitespace-cleanup-mode</code>
            <code class="p">(</code><code class="nb">push</code> <code class="ss">'markdown-mode</code> <code class="nv">whitespace-cleanup-mode-ignore-modes</code><code class="p">))</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-using-flyspell-with-markdown-mode">
<span class="section-number">6.8 </span>Using Flyspell with Markdown Mode</h3>

<p>Flyspell Mode enables on-the-fly spell checking in Emacs.  If you want
to always enable <code>flyspell-mode</code> when Markdown Mode is loaded, you can add
the following to your init file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">add-hook</code> <code class="ss">'markdown-mode-hook</code> <code class="ss">'flyspell-mode</code><code class="p">)</code>
</pre></div>

</figure>

<p>Starting with version 2.3, Markdown Mode defines a
<code>flyspell-generic-check-word-predicate</code> function which lets Flyspell
know that it should ignore code blocks, inline code, and comments,
reference labels, Markdown markup, and URLs.</p>

<h3 id="leanpub-auto-keeping-notes-in-a-local-wiki">
<span class="section-number">6.9 </span>Keeping Notes in a Local Wiki</h3>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/local-wiki.png" alt="Local Wiki Files in Markdown Mode" style="width: 100%;">
  <figcaption>Local Wiki Files in Markdown Mode</figcaption>
</figure>


<p>Markdown Mode supports wiki links, so you can use it keep notes in a
local wiki.  You can create <code>[[wiki links]]</code> to other files and open
them by moving the point to the link and pressing <code>C-c C-o</code>.  If a
file doesn’t exist, it will be created.  You can move quickly between
links with <code>M-n</code> (<code>markdown-next-link</code>) and <code>M-p</code>
(<code>markdown-previous-link</code>).</p>

<p>As discussed in the section on <a href="#wiki-links">Wiki Links</a>, there are several
settings you may want to customize.  When following wiki links,
Markdown Mode looks for a file with the same extension as the current
one.  The variable <code>markdown-link-space-sub-char</code> determines how
spaces are handled when transforming the link text to a file name.
Finally, if you want to highlight missing links as in the screenshot
above, set <code>markdown-wiki-link-fontify-missing</code> to <code>t</code>.</p>

<h3 id="leanpub-auto-integration-with-deft-mode">
<span class="section-number">6.10 </span>Integration with Deft Mode</h3>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/deft.png" alt="Deft Mode with Notes in Markdown Format" style="width: 100%;">
  <figcaption>Deft Mode with Notes in Markdown Format</figcaption>
</figure>


<p><a href="https://jblevins.org/projects/deft/">Deft</a> is an Emacs mode for quickly browsing, filtering, and
editing directories of plain text notes, inspired by Notational
Velocity.  It was designed for increased productivity when writing and
taking notes by making it fast and simple to find the right file at
the right time and by automating many of the usual tasks such as
creating new files and saving files.</p>

<p>If you keep notes in Markdown format (perhaps in wiki form, as in the
previous section), then you might also enjoy Deft.  You don’t
have to use Markdown—Deft works with LaTeX files, Org files,
etc.—but it has some Markdown-specific features.  For example, it
automatically strips Markdown heading markup when displaying note
titles.  It also allows you to customize the Markdown heading level of
new notes.</p>

<p>Below is a simplified version of my own Deft configuration, which I
mostly use with Markdown files.  This binds Deft to <code>&lt;f8&gt;</code>, enables
recursive subdirectory search for notes, configures several file
extensions I use for notes, and customizes some of the file naming and
titling options.</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nb">use-package</code> <code class="nv">deft</code>
  <code class="nb">:bind</code> <code class="p">((</code><code class="s">"&lt;f8&gt;"</code> <code class="o">.</code> <code class="nv">deft</code><code class="p">))</code>
  <code class="nb">:commands</code> <code class="p">(</code><code class="nv">deft</code> <code class="nv">deft-open-file</code> <code class="nv">deft-new-file-named</code><code class="p">)</code>
  <code class="nb">:config</code>
  <code class="p">(</code><code class="k">setq</code> <code class="nv">deft-directory</code> <code class="s">"~/notes/"</code>
        <code class="nv">deft-recursive</code> <code class="no">t</code>
        <code class="nv">deft-extensions</code> <code class="o">'</code><code class="p">(</code><code class="s">"md"</code> <code class="s">"txt"</code> <code class="s">"org"</code> <code class="s">"tex"</code><code class="p">)</code>
        <code class="nv">deft-use-filter-string-for-filename</code> <code class="no">nil</code>
        <code class="nv">deft-use-filename-as-title</code> <code class="no">nil</code>
        <code class="nv">deft-markdown-mode-title-level</code> <code class="mi">1</code>
        <code class="nv">deft-file-naming-rules</code> <code class="o">'</code><code class="p">((</code><code class="nv">noslash</code> <code class="o">.</code> <code class="s">"-"</code><code class="p">)</code>
                                 <code class="p">(</code><code class="nv">nospace</code> <code class="o">.</code> <code class="s">"-"</code><code class="p">)</code>
                                 <code class="p">(</code><code class="nv">case-fn</code> <code class="o">.</code> <code class="nf">downcase</code><code class="p">)))</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-mathjax-integration">
<span class="section-number">6.11 </span>MathJax Integration</h3>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/mathjax.png" alt="Markdown with Math Mode and MathJax Preview" style="width: 100%;">
  <figcaption>Markdown with Math Mode and MathJax Preview</figcaption>
</figure>


<p>If you want to include mathematical expressions in LaTeX form in your
Markdown files, Markdown Mode assists you with <a href="#math">Math Mode</a> for
editing (see the <a href="#extensions">Extensions</a> chapter for details).  For viewing or
publishing, you will need some way to view the LaTeX in a readable form.
One option is to use <a href="https://www.mathjax.org">MathJax</a>, a cross-browser JavaScript package
for rendering mathematics in LaTeX and MathML form.</p>

<p>Even if you don’t use MathJax in your publication workflow, it can be
useful for previewing Markdown files containing mathematics.  To do
this, you can ask Markdown Mode to add the necessary JavaScript tags
to the <code>&lt;head&gt;</code> block of your HTML preview output using the
<code>markdown-xhtml-header-content</code> variable:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-xhtml-header-content</code>
      <code class="p">(</code><code class="nf">concat</code> <code class="s">"&lt;script type=\"text/javascript\" async"</code>
              <code class="s">" src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/"</code>
              <code class="s">"2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\"&gt;"</code>
              <code class="s">"&lt;/script&gt;"</code><code class="p">))</code>
</pre></div>

</figure>

<aside class="warning blurb">
    <p>The <code>TeX-MML-AM_CHTML</code> configuration in the example above very
general, and therefore larger than other configurations.  It is
useful as a default to get started, but you will most likely want to
use a more appropriate, specific configuration for production use,
for better performance.</p>

</aside>

<aside class="warning blurb">
    <p>You will need to make sure that your Markdown processor is generating
HTML fragments, rather than standalone documents, so that Markdown
Mode can add a header and footer with your custom <code>&lt;script&gt;</code> tag.</p>

</aside>

<h3 id="leanpub-auto-using-pre--and-post-processors">
<span class="section-number">6.12 </span>Using Pre- and Post-Processors</h3>

<p>A Unix “pipeline” is a sequence of processes connected through
<em>pipes</em>.  The standard output of each process is directed to the
standard input of the following one.</p>

<aside class="exercise blurb">
    <p>To give a generic example of pipes, the following command lists all
running processes, filters out those without <code>markdown</code> in the name,
removes the <code>grep markdown</code> process itself, extracts the process IDs
using <code>awk</code>:</p>

  <figure class="code">
<div class="highlight"><pre><code></code>ps aux | grep markdown | grep -v grep | awk '{print $2}'
</pre></div>

  </figure>

</aside>

<p>With Markdown Mode, the Markdown processor given by the variable
<code>markdown-command</code> can be a pipeline, and so it can be used to apply
pre- or post-processors to your Markdown files.</p>

<p>As an example, one common Markdown post-processor is <a href="http://daringfireball.net/projects/smartypants/">SmartyPants</a>,
which implements “smart typography” (curly quotation marks, en-dashes,
em-dashes, and so on).  To use it, you will need to first install
SmartyPants.</p>

<ul>
  <li>On Debian Linux, you can install <code>libtext-typography-perl</code>.</li>
  <li>On macOS with Homebrew, you can use <code>brew install smartypants</code>.</li>
  <li>Otherwise, you can install it manually by downloading the
<a href="http://daringfireball.net/projects/smartypants/">SmartyPants zip file</a>, uncompressing it, and placing
<code>SmartyPants.pl</code> in your <code>PATH</code>.</li>
</ul>

<p>Once you have SmartyPants installed, note the path of the script.  For
example, suppose it is installed in your Emacs <code>exec-path</code> path as
<code>smartypants</code>.  Then to use SmartyPants when previewing and exporting
from Markdown Mode, you would set <code>markdown-command</code> so that the
<code>markdown</code> output is piped to <code>smartypants</code>.  You can do this either
by using <code>M-x customize-group RET markdown</code> or by placing the
following in your init file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-command</code> <code class="s">"markdown | smartypants"</code><code class="p">)</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-using-a-custom-web-browser">
<span class="section-number">6.13 </span>Using a Custom Web Browser</h3>

<p>To open a browser, Markdown Mode calls the function specified in
<code>browse-url-browser-function</code>.  To determine what value is currently
used in your own Emacs, you can use <code>M-x describe-variable RET
browse-url-browser-function</code>.  To use a different browser, customize the
variable with <code>M-x customize-option RET browse-url-browser-function</code>
and answer the questions presented.</p>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/browse-url-browser-function.png" alt="Customizing `browse-url-browser-function`" style="width: 100%;">
  <figcaption>Customizing <code>browse-url-browser-function</code></figcaption>
</figure>


<p>If you want to change the setting in your init file instead, you can
simply add something like the following:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">browse-url-browser-function</code> <code class="nf">#'</code><code class="nv">browse-url-chrome</code><code class="p">)</code>
</pre></div>

</figure>

<p>For reference, here is a selection of the available <code>browse-url</code>
functions in Emacs 25.2:</p>

<figure class="code">
<div class="highlight"><pre><code></code>browse-url-chrome                   browse-url-epiphany
browse-url-chromium                 browse-url-firefox
browse-url-conkeror                 browse-url-galeon
browse-url-default-browser          browse-url-generic
browse-url-default-macosx-browser   browse-url-gnome-moz
browse-url-default-windows-browser  browse-url-kde
browse-url-elinks                   browse-url-mozilla
browse-url-elinks-new-window        browse-url-w3
</pre></div>

</figure>

<p>If your browser is not supported, choose <code>browse-url-generic</code> and set
<code>browse-url-generic-program</code> to the path of your browser’s executable.
The downside of using a generic browser is that you lose “remote
control” and as a result, a new process will be spawned for every URL
you open.</p>

<p>The above options change the browser for Emacs <em>globally</em>.  On the
other hand, if for some reason you only wanted to change the browser
used for Markdown Mode previewing specifically, you can achieve this
by “advising” the <code>markdown-preview</code> function:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">advice-add</code> <code class="ss">'markdown-preview</code> <code class="nb">:around</code>
            <code class="p">(</code><code class="nb">lambda</code> <code class="p">(</code><code class="nv">orig</code> <code class="kp">&amp;rest</code> <code class="nv">args</code><code class="p">)</code>
              <code class="s">"Use Chromium as default browser."</code>
              <code class="p">(</code><code class="k">let</code> <code class="p">((</code><code class="nv">browse-url-browser-function</code> <code class="nf">#'</code><code class="nv">browse-url-chromium</code><code class="p">))</code>
                <code class="p">(</code><code class="nf">apply</code> <code class="nv">orig</code> <code class="nv">args</code><code class="p">))))</code>
</pre></div>

</figure>

<p>This example changes the browse function to <code>browse-url-chromium</code> for
the <code>markdown-preview</code> function only.  See the section on
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html">Advising Emacs Lisp Functions</a> in the Emacs Lisp Reference
Manual for additional details.</p>

<h3 id="leanpub-auto-using-marked-2-as-a-standalone-previewer">
<span class="section-number">6.14 </span>Using Marked 2 as a Standalone Previewer</h3>


<figure class="image center" style="width: 60%;">
  <img src="/site_images1/markdown-mode/marked-2.png" alt="Marked 2 Preview of this Book" style="width: 100%;">
  <figcaption>Marked 2 Preview of this Book</figcaption>
</figure>


<p>You can customize the program used to “open” Markdown files from
Markdown Mode via <code>C-c C-c o</code>.  The variable you will want to customize
is <code>markdown-open-command</code>.</p>

<p>On macOS, a popular application for opening Markdown files is
<a href="https://geo.itunes.apple.com/us/app/marked-2/id890031187?mt=12&amp;at=11l5Vs">Marked 2</a>, a live-updating Markdown previewer.  Perhaps the
easiest way to configure Markdown Mode to use it is to write a simple
shell script to serve as a wrapper to open Marked 2 from the command
line.<sup id="fnref-m2"><a href="#fn-m2" rel="footnote">6</a></sup></p>

<p>Below is an example script named <code>mark</code>.  Be sure to place it
somewhere in your path (e.g., <code>/usr/local/bin</code>) and use <code>chmod +x</code> to
make it executable.</p>

<figure class="code">
  <figcaption>Shell Script to Use Marked 2 as a Previewer</figcaption>

<div class="highlight"><pre><code></code><code class="ch">#!/bin/sh</code>
<code class="k">if</code> <code class="o">[</code> <code class="nv">$1</code> <code class="o">]</code><code class="p">;</code> <code class="k">then</code>
    open -a <code class="s2">"Marked 2"</code> <code class="nv">$1</code><code class="p">;</code>
<code class="k">else</code>
    open -a <code class="s2">"Marked 2"</code><code class="p">;</code>
<code class="k">fi</code>
</pre></div>

</figure>

<p>Then you can ask Markdown Mode to call the script for opening the
current file by setting <code>markdown-open-command</code>:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="k">setq</code> <code class="nv">markdown-open-command</code> <code class="s">"/usr/local/bin/mark"</code><code class="p">)</code>
</pre></div>

</figure>

<p>Furthermore, once you install the <code>mark</code> script you can simply type
<code>mark &lt;filename&gt;</code> in a terminal to open a Markdown file.</p>

<h3 id="leanpub-auto-pandoc-mode">
<span class="section-number">6.15 </span>Pandoc Mode</h3>

<p>Pandoc, in addition to being a Markdown-to-HTML processor, can convert
multiple input formats to each of several output formats.  For
example, it can also convert Markdown to LaTeX or Org format.</p>

<p><a href="https://joostkremers.github.io/pandoc-mode/">Pandoc Mode</a> is an Emacs interface for Pandoc, implemented as a
minor mode.  You can install it from <a href="https://melpa.org/#/pandoc-mode">MELPA</a> or <a href="https://stable.melpa.org/#/pandoc-mode">MELPA Stable</a> and
activate it by typing <code>M-x pandoc-mode</code>.  The documentation summarizes
Pandoc Mode as follows:</p>

<blockquote>
  <p><code>pandoc-mode</code> uses the <code>hydra</code> package to create a keyboard-driven
menu interface to all options and settings.  Pressing <code>C-c /</code> calls
the main menu.  After that, everything should be self-explanatory.
From the main menu, you can run <code>pandoc</code> on the buffer, view the
output buffer and the current settings, set the input and output
formats, and you can go to the options menu.</p>
</blockquote>

<p>Some examples of settings Pandoc Mode can manage for you are:</p>

<ul>
  <li>produce standalone output or a snippet,</li>
  <li>use a template file,</li>
  <li>generate a table of contents,</li>
  <li>include a header or footer,</li>
  <li>set the syntax highlighting style,</li>
  <li>render mathematical equations,</li>
  <li>link to a CSS stylesheet.</li>
</ul>

<p>These are but a few of the available options.  Pandoc Mode also adds
font lock support for Pandoc citations and numbered example lists.</p>

<p>With Pandoc Mode you can create multiple output profiles for a single
input file.  You might have a Markdown file that you want to convert
to HTML for publishing on your website and to PDF for printing.</p>

<p>You can change the output settings from the <code>pandoc-mode</code> menus, or
you can store them in settings files on a per-project or global
basis.  If your main file name is <code>article.md</code> then the settings file
for HTML output would be <code>.article.md.html.pandoc</code>.</p>

<p>If you use Pandoc Mode often, you can add a hook to load it
automatically with Markdown Mode whenever a <code>pandoc-mode</code> settings
file is detected:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">add-hook</code> <code class="ss">'markdown-mode-hook</code> <code class="ss">'conditionally-turn-on-pandoc</code><code class="p">)</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-r-markdown">
<span class="section-number">6.16 </span>R Markdown</h3>

<p><a href="http://rmarkdown.rstudio.com">R Markdown</a> is a Markdown dialect created by RStudio specifically
for producing reports from the R statistical package.  For example, it
supports evaluation of R code blocks, with the output of the code
included in the document.  R Markdown supports a variety of output
formats, including HTML, PDF, and Word.</p>

<p>R Markdown files have the <code>.Rmd</code> extension, so at the very least
you will want to use <code>markdown-mode</code> for those files.  For example:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'auto-mode-alist</code> <code class="o">'</code><code class="p">(</code><code class="s">"\\.Rmd\\'"</code> <code class="o">.</code> <code class="nv">markdown-mode</code><code class="p">))</code>
</pre></div>

</figure>

<p>The basic Markdown syntax is unchanged in R Markdown, but it supports
several extensions.  Fenced code blocks with braces around the
language name are used to format R code blocks:</p>

<figure class="code">
<div class="highlight"><pre><code></code>```{r}
summary(cars$dist)
summary(cars$speed)
```
</pre></div>

</figure>

<p>You can also provide options in the code block info string:</p>

<figure class="code">
<div class="highlight"><pre><code></code>```{r, eval=FALSE}
summary(cars)
```
</pre></div>

</figure>

<p>Markdown Mode will use <code>r-mode</code> for syntax highlighting in these code
blocks if you enable native font lock.  To do so, use
<code>markdown-toggle-fontify-code-blocks-natively</code> or <code>C-c C-x C-f</code>.</p>

<h3 id="leanpub-auto-tracking-changes-with-criticmarkup-mode">
<span class="section-number">6.17 </span>Tracking Changes with CriticMarkup Mode</h3>


<figure class="image center" style="width: 80%;">
  <img src="/site_images1/markdown-mode/cm-mode.png" alt="CriticMarkup Mode and Markdown Mode" style="width: 100%;">
  <figcaption>CriticMarkup Mode and Markdown Mode</figcaption>
</figure>


<p><a href="http://criticmarkup.com">CriticMarkup</a> is a plain text markup language for tracking
changes to Markdown and other compatible documents.  It defines the
following tags for marking changes:</p>

<ul>
  <li>Addition: <code>{++added++}</code>
</li>
  <li>Deletion: <code>{--removed--}</code>
</li>
  <li>Substitution: <code>{~~old~&gt;new~~}</code>
</li>
  <li>Comment: <code>{&gt;&gt;comment&lt;&lt;}</code>
</li>
  <li>Highlight: <code>{==highlight==}{&gt;&gt;comment&lt;&lt;}</code>
</li>
</ul>

<p><a href="https://github.com/joostkremers/criticmarkup-emacs"><code>cm-mode</code></a>
is a minor mode that provides support for CriticMarkup
in Emacs.  Like other packages described, it is available on <a href="https://melpa.org/#/cm-mode">MELPA</a>
and <a href="https://stable.melpa.org/#/cm-mode">MELPA Stable</a>.  First, it provides font-lock support for the
markup tags above, and it defines the customizable faces used to
highlight them.  To customize the faces, see the <code>criticmarkup-faces</code>
group.  Second, it provides keybindings for insert CriticMarkup tags
to track changes in a file:</p>

<ul>
  <li>
<code>C-c * a</code> - add text</li>
  <li>
<code>C-c * d</code> - delete text</li>
  <li>
<code>C-c * s</code> - substitute text</li>
  <li>
<code>C-c * c</code> - insert a comment (possibly with highlight)</li>
</ul>

<p><code>cm-mode</code> uses <code>C-c *</code> as a prefix, but this can easily be
changed to, say, <code>C-c c</code> like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nf">define-key</code> <code class="nv">cm-mode-map</code> <code class="p">(</code><code class="nv">kbd</code> <code class="s">"C-c *"</code><code class="p">)</code> <code class="no">nil</code><code class="p">)</code>
<code class="p">(</code><code class="nf">define-key</code> <code class="nv">cm-mode-map</code> <code class="p">(</code><code class="nv">kbd</code> <code class="s">"C-c c"</code><code class="p">)</code> <code class="nv">cm-prefix-map</code><code class="p">)</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-editing-html-as-markdown">
<span class="section-number">6.18 </span>Editing HTML as Markdown</h3>


<figure class="image center" style="width: 396px;">
  <img src="/site_images1/markdown-mode/ham-mode.png" alt="HTML Mode and HTML as Markdown Mode" style="width: 100%;">
  <figcaption>HTML Mode and HTML as Markdown Mode</figcaption>
</figure>


<p><a href="https://github.com/Malabarba/ham-mode">HTML as Markdown Mode</a>, or <code>ham-mode</code>, allows you to edit
HTML files as if they were Markdown files.  That is, it provides a
transparent layer so that you can edit an HTML file using Markdown Mode.
It first converts the HTML to Markdown but any updates to the contents
are converted back to HTML.</p>

<p>To install the package from <a href="https://melpa.org/#/ham-mode">MELPA</a> or <a href="https://stable.melpa.org/#/ham-mode">MELPA Stable</a>, simply
run <code>M-x package-install RET ham-mode</code>.  To activate it while visiting
an HTML file, run <code>M-x ham-mode</code>.</p>

<h3 id="leanpub-auto-editing-markdown-tables-with-org-table-mode">
<span class="section-number">6.19 </span>Editing Markdown Tables with Org Table Mode</h3>

<p>Although there is no official table syntax in Markdown, a couple of
widely accepted table formats have emerged.  Implementing a full-featured
table editing mode, such as <code>orgtbl-mode</code> in Org Mode, would require
tremendous effort, and so unfortunately Markdown Mode does not yet
support table editing.  However, with a little work, and if one is
brave enough, <code>orgtbl-mode</code> can be adapted to help in editing basic
Markdown tables.</p>

<p>Here, we consider the pipe table syntax of PHP Markdown Extra
because of its similarity to Org Mode tables.</p>

<figure class="code">
<div class="highlight"><pre><code></code>| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |
</pre></div>

</figure>

<p>This is a rather simple table, but notably the only difference
with the Org table counterpart is the point at which the lines
cross in the center.  Instead of <code>-|-</code>, Org uses <code>-+-</code>:</p>

<figure class="code">
<div class="highlight"><pre><code></code>| First Header | Second Header |
|--------------+---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |
</pre></div>

</figure>

<p>If you toggle on <code>orgtbl-mode</code>, it will recognize either table, but
when you re-align with <code>C-c C-c</code>, the result will be converted to Org
format, which will not be rendered correctly by Markdown processors.
One way around this—which to be clear is a hack and is not recommended
for important work—is to <em>advise</em> the <code>orgtbl-mode</code> alignment
function so that at the end it converts the intersections back to
Markdown pipe table form.</p>

<p>The following function temporarily narrows the buffer to the
table in question and replaces instances of <code>-+-</code> with <code>-|-</code>.  It
only does so in <code>markdown-mode</code> or <code>gfm-mode</code>, so as not to
disturb actual Org tables.</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nb">require</code> <code class="ss">'org-table</code><code class="p">)</code>

<code class="p">(</code><code class="nb">defun</code> <code class="nv">markdown-org-table-align-advice</code> <code class="p">()</code>
  <code class="s">"Replace \"+\" sign with \"|\" in tables."</code>
  <code class="p">(</code><code class="nb">when</code> <code class="p">(</code><code class="nf">member</code> <code class="nv">major-mode</code> <code class="o">'</code><code class="p">(</code><code class="nv">markdown-mode</code> <code class="nv">gfm-mode</code><code class="p">))</code>
    <code class="p">(</code><code class="k">save-excursion</code>
      <code class="p">(</code><code class="k">save-restriction</code>
        <code class="p">(</code><code class="nf">narrow-to-region</code> <code class="p">(</code><code class="nv">org-table-begin</code><code class="p">)</code> <code class="p">(</code><code class="nv">org-table-end</code><code class="p">))</code>
        <code class="p">(</code><code class="nf">goto-char</code> <code class="p">(</code><code class="nf">point-min</code><code class="p">))</code>
        <code class="p">(</code><code class="k">while</code> <code class="p">(</code><code class="nf">search-forward</code> <code class="s">"-+-"</code> <code class="no">nil</code> <code class="no">t</code><code class="p">)</code>
          <code class="p">(</code><code class="nf">replace-match</code> <code class="s">"-|-"</code><code class="p">))))))</code>

<code class="p">(</code><code class="nv">advice-add</code> <code class="ss">'org-table-align</code> <code class="nb">:after</code> <code class="ss">'markdown-org-table-align-advice</code><code class="p">)</code>
</pre></div>

</figure>

<p>Once this code is evaluated, when you run <code>org-table-align</code>, such as
when pressing <code>C-c C-c</code>, the table will be automatically converted
back to Markdown format.</p>

<aside class="warning blurb">
    <p>This simple function does not handle the full syntax,
such as indicators for table alignment, but it may be useful
as a starting point for more robust versions.</p>

</aside>

<div class="scene-break stars">*    *    *</div>
<h2 id="devel">
<span class="section-number">7. </span>Markdown Mode Development</h2>

<p>Markdown Mode is an open source project.  The primary repository for
Markdown Mode is <a href="https://github.com/jrblevin/markdown-mode">on GitHub</a>.  Anyone can easily browse the
project files by visiting the project’s GitHub page
at <a href="https://github.com/jrblevin/markdown-mode">https://github.com/jrblevin/markdown-mode</a>.</p>

<p>If you would like to contribute to Markdown Mode development, the best
way to start is to clone the Git repository.  You can clone the
repository using the HTTPS, SSH, and Git protocols:</p>

<figure class="code">
<div class="highlight"><pre><code></code>git clone https://github.com/jrblevin/markdown-mode.git
git clone git://github.com/jrblevin/markdown-mode.git
git clone ssh://git@github.com:jrblevin/markdown-mode.git
</pre></div>

</figure>

<h3 id="leanpub-auto-testing-the-development-version">
<span class="section-number">7.1 </span>Testing the Development Version</h3>

<p>To test the current development version, you may either download
<code>markdown-mode.el</code> from the <a href="https://github.com/jrblevin/markdown-mode">GitHub repository</a> or install the
<code>markdown-mode</code> package from <a href="https://melpa.org/#/markdown-mode">MELPA</a>.</p>

<p>Note that by nature, the development version of Markdown Mode may be
unstable or even unusable at times.  It is not recommend for daily
use unless you are fine with things occasionally breaking.  Function
names, features, keybindings, etc. may change without notice.</p>

<p>Supposing you have stored <code>markdown-mode.el</code> in directory named
<code>/path/to/markdown-mode</code>, then you will probably need to make sure that
Emacs can find it by adding something like the following to your init
file:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'load-path</code> <code class="s">"/path/to/markdown-mode"</code><code class="p">)</code>
</pre></div>

</figure>

<p>Alternatively, you can install the <code>markdown-mode</code> package from the
(unstable) <a href="https://melpa.org/#/markdown-mode">MELPA repository</a>.  In
this case, you might need to tell the package manager about the
repository in your init file, like so:</p>

<figure class="code">
<div class="highlight"><pre><code></code><code class="p">(</code><code class="nb">require</code> <code class="ss">'package</code><code class="p">)</code>
<code class="p">(</code><code class="nv">add-to-list</code> <code class="ss">'package-archives</code>
             <code class="o">'</code><code class="p">(</code><code class="s">"melpa"</code> <code class="o">.</code> <code class="s">"http://melpa.org/packages/"</code><code class="p">))</code>
<code class="p">(</code><code class="nv">package-initialize</code><code class="p">)</code>
</pre></div>

</figure>

<h3 id="leanpub-auto-reporting-bugs-and-issues">
<span class="section-number">7.2 </span>Reporting Bugs and Issues</h3>

<p>Markdown Mode is developed and tested primarily for compatibility with
GNU Emacs 24.3 and later.  If you are using an older version of Emacs,
please update to a more recent version first to see if the issue
persists.</p>

<p>If you do find a bug in Markdown Mode, please construct a test
case—and if possible a patch—and open a ticket on the
<a href="https://github.com/jrblevin/markdown-mode/issues">GitHub issue tracker</a>
at <a href="https://github.com/jrblevin/markdown-mode/issues">https://github.com/jrblevin/markdown-mode/issues</a>.  Before
reporting an issue, please try to reproduce the issue with a minimal
Emacs configuration, for example, by starting Emacs without your usual
local init file (e.g., starting with <code>emacs --no-init</code>) and then
loading <code>markdown-mode</code> with <code>M-x load-file</code>.</p>

<h3 id="leanpub-auto-submitting-patches-or-github-pull-requests">
<span class="section-number">7.3 </span>Submitting Patches or GitHub Pull Requests</h3>

<p>Below are some guidelines for submitting patches.  Ideally, these
should be submitted in the form of GitHub pull requests, but email
patches are also fine if that is more convenient.  For pull requests,
it is recommended to create a new feature branch (e.g.,
<code>feat/my-new-feature</code>) and submit the pull request from that branch.
(If you instead add commits to the <code>master</code> branch in your own
repository, it’s more difficult to get back in sync if changes are
required to the patch.)</p>

<ul>
  <li>Markdown mode contributions should adhere to both the
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html">GNU Emacs Lisp coding conventions</a> and the
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Major-Mode-Conventions.html#Major-Mode-Conventions">Major Mode Conventions</a>.</li>
  <li>Test cases are needed for significant changes.  Markdown Mode uses
the <code>ert</code> (Emacs Lisp Regression Testing) library.  If you are not
familiar with writing tests, there are hundreds of examples in
<code>markdown-test.el</code> that you can use as a starting point for new
tests.</li>
  <li>You can confirm that your tests pass by either typing <code>make test</code>
from the command line or by issuing a GitHub pull request and
letting the <a href="https://travis-ci.org/jrblevin/markdown-mode">Travis CI</a> integration on GitHub run the tests for you.</li>
  <li>Please be sure to update the documentation at the top of
<code>markdown-mode.el</code> and the docstrings for related variables or
functions.</li>
  <li>If your patch involves changes to the documentation, you can
update the <code>README.md</code> file by running the <code>webpage.sh</code> script.</li>
  <li>Finally, it’s also helpful if you update the <code>CHANGES.md</code> file to
reflect the bug you fixed or the feature you added or improved.</li>
</ul>

<div class="scene-break stars">*    *    *</div>
<h2 id="leanpub-auto-conclusion">
<span class="section-number">8. </span>Conclusion</h2>

<h3 id="leanpub-auto-looking-back-and-looking-ahead">
<span class="section-number">8.1 </span>Looking Back and Looking Ahead</h3>

<p>When I wrote the first version of <code>markdown-mode.el</code> over ten years
ago, I never imagined it would reach as many people as it has.  This
was before GitHub was founded and around the same time <code>package.el</code>
was initially being developed.  Emacs 21.4 was the latest release and
Markdown itself was three years old.</p>

<p>Markdown Mode development continues and my goals for upcoming releases
are to improve performance, streamline the code base, build a more
robust Markdown parsing engine, and make it easier for users to choose
feature sets to match their preferred Markdown dialects.</p>

<p>Many parts of Emacs are designed around a dichotomous view of files as
either source code for a programming language or free form text.
Markdown lies somewhere in between these two extremes, and sometimes
the best route for implementing new features in Emacs is not obvious.
As Markdown Mode and my own understanding of the subtleties of Emacs
Lisp grow, I hope that Markdown integration in Emacs can become
even faster, more seamless, and more robust.</p>

<h3 id="leanpub-auto-further-reading">
<span class="section-number">8.2 </span>Further Reading</h3>

<p>To keep up with Markdown Mode news, you can follow my blog at
<a href="https://jblevins.org/log/">https://jblevins.org/log/</a> or follow the project on GitHub at
<a href="https://github.com/jrblevin/markdown-mode/">https://github.com/jrblevin/markdown-mode/</a>.  For Emacs news more
generally, there is <a href="http://planet.emacsen.org">Planet Emacsen</a>, a feed aggregator at
<a href="http://planet.emacsen.org/">http://planet.emacsen.org/</a>, and <a href="http://sachachua.com/blog/">Sacha Chua’s weekly Emacs News</a>
at <a href="http://sachachua.com/blog/">http://sachachua.com/blog/</a>.</p>

<p>I also highly recommend <a href="https://masteringemacs.org/"><em>Mastering Emacs</em></a> by Mickey Petersen for
all Emacs users.  Few could read this book and not learn <em>something</em>
new about our favorite text editor. <em>Mastering Emacs</em> was a primary
source of inspiration for me in writing this <em>Guide</em>.  It is available
at <a href="https://masteringemacs.org/">https://masteringemacs.org/</a>.</p>

<p>There are also active Emacs communities on the <a href="https://www.emacswiki.org/">EmacsWiki</a> at
<a href="https://www.emacswiki.org/">https://www.emacswiki.org/</a>, the <a href="https://emacs.stackexchange.com">Emacs StackExchange</a> at
<a href="https://emacs.stackexchange.com">https://emacs.stackexchange.com</a>, and on <a href="https://www.reddit.com/r/emacs/">Reddit</a> at
<a href="https://www.reddit.com/r/emacs/">https://www.reddit.com/r/emacs/</a>.</p>

<p>Finally, every Emacs user should practice getting help from within
Emacs itself, which is often the most detailed and up to date source
and certainly the most convenient.  A few of the most useful commands
are <code>C-h k</code> (<code>describe-key</code>), <code>C-h m</code> (<code>describe-mode</code>), <code>C-h f</code>
(<code>describe-function</code>), and <code>C-h v</code> (<code>describe-variable</code>), and <code>C-h a</code>
(<code>apropos-command</code>).</p>


<h2 id="leanpub-endnotes">Notes</h2>
<div class="footnotes">
        <h2></h2>  <p id="fn-aaronsw">    </p>
<p><span class="endnote-number">1</span>John Gruber described Aaron Swartz as his “muse” while developing Markdown, due to his early enthusiasm for and feedback on the project.  Aaron Swartz also wrote <a href="http://www.aaronsw.com/2002/html2text/">html2text</a>, a popular HTML to Markdown converter written in Python.<a href="#fnref-aaronsw" rel="rev-footnote">↩</a></p>

  <p id="fn-MELPA">    </p>
<p><span class="endnote-number">2</span>MELPA is Milkypostman’s Emacs Lisp Package Archive at <a href="http://melpa.org/">http://melpa.org/</a>.<a href="#fnref-MELPA" rel="rev-footnote">↩</a></p>

  <p id="fn-extensions">    </p>
<p><span class="endnote-number">3</span>See the tip on <a href="#file-extensions">Using Markdown Mode with Other File Extensions</a> for instructions on how to configure Emacs to use <code>markdown-mode</code> for file extensions other than <code>.md</code> and <code>.markdown</code>.<a href="#fnref-extensions" rel="rev-footnote">↩</a></p>

  <p id="fn-stable">    </p>
<p><span class="endnote-number">4</span>The latest stable version is available at <a href="https://jblevins.org/projects/markdown-mode/markdown-mode.el">https://jblevins.org/projects/markdown-mode/markdown-mode.el</a>.<a href="#fnref-stable" rel="rev-footnote">↩</a></p>

  <p id="fn-unicode">    </p>
<p><span class="endnote-number">5</span>Technical limitations prevent some characters from being displayed in the text.  UTF-16 encodings and entity names are listed instead.<a href="#fnref-unicode" rel="rev-footnote">↩</a></p>

  <p id="fn-m2">    </p>
<p><span class="endnote-number">6</span>See <a href="https://jblevins.org/log/marked-2-command">https://jblevins.org/log/marked-2-command</a> for details.<a href="#fnref-m2" rel="rev-footnote">↩</a></p>


</div>

</div>


</section>
</div>

</div>
<footer class='footer'>
<div class='container--small'>
<h1 class='footer-logo'>
<a href="https://leanpub.com/"><img src="https://d3g6anj9jkury9.cloudfront.net/assets/logos/logo-white-96-67-2x-9bfee74570449b60febfe179fb06c1eb.png" alt="Logo white 96 67 2x" />
</a></h1>
<h3 class='footer-slogan'>Publish Early, Publish Often</h3>
<ul class='footer-list-break'>
<li>
<h5 class='footer-headings'>Path</h5>
</li>
<li class='footer-descriptions-top'>There are many paths, but the one you're on right now on Leanpub is:</li>
<li class='path'>
Markdown-mode › Read
</li>
</ul>
<div class='footer-links'>
<ul class='footer-list'>
<ul class='footer-columns'>
<li>
<h5 class='footer-headings'>READERS</h5>
</li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Newsletters</h5>
</li>
<li><a href="/newsletters">Weekly Sale</a></li>
<li><a href="/newsletters">Monthly Sale</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Store</h5>
</li>
<li><a href="/">Home</a></li>
<li><a href="/redeem">Redeem a Token</a></li>
<li><a href="/bookstore/book?search">Search</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Support</h5>
</li>
<li><a href="http://help.leanpub.com/en/articles/3788293-the-leanpub-faq">Leanpub FAQ</a></li>
<li><a href="http://help.leanpub.com/en/articles/4405350-leanpub-author-faq">Leanpub Author FAQ</a></li>
<li><a href="http://help.leanpub.com/en/">Search our Help Center</a></li>
<li><a href="http://help.leanpub.com/en/articles/110768-if-i-can-t-find-an-answer-to-my-question-in-this-help-center-what-should-i-do">How to Contact Us</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-headings'>FRONTMATTER PODCAST</h5>
</li>
<li><a href="/podcasts/featured">Featured Episode</a></li>
<li><a href="/podcasts/frontmatter">Episode List</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-headings'>COMPANY</h5>
</li>
<li>
<h5 class='footer-list-title'>About</h5>
</li>
<li><a href="/about">About Leanpub</a></li>
<li><a href="https://medium.com/@leanpub">Blog</a></li>
<li><a href="/contact">Contact</a></li>
<li><a href="/press">Press</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Essays</h5>
</li>
<li><a href="/climatechange">Climate Change</a></li>
<li><a href="/simplifying">Simplifying</a></li>
<li><a href="/manifesto">Manifesto</a></li>
<li><a href="/covid19">COVID-19</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>More</h5>
</li>
<li><a href="/causes">Causes</a></li>
<li><a href="/accessibility">Accessibility</a></li>
</ul>
</ul>
<ul class='footer-list'>
<ul class='footer-columns'>
<li>
<h5 class='footer-headings'>AUTHORS</h5>
</li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Write and Publish on Leanpub</h5>
</li>
<li><a href="/create/book">Create a Book</a></li>
<li><a href="/create/course">Create a Course</a></li>
<li><a href="/testimonials">Testimonials</a></li>
<li><a href="/authors">Why Leanpub</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Author Newsletter</h5>
</li>
<li><a href="/newsletters">The Leanpub Author Update</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Author Support</h5>
</li>
<li><a href="http://help.leanpub.com/author-help">Author Help Center</a></li>
<li><a href="https://community.leanpub.com/c/authors">Leanpub Authors Forum</a></li>
<li><a href="https://leanpub.com/manual/read">The Leanpub Manual</a></li>
<li><a href="/help/supported_languages">Supported Languages</a></li>
<li><a href="https://leanpub.com/lfm/read">The LFM Manual</a></li>
<li><a href="https://leanpub.com/markua/read">Markua Manual</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Developer Support</h5>
</li>
<li><a href="/help/api">API Docs</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Companies</h5>
</li>
<li><a href="/companies">Company Program</a></li>
<li><a href="/p/register">Create a Company</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-list-title'>Universities</h5>
</li>
<li><a href="/universities">Universities Program</a></li>
</ul>
<ul class='footer-list-break'>
<li>
<h5 class='footer-headings'>LEGAL</h5>
</li>
<li><a href="/terms">Terms of Service</a></li>
<li><a href="/takedown">Copyright Policy</a></li>
<li><a href="/privacy">Privacy Policy</a></li>
</ul>
</ul>
</div>
<p class='footer-copyright'>
Leanpub is copyright &copy; 2010-2021 <a href="http://ruboss.com">Ruboss Technology Corp.</a> All rights reserved.
</p>
</div>
</footer>

<div id='react-modal'></div>

</div>
<div class='cookies-banner alert alert--info' style='display: none'>
  Leanpub requires cookies in order to provide you the best experience.
  <a class='dismiss link'>Dismiss</a>
</div>

<script type='text/javascript'>
  window.addEventListener('load', function() {
    var shouldShowCookies = document.cookie.indexOf('should_show_cookies') !== -1

    if (shouldShowCookies) {
      var banner = document.querySelector('.cookies-banner')
      // IE < 9 check
      if (banner.style.removeProperty) {
        banner.style.removeProperty('display');
      } else {
        banner.style.removeAttribute('display');
      }
      document.querySelector('.cookies-banner').classList.add('shown')
      // Note that we have to use vanilla JS here because ujs (remote links) code doesn't live in the react app, and i don't
      // want to have to write this shit twice.
      document.querySelector('.cookies-banner .dismiss').addEventListener('click', function() {
        document.querySelector('.cookies-banner').remove()
        var xhr = new XMLHttpRequest()
        xhr.open("POST", "/api/v1/accepted_terms/dismiss_cookies", true);
        xhr.send()
      })
    }
  })
</script>


<script src="https://d3g6anj9jkury9.cloudfront.net/assets/application-026a3baf4d36284620e538a81dbf5e19.js"></script>
<!-- Twitter universal website tag code -->
<script>
!function(e,t,n,s,u,a){e.twq||(s=e.twq=function(){s.exe?s.exe.apply(s,arguments):s.queue.push(arguments);
},s.version='1.1',s.queue=[],u=t.createElement(n),u.async=!0,u.src='//static.ads-twitter.com/uwt.js',
a=t.getElementsByTagName(n)[0],a.parentNode.insertBefore(u,a))}(window,document,'script');
// Insert Twitter Pixel ID and Standard Event data below
twq('init','nw0pa');
twq('track','PageView');
</script>
<!-- End Twitter universal website tag code -->

<script>
  $('.toc a').on('click', function(e) {
    if (window.innerWidth <= 768) {
      $('#read-online').addClass('sidebar-hidden')
      $('.toggle-sidebar').addClass('sidebar-hidden')
    }
  })
  
  $('.scroll-wrapper').on('scroll', function(e) {
    if (e.target.scrollTop > 10) {
      $('.read-online-slidable').addClass('scrolled')
      $('#scroll-wrapper').addClass('read-online-scrolled')
    } else {
      $('.read-online-slidable').removeClass('scrolled')
      $('#scroll-wrapper').removeClass('read-online-scrolled')
    }
  })
  
  $('.toggle-sidebar').on('click', function(e) {
    $(this).toggleClass('sidebar-hidden')
    $('#read-online').toggleClass('sidebar-hidden')
  })
  
  if (window.innerWidth <= 768) {
    $('#read-online').addClass('sidebar-hidden')
    $('.toggle-sidebar').addClass('sidebar-hidden')
  }
</script>

</body></html>
